
<java:format>
<f:bundle basename="templates/resources/messages">
<f:message>copyright</f:message>
package ${$groupID}.client;

<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package" var="package">
    		 <c:setVariable select="concat($webPackage,$package/@name)" var="packageName"/>	
    		 <c:iterate select="$package/Namespace.ownedElement/Class" var="class">
    		 <c:if test="$class/@isAbstract = 'false'">
    			import ${$groupID}.client.${$package/@name}.${lower-case($class/@name)}.ReadAll${$class/@name}sPanely;
    			import ${$groupID}.client.${$package/@name}.${lower-case($class/@name)}.${$class/@name}SideBar;
    		 </c:if>	
			 </c:iterate>
	</c:iterate>
import info.yalamanchili.gwt.composite.ReadAllCompositey.ReadAllTableType;	
import info.yalamanchili.gwt.exception.GWTUncaughtExceptionHandler;
import info.yalamanchili.security.gwt.SecurityWelcome;
import info.yalamanchili.security.gwt.SecurityWelcome.CMD_TYPE;
import info.yalamanchili.security.gwt.YRole;
import info.yalamanchili.security.gwt.YUser;
import info.yalamanchili.security.gwt.user.UserSideBar;
import info.yalamanchili.gwt.callback.ALAsyncCallback;
import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.core.client.GWT;
import com.google.gwt.user.client.ui.RootLayoutPanel;
import com.google.gwt.user.client.ui.MenuBar;
import com.google.gwt.user.client.Command;
import ${$webPackage}internalization.${camelCase($projectName)}Constants;
import ${$webPackage}internalization.${camelCase($projectName)}Messages;
import com.google.gwt.user.client.ui.Widget;
import com.google.gwt.user.client.ui.DockLayoutPanel;
import com.google.gwt.dom.client.Style.Unit;
import com.google.gwt.user.client.ui.FlowPanel;
import info.yalamanchili.security.gwt.AdminService.AdminServiceAsync;
import com.google.web.bindery.event.shared.SimpleEventBus;

import java.util.logging.Logger;
import java.util.HashSet;
import java.util.Set;
<f:message>generated.class.comment</f:message>
public class ${camelCase($projectName)}Welcome implements EntryPoint {
<f:message>generated.comment</f:message>
	private static Logger logger = Logger.getLogger(${camelCase($projectName)}Welcome.class.getName());
<f:message>generated.comment</f:message>
	private static ${camelCase($projectName)}Welcome instance;
<f:message>generated.comment</f:message>	
	public DockLayoutPanel mainPanel = new DockLayoutPanel(Unit.EM);
<f:message>generated.comment</f:message>	
	public String user;
<f:message>generated.comment</f:message>	
	public Set<String> roles = new HashSet<String>();
<f:message>generated.comment</f:message>	
	public boolean isLoggedIn = false;
<f:message>generated.comment</f:message>	
	public static ${camelCase($projectName)}Welcome instance(){
	if (instance == null) {
			return new ${camelCase($projectName)}Welcome();
		}
		return instance;
	}
<f:message>generated.comment</f:message>
	public static ${camelCase($projectName)}Constants constants = (${camelCase($projectName)}Constants) GWT.create(${camelCase($projectName)}Constants.class);
<f:message>generated.comment</f:message>
	public static ${camelCase($projectName)}Messages messages = (${camelCase($projectName)}Messages) GWT.create(${camelCase($projectName)}Messages.class);
<f:message>generated.comment</f:message>	
	public static ${camelCase($projectName)}RequestFactory requestFactory = GWT.create( ${camelCase($projectName)}RequestFactory.class);
						
<f:message>generated.comment</f:message>			
	public void onModuleLoad() {
			GWT.setUncaughtExceptionHandler(new GWTUncaughtExceptionHandler());
			instance=this;
			init();
		}
<f:message>generated.comment</f:message>	
	public void init() {
		AdminServiceAsync.instance().getUser(new ALAsyncCallback<YUser>() {
			@Override
			public void onResponse(YUser user) {
				if (user != null) {
					logger.info("initUser on response" + user.getUsername());
					isLoggedIn = true;
					${camelCase($projectName)}Welcome.instance().user = user.getUsername();
					for (YRole role : user.getRoles()) {
						logger.info("role:" + role.getRolename());
						roles.add(role.getRolename().toUpperCase());
					}
				}
				RootLayout rootLayout = new RootLayout();
				configure();
				addListeners();
				RootLayoutPanel.get().add(rootLayout);
				requestFactory.initialize(new SimpleEventBus());
			}

		});
	}
	
<f:message>generated.comment</f:message>		
		protected void addListeners() {
		}
<f:message>generated.comment</f:message>
	protected void configure() {
		configureEntityPanel();
		configureStatusPanel();
		configureSideBarTop();
		configureSideBarBottom();
		configureSideBar();
		configureMenuBar();
	}

<f:message>generated.comment</f:message>	
	protected void configureEntityPanel() {

	}
	
<f:message>generated.comment</f:message>
	protected void configureMenuBar() {
	MenuBar menu = new MenuBar();

	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package" var="package">
    MenuBar ${lower-case($package/@name)}Bar = new MenuBar(true);
			 <%-- iterate through class and add only non composite children and non parent--%>
			 <c:iterate select="$package/Namespace.ownedElement/Class" var="class">
			 	<c:if test="$class/@isDependent = 'false'">  
    		 	${lower-case($package/@name)}Bar.addItem("${$class/@name}", ${lower-case($class/@name)}Cmd);
				</c:if>
			 </c:iterate> 
	</c:iterate>
	
		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package" var="package">
		menu.addItem("${upper-case($package/@name)}", ${lower-case($package/@name)}Bar);
		</c:iterate>
		
		if (roles.contains("ADMIN")) {
			MenuBar adminBar = new MenuBar(true);
			adminBar.addItem("Users", userCmd);
			adminBar.addItem("Roles", roleCmd);
			// TODO check admin role
			menu.addItem("ADMIN", adminBar);
		}
					
		RootLayout.instance().menuBar.add(menu);
	}
<f:message>generated.comment</f:message>
	protected void configureStatusPanel() {
		RootLayout.instance().statusPanel.add(new StatusPanel());
	}
<f:message>generated.comment</f:message>
	protected void configureSideBar() {
		
	}
<f:message>generated.comment</f:message>
	protected void configureSideBarTop() {
		
	}
<f:message>generated.comment</f:message>
	protected void configureSideBarBottom() {
	
	}
	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package" var="package">
			 <%-- iterate through class and add only non composite children and non parent--%>
			 <c:iterate select="$package/Namespace.ownedElement/Class" var="class">
			 	<c:if test="$class/@isDependent = 'false'">  
<f:message>generated.comment</f:message>			 	
    			Command ${lower-case($class/@name)}Cmd= new Command() {

				@Override
				public void execute() {
					getEntityPanel().clear();
					getEntityPanel().add(new ReadAll${$class/@name}sPanely(ReadAllTableType.READALL));
					getSidePanelTop().clear();
					getSidePanelTop().add(new ${$class/@name}SideBar());
				}

			};
				</c:if>
			 </c:iterate> 
	</c:iterate>
<f:message>generated.comment</f:message>	
	//USERS ADMIN	
		Command userCmd = new Command() {

		@Override
		public void execute() {
			new SecurityWelcome(CMD_TYPE.USER,getEntityPanel(), getSidePanelTop(),
					getSidePanelBottom());
		}

	};
	
<f:message>generated.comment</f:message>
	// ROLES ADMIN
	Command roleCmd = new Command() {

		@Override
		public void execute() {
			new SecurityWelcome(CMD_TYPE.ROLE, getEntityPanel(),
					getSidePanelTop(), getSidePanelBottom());
		}

	};
		
// TODO remove
	public FlowPanel getEntityPanel() {
		return RootLayout.instance().entityPanel;
	}

	// TODO remove
	public FlowPanel getSidePanelTop() {
		return RootLayout.instance().sidePanelTop;
	}

	// TODO remove
	public FlowPanel getSidePanelBottom() {
		return RootLayout.instance().sidePanelBottom;
	}	
}
</f:bundle>
</java:format>