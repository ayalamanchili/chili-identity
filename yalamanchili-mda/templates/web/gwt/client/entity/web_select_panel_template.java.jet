<java:merge/>
<java:format>
<f:bundle basename="templates/resources/messages">
<f:message>copyright</f:message>
package ${$packageName}.${lower-case($class/@name)};
import ${$groupID}.entity.${lower-case($package/@name)}.${$class/@name};
import ${$webPackage}${camelCase($projectName)}Welcome;
import info.yalamanchili.gwt.widgets.ResponseStatusWidget;
import info.yalamanchili.gwt.callback.ALAsyncCallback;
import info.yalamanchili.gwt.composite.TreePanelComposite;
import java.util.Set;

import info.yalamanchili.gwt.composite.SelectComposite;
	<%-- process all many on source and non composites on target--%>
	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
		<%--check if the source is many side --%>
		<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
  		<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
  		<%-- check if the target association is navigable--%>
  		<c:if test="$association_connection_end/@isNavigable = 'true'">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
			<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID"> 
					<%-- process only compositions--%>
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end/@xmi.id = $association_connection_end2/@xmi.id)"> 
  					  		 	<%-- process only non composites on target--%>
  					  		 	<c:if test="not($association_connection_end2/@aggregation = 'composite')">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
import ${$groupID}.entity.${lower-case($package/@name)}.${$class2/@name};
  					  		 			</c:if> 
  					  		 		</c:iterate>
  					  		 	 </c:if> 	
  							  	</c:if> 
  					 	  </c:iterate> 					 	 				 	  
				</c:if>
			</c:if>	
			</c:if>			
			</c:if>													
		</c:iterate>
		</c:iterate>
	</c:iterate>

import java.util.List;
import java.util.Map;
<f:message>generated.class.comment</f:message>
public class Select${$class/@name}Panel extends SelectComposite<${$class/@name}> {
<f:message>generated.comment</f:message>
	public Select${$class/@name}Panel(String title, TreePanelComposite parent,
			Map<Long, String> available, Set<Long> selected) {
		super(title, parent, available, selected);
	}
<f:message>generated.comment</f:message>
	public Select${$class/@name}Panel(String name) {
		super(name);
	}
<f:message>generated.comment</f:message>	
	public Select${$class/@name}Panel(String name,${$class/@name} entity) {
		super(name,entity);
	}
<f:message>generated.comment</f:message>
	@Override
	protected void initListBox() {
	String[] columns = { 
<c:iterate select="$class/Classifier.feature/Attribute" var="attribute">
<%-- processes the premitive Datatypes --%>
	 <c:choose select="$attribute/StructuralFeature.type/DataType/@href" > <c:when test="${'$StringID'}" > "${$attribute/@name}", </c:when> 
</c:choose> 
</c:iterate>	
	 };
		${$packageName}.${lower-case($class/@name)}.${$class/@name}Service.${$class/@name}ServiceAsync.instance().getListBoxValues(columns, new ALAsyncCallback<Map<Long, String>>() {

					@Override
					public void onResponse(Map<Long, String> arg0) {
						populateListBox(arg0);

					}

				});

	}
<f:message>generated.comment</f:message>
	@Override
	public void getSelectedEntity(Long id) {
		${$packageName}.${lower-case($class/@name)}.${$class/@name}Service.${$class/@name}ServiceAsync.instance().read(id,
				new ALAsyncCallback<${$class/@name}>() {

					@Override
					public void onResponse(${$class/@name} res) {
						entity = res;

					}

				});

	}
<f:message>generated.comment</f:message>	
	public void setSelectedEntity(${$class/@name} entity) {
		if (entity.getId() != null)
			listBox.setItemSelected(valueIndex.get(entity.getId()), true);
	}
	
<f:message>generated.comment</f:message>
	@Override
	public void onAdd() {
		// TODO Auto-generated method stub

	}
<f:message>generated.comment</f:message>	
	@Override	
	public void onAddAll(TreePanelComposite parent, List<Long> ids) {
	<%-- process all many on source and non composites on target--%>
	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
		<%--check if the source is many side --%>
		<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
  		<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
  		<%-- check if the target association is navigable--%>
  		<c:if test="$association_connection_end/@isNavigable = 'true'">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
			<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID"> 
					<%-- process only compositions--%>
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end/@xmi.id = $association_connection_end2/@xmi.id)"> 
  					  		 	<%-- process only non composites on target--%>
  					  		 	<c:if test="not($association_connection_end2/@aggregation = 'composite')">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
//TODO need to check parent realation in case to user AbstractTreePanel instead of TreePanel
											if (parent.getEntity() instanceof ${$class2/@name}) {

											}		
	
  					  		 			</c:if> 
  					  		 		</c:iterate>
  					  		 	 </c:if> 	
  							  	</c:if> 
  					 	  </c:iterate> 					 	 				 	  
				</c:if>
			</c:if>	
			</c:if>			
			</c:if>													
		</c:iterate>
		</c:iterate>
	</c:iterate>	
	}

<f:message>generated.comment</f:message>	
	@Override	
	public void onRemoveAll(TreePanelComposite parent, List<Long> ids) {
	<%-- process all many on source and non composites on target--%>
	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
		<%--check if the source is many side --%>
		<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
  		<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
  		<%-- check if the target association is navigable--%>
  		<c:if test="$association_connection_end/@isNavigable = 'true'">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
			<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID"> 
					<%-- process only compositions--%>
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end/@xmi.id = $association_connection_end2/@xmi.id)"> 
  					  		 	<%-- process only non composites on target--%>
  					  		 	<c:if test="not($association_connection_end2/@aggregation = 'composite')">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
//TODO need to check parent realation in case to user AbstractTreePanel instead of TreePanel
											if (parent.getEntity() instanceof ${$class2/@name}) {

											}		
	
  					  		 			</c:if> 
  					  		 		</c:iterate>
  					  		 	 </c:if> 	
  							  	</c:if> 
  					 	  </c:iterate> 					 	 				 	  
				</c:if>
			</c:if>	
			</c:if>			
			</c:if>													
		</c:iterate>
		</c:iterate>
	</c:iterate>	
	}
	
<f:message>generated.comment</f:message>
	@Override
	protected void addListeners() {
		// TODO Auto-generated method stub

	}
<f:message>generated.comment</f:message>
	@Override
	protected void addWidgets() {
		// TODO Auto-generated method stub

	}
<f:message>generated.comment</f:message>
	@Override
	protected void configure() {
		// TODO Auto-generated method stub

	}

}
</f:bundle>
</java:format>
