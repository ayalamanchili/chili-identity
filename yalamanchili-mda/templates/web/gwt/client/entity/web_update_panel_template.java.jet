<java:merge/>
<java:format>
<f:bundle basename="templates/resources/messages">
<f:message>copyright</f:message>
package ${$packageName}.${lower-case($class/@name)};
<%--process enums from base and lavel1,2 parents --%>
	<%-- process parent class level 2 attributes--%>
	<c:if test="not($class/@name = $parentClass2/@name)">
				<c:iterate select="$parentClass2/Classifier.feature/Attribute" var="attribute">
				<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
					 <c:otherwise>
					 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
					 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
								import ${$groupID}.entity.${lower-case($package/@name)}.${ uppercaseFirst($enumeration/@name)};
					 			</c:if>
					 	</c:iterate>					 
		 			</c:otherwise>
		 		</c:choose>
			</c:iterate>
	</c:if>
	<%-- process parent class level 1 attributes--%>
	<c:if test="not($class/@name = $parentClass1/@name)">
				<c:iterate select="$parentClass1/Classifier.feature/Attribute" var="attribute">
				<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
					 <c:otherwise>
					 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
					 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
							import ${$groupID}.entity.${lower-case($package/@name)}.${ uppercaseFirst($enumeration/@name)};
					 			</c:if>
					 	</c:iterate>					 
		 			</c:otherwise>
		 		</c:choose>
			</c:iterate>
	</c:if>
	<%--process premitive data types of base current class --%>
			<c:iterate select="$class/Classifier.feature/Attribute" var="attribute">
				<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
					 <c:otherwise>
					 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
					 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
								import ${$groupID}.entity.${lower-case($package/@name)}.${ uppercaseFirst($enumeration/@name)};
					 			</c:if>
					 	</c:iterate>					 
		 			</c:otherwise>
		 		</c:choose>
			</c:iterate>
import ${$groupID}.entity.${lower-case($package/@name)}.${$class/@name};
import ${$webPackage}${camelCase($projectName)}Welcome;
import info.yalamanchili.gwt.callback.ALAsyncCallback;
import info.yalamanchili.gwt.composite.UpdateComposite;
import info.yalamanchili.gwt.widgets.ResponseStatusWidget;
import info.yalamanchili.gwt.fields.DataType;

<%-- process dropdowns one tone and many to one unidirectional--%>
<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID"> 
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 			  		 			
  					  		 			<%-- This processes the JPA realations @OneToMany, @ManyToMany, @OneToOne etc--%>
  					  		 			<%-- check target is one side--%>
  					  		 			<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 1">
  					    						<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = 1">
  					    							import ${$groupID}.client.${lower-case($package/@name)}.${lower-case($class2/@name)}.Select${$class2/@name}Panel;
  					    						<%--check for one to one --%>	
  					    						<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 1">
  					    						<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = 1">
  					    							import ${$groupID}.client.${lower-case($package/@name)}.${lower-case($class2/@name)}.Select${$class2/@name}Panel;
  					  		 					</c:if>	
  					  		 					</c:if>	
  					  		 			</c:if>	
  					  		 			</c:if>	
  					  		 			</c:if> 
  					  		 		</c:iterate>
  							  	</c:if> 
  					 	  </c:iterate> 					 	 				 	  
					</c:if> 											
		</c:iterate>
	</c:iterate>
</c:iterate>
<f:message>generated.class.comment</f:message>
public class Update${$class/@name}Panel extends UpdateComposite<${$class/@name}> {

<%-- process dropdowns one tone and many to one --%>
<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID"> 
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end/@xmi.id = $association_connection_end2/@xmi.id)"> 
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 			  		 			
  					  		 			<%-- This processes the JPA realations @OneToMany, @ManyToMany, @OneToOne etc--%>
  					  		 			<%-- check target is one side--%>
  					  		 			<%-- TODO need to check navaigability? --%>
  					  		 			<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 1">
  					    						<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = 1">
  					    						<%--process only non composites --%>
  					    						<c:if test="not($association_connection_end2/@aggregation = 'composite')">
<f:message>generated.comment</f:message>  					    						  					    						
  					    							Select${$class2/@name}Panel select${$class2/@name}Panel = new Select${$class2/@name}Panel("${$class2/@name}",
													Read${$class/@name}Panel.instance().getEntity().get${$class2/@name}());
  					  		 			</c:if>		
  					  		 			</c:if>	
  					  		 			</c:if>	
  					  		 			</c:if> 
  					  		 		</c:iterate>
  							  	</c:if> 
  					 	  </c:iterate> 					 	 				 	  
					</c:if> 											
		</c:iterate>
	</c:iterate>
</c:iterate>
<f:message>generated.comment</f:message>
	public Update${$class/@name}Panel() {
		initUpdateComposite(${$class/@name}.class.getName(), ${camelCase($projectName)}Welcome.constants);
	}
<f:message>generated.comment</f:message>
	@Override
	public ${$class/@name} populateEntityOnRender() {
		entity = Read${$class/@name}Panel.instance().getEntity();
				<%-- process parent class level 2 attributes--%>
			<c:if test="not($class/@name = $parentClass2/@name)">
			<c:iterate select="$parentClass2/Classifier.feature/Attribute" var="attribute">
				<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
				 <c:when test="${'$StringID'}" > setField("${$attribute/@name}",entity.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$IntegerID'}" >  setField("${$attribute/@name}",entity.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$DateID'}" >  setField("${$attribute/@name}",entity.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$BooleanID'}" >  setField("${$attribute/@name}",entity.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$LongID'}" >  setField("${$attribute/@name}",entity.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$FloatID'}" >  setField("${$attribute/@name}",entity.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$CurrencyID'}" >  setField("${$attribute/@name}",entity.get${ uppercaseFirst($attribute/@name)}(),false); 
				 </c:when>				 
				 <c:when test="${'$ImageID'}" >  setImageField("${$attribute/@name}",entity.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$RichTextID'}" >  setRichTextField("${$attribute/@name}",entity.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>					 				 
					 <c:otherwise>
					 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
					 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
								setEnumFeild("${$attribute/@name}", entity.get${ uppercaseFirst($attribute/@name)}().toString());
					 			</c:if>
					 	</c:iterate>					 						
		 			</c:otherwise>
		 		</c:choose>
			</c:iterate>
			</c:if>
			<%-- process parent class level 1 attributes--%>
			<c:if test="not($class/@name = $parentClass1/@name)">
			<c:iterate select="$parentClass1/Classifier.feature/Attribute" var="attribute">
				<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
				 <c:when test="${'$StringID'}" > setField("${$attribute/@name}",entity.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$IntegerID'}" >  setField("${$attribute/@name}",entity.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$DateID'}" >  setField("${$attribute/@name}",entity.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$BooleanID'}" >  setField("${$attribute/@name}",entity.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$LongID'}" >  setField("${$attribute/@name}",entity.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$FloatID'}" >  setField("${$attribute/@name}",entity.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$CurrencyID'}" >  setField("${$attribute/@name}",entity.get${ uppercaseFirst($attribute/@name)}(),false); 
				 </c:when>					 
				 <c:when test="${'$ImageID'}" >  setImageField("${$attribute/@name}",entity.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>	
				 <c:when test="${'$RichTextID'}" >  setRichTextField("${$attribute/@name}",entity.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>					 			 
					 <c:otherwise>
					 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
					 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
								setEnumFeild("${$attribute/@name}", entity.get${ uppercaseFirst($attribute/@name)}().toString());						
					 			</c:if>
					 	</c:iterate>					 						
		 			</c:otherwise>
		 		</c:choose>
			</c:iterate>
			</c:if>
			<%-- process parent class level 0 attributes--%>
			<c:iterate select="$class/Classifier.feature/Attribute" var="attribute">
				<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
				 <c:when test="${'$StringID'}" > setField("${$attribute/@name}",entity.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$IntegerID'}" >  setField("${$attribute/@name}",entity.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$DateID'}" >  setField("${$attribute/@name}",entity.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$BooleanID'}" >  setField("${$attribute/@name}",entity.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$LongID'}" >  setField("${$attribute/@name}",entity.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$FloatID'}" >  setField("${$attribute/@name}",entity.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$CurrencyID'}" >  setField("${$attribute/@name}",entity.get${ uppercaseFirst($attribute/@name)}(),false); 
				 </c:when>					 
				 <c:when test="${'$ImageID'}" >  setImageField("${$attribute/@name}",entity.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>	
				 <c:when test="${'$RichTextID'}" >  setRichTextField("${$attribute/@name}",entity.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>					 			 
					 <c:otherwise>
					 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
					 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
								setEnumFeild("${$attribute/@name}", entity.get${ uppercaseFirst($attribute/@name)}().toString());						
					 			</c:if>
					 	</c:iterate>												
		 			</c:otherwise>					 
		 		</c:choose>
			</c:iterate>
		//no need to render dropdowns		
			return entity;
		}
<f:message>generated.comment</f:message>		
	@Override
	public ${$class/@name} populateEntityOnUpdate(){
	<%-- process parent class level 2 attributes--%>
	<c:if test="not($class/@name = $parentClass2/@name)">
	<c:iterate select="$parentClass2/Classifier.feature/Attribute" var="attribute">
			<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
			 <c:when test="${'$StringID'}" > entity.set${ uppercaseFirst($attribute/@name)}(getStringField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$IntegerID'}" > entity.set${ uppercaseFirst($attribute/@name)}(getIntegerField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$DateID'}" > entity.set${ uppercaseFirst($attribute/@name)}(getDateField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$BooleanID'}" >entity.set${ uppercaseFirst($attribute/@name)}(getBooleanField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$LongID'}" > entity.set${ uppercaseFirst($attribute/@name)}(getLongField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$FloatID'}" > entity.set${ uppercaseFirst($attribute/@name)}(getFloatField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$ImageID'}" > entity.set${ uppercaseFirst($attribute/@name)}(getImageField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$RichTextID'}" > entity.set${ uppercaseFirst($attribute/@name)}(getRichTextField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$CurrencyID'}" > entity.set${ uppercaseFirst($attribute/@name)}(getCurrencyField("${$attribute/@name}")); 
			 </c:when>				 			 			 
				 <c:otherwise>
					 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
					 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
								entity.set${ uppercaseFirst($attribute/@name)}(${ uppercaseFirst($enumeration/@name)}.valueOf(getEnumField("${$attribute/@name}")));
					 			</c:if>
					 	</c:iterate>				 
	 			</c:otherwise>
	 		</c:choose>
		</c:iterate>
	</c:if>
	<%-- process parent class level 1 attributes--%>
	<c:if test="not($class/@name = $parentClass1/@name)">
	<c:iterate select="$parentClass1/Classifier.feature/Attribute" var="attribute">
			<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
			 <c:when test="${'$StringID'}" > entity.set${ uppercaseFirst($attribute/@name)}(getStringField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$IntegerID'}" > entity.set${ uppercaseFirst($attribute/@name)}(getIntegerField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$DateID'}" > entity.set${ uppercaseFirst($attribute/@name)}(getDateField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$BooleanID'}" >entity.set${ uppercaseFirst($attribute/@name)}(getBooleanField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$LongID'}" > entity.set${ uppercaseFirst($attribute/@name)}(getLongField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$FloatID'}" > entity.set${ uppercaseFirst($attribute/@name)}(getFloatField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$ImageID'}" > entity.set${ uppercaseFirst($attribute/@name)}(getImageField("${$attribute/@name}")); 
			 </c:when>	
			 <c:when test="${'$RichTextID'}" > entity.set${ uppercaseFirst($attribute/@name)}(getRichTextField("${$attribute/@name}")); 
			 </c:when>	
			 <c:when test="${'$CurrencyID'}" > entity.set${ uppercaseFirst($attribute/@name)}(getCurrencyField("${$attribute/@name}")); 
			 </c:when>			 		 		 
				 <c:otherwise>
					 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
					 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
								entity.set${ uppercaseFirst($attribute/@name)}(${ uppercaseFirst($enumeration/@name)}.valueOf(getEnumField("${$attribute/@name}")));
					 			</c:if>
					 	</c:iterate>				 
	 			</c:otherwise>
	 		</c:choose>
		</c:iterate>
	</c:if>
	<%-- process base class attributes--%>
	<c:iterate select="$class/Classifier.feature/Attribute" var="attribute">
			<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
			 <c:when test="${'$StringID'}" > entity.set${ uppercaseFirst($attribute/@name)}(getStringField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$IntegerID'}" > entity.set${ uppercaseFirst($attribute/@name)}(getIntegerField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$DateID'}" > entity.set${ uppercaseFirst($attribute/@name)}(getDateField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$BooleanID'}" >entity.set${ uppercaseFirst($attribute/@name)}(getBooleanField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$LongID'}" > entity.set${ uppercaseFirst($attribute/@name)}(getLongField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$FloatID'}" > entity.set${ uppercaseFirst($attribute/@name)}(getFloatField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$ImageID'}" > entity.set${ uppercaseFirst($attribute/@name)}(getImageField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$RichTextID'}" > entity.set${ uppercaseFirst($attribute/@name)}(getRichTextField("${$attribute/@name}")); 
			 </c:when>	
			 <c:when test="${'$CurrencyID'}" > entity.set${ uppercaseFirst($attribute/@name)}(getCurrencyField("${$attribute/@name}")); 
			 </c:when>			 		 			 
				 <c:otherwise>
					 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
					 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
								entity.set${ uppercaseFirst($attribute/@name)}(${ uppercaseFirst($enumeration/@name)}.valueOf(getEnumField("${$attribute/@name}")));
					 			</c:if>
					 	</c:iterate>				 
	 			</c:otherwise>
	 		</c:choose>
		</c:iterate>
		
		<%-- process dropdowns one tone and many to one --%>
			<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
				<c:iterate select="$association/Association.connection" var="association_connection">
					<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
						<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
					<%-- check is the association is corresponding to the class  --%>
								<c:if test="$association_connection_end_classID = $classID"> 
			  					   	<%-- iterate over the iterations ends  --%>
			  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
			  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
			  					  	 	<%-- get the end secondary end with other class  --%>
			  					  		 	<c:if test="not($association_connection_end/@xmi.id = $association_connection_end2/@xmi.id)"> 
			  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
			  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
			  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 			  		 			
			  					  		 			<%-- This processes the JPA realations @OneToMany, @ManyToMany, @OneToOne etc--%>
			  					  		 			<%-- check target is one side--%>
			  					  		 			<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 1">
			  					    						<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = 1">
  					    						<%--process only non composites --%>
  					    						<c:if test="not($association_connection_end2/@aggregation = 'composite')">			  					    						
			  					    							entity.set${uppercaseFirst($class2/@name)}(select${$class2/@name}Panel.getEntity());
			  					  		 			</c:if>		
			  					  		 			</c:if>	
			  					  		 			</c:if>	
			  					  		 			</c:if> 
			  					  		 		</c:iterate>
			  							  	</c:if> 
			  					 	  </c:iterate> 					 	 				 	  
								</c:if> 											
					</c:iterate>
				</c:iterate>
			</c:iterate>
		return entity;	
	}
		
<f:message>generated.comment</f:message>
	@Override
	public void updateButtonClicked() {
		${$packageName}.${lower-case($class/@name)}.${$class/@name}Service.${$class/@name}ServiceAsync.instance().update(entity,
				new ALAsyncCallback<${$class/@name}>() {
					public void onResponse(${$class/@name} arg0) {
						new ResponseStatusWidget().show("updated");
					}
				});
	}
<f:message>generated.comment</f:message>
	@Override
	protected void addListeners() {
		// TODO Auto-generated method stub

	}
<f:message>generated.comment</f:message>
	@Override
	protected void addWidgetsBeforeCaptionPanel() {
		// TODO Auto-generated method stub

	}
<f:message>generated.comment</f:message>
	@Override
	protected void addWidgets() {
		<%-- process parent class level 2 attributes--%>
	<c:if test="not($class/@name = $parentClass2/@name)">
				<c:iterate select="$parentClass2/Classifier.feature/Attribute" var="attribute">
				<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
				 <c:when test="${'$StringID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.STRING_FIELD); 
				 </c:when>
				 <c:when test="${'$IntegerID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.INTEGER_FIELD); 
				 </c:when>
				 <c:when test="${'$DateID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.DATE_FIELD);  
				 </c:when>
				 <c:when test="${'$BooleanID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.BOOLEAN_FIELD); 
				 </c:when>
				 <c:when test="${'$LongID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.LONG_FIELD); 
				 </c:when>
				 <c:when test="${'$FloatID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.FLOAT_FIELD); 
				 </c:when>
				 <c:when test="${'$ImageID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.IMAGE_FIELD); 
				 </c:when>
				 <c:when test="${'$RichTextID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.RICH_TEXT_AREA); 
				 </c:when>
				 <c:when test="${'$CurrencyID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.CURRENCY_FIELD); 
				 </c:when>				 				 					 				 
					 <c:otherwise>
					 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
					 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
								addEnumField("${$attribute/@name}", false, ${$attribute/@isRequired}, "${$attribute/@name}", ${$class/@name}.class.getName());
					 			</c:if>
					 	</c:iterate>					 
		 			</c:otherwise>
		 		</c:choose>
			</c:iterate>
	</c:if>
	<%-- process parent class level 1 attributes--%>
	<c:if test="not($class/@name = $parentClass1/@name)">
				<c:iterate select="$parentClass1/Classifier.feature/Attribute" var="attribute">
				<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
				 <c:when test="${'$StringID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.STRING_FIELD); 
				 </c:when>
				 <c:when test="${'$IntegerID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.INTEGER_FIELD); 
				 </c:when>
				 <c:when test="${'$DateID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.DATE_FIELD);  
				 </c:when>
				 <c:when test="${'$BooleanID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.BOOLEAN_FIELD); 
				 </c:when>
				 <c:when test="${'$LongID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.LONG_FIELD); 
				 </c:when>
				 <c:when test="${'$FloatID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.FLOAT_FIELD); 
				 </c:when>
				 <c:when test="${'$ImageID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.IMAGE_FIELD); 
				 </c:when>	
				 <c:when test="${'$RichTextID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.RICH_TEXT_AREA); 
				 </c:when>
				 <c:when test="${'$CurrencyID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.CURRENCY_FIELD); 
				 </c:when>				 				 				 
					 <c:otherwise>
					 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
					 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
								addEnumField("${$attribute/@name}", false, ${$attribute/@isRequired}, "${$attribute/@name}", ${$class/@name}.class.getName());
					 			</c:if>
					 	</c:iterate>					 
		 			</c:otherwise>
		 		</c:choose>
			</c:iterate>
	</c:if>
	<%-- process base class attributes --%>
			<c:iterate select="$class/Classifier.feature/Attribute" var="attribute">
				<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
				 <c:when test="${'$StringID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.STRING_FIELD); 
				 </c:when>
				 <c:when test="${'$IntegerID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.INTEGER_FIELD); 
				 </c:when>
				 <c:when test="${'$DateID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.DATE_FIELD);  
				 </c:when>
				 <c:when test="${'$BooleanID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.BOOLEAN_FIELD); 
				 </c:when>
				 <c:when test="${'$LongID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.LONG_FIELD); 
				 </c:when>
				 <c:when test="${'$FloatID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.FLOAT_FIELD); 
				 </c:when>
				 <c:when test="${'$ImageID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.IMAGE_FIELD); 
				 </c:when>	
				 <c:when test="${'$RichTextID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.RICH_TEXT_AREA); 
				 </c:when>	
				 <c:when test="${'$CurrencyID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.CURRENCY_FIELD); 
				 </c:when>				 			 				 
					 <c:otherwise>
					 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
					 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
								addEnumField("${$attribute/@name}", false, ${$attribute/@isRequired}, "${$attribute/@name}", ${$class/@name}.class.getName());
					 			</c:if>
					 	</c:iterate>					 
		 			</c:otherwise>
		 		</c:choose>
			</c:iterate>
			<%-- process dropdowns one to one and many to one unidirectional--%>
			<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
				<c:iterate select="$association/Association.connection" var="association_connection">
					<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
						<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
					<%-- check is the association is corresponding to the class  --%>
								<c:if test="$association_connection_end_classID = $classID"> 
			  					   	<%-- iterate over the iterations ends  --%>
			  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
			  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
			  					  	 	<%-- get the end secondary end with other class  --%>
			  					  		 	<c:if test="not($association_connection_end/@xmi.id = $association_connection_end2/@xmi.id)"> 
			  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
			  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
			  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 			  		 			
			  					  		 			<%-- This processes the JPA realations @OneToMany, @ManyToMany, @OneToOne etc--%>
			  					  		 			<%-- check target is one side--%>
			  					  		 			<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 1">
			  					    						<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = 1">
  					    						<%--process only non composites --%>
  					    						<c:if test="not($association_connection_end2/@aggregation = 'composite')">			  					    									  					    							
			  					    						addDropDown(select${$class2/@name}Panel);
			  					  		 			</c:if>		
			  					  		 			</c:if>	
			  					  		 			</c:if>	
			  					  		 			</c:if> 
			  					  		 		</c:iterate>
			  							  	</c:if> 
			  					 	  </c:iterate> 					 	 				 	  
								</c:if> 											
					</c:iterate>
				</c:iterate>
			</c:iterate>	
	}
<f:message>generated.comment</f:message>
	@Override
	protected void configure() {

	}
}
</f:bundle>
</java:format>