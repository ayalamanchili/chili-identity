<java:merge/>
<java:format>
<f:bundle basename="templates/resources/messages">
<f:message>copyright</f:message>
package ${$packageName}.${lower-case($class/@name)};

import ${$groupID}.entity.${lower-case($package/@name)}.${$class/@name};
import ${$webPackage}${camelCase($projectName)}Welcome;


import info.yalamanchili.gwt.beans.TableObj;
import info.yalamanchili.gwt.callback.ALAsyncCallback;
import info.yalamanchili.gwt.composite.ReadAllComposite;
import info.yalamanchili.gwt.utils.Utils;

import java.util.List;

import com.google.gwt.user.client.ui.DockPanel;
<f:message>generated.class.comment</f:message>
public class ReadAll${$class/@name}sPanel extends ReadAllComposite<${$class/@name}> {
<f:message>generated.comment</f:message>
	private  ${$class/@name}TableType tableType;
<f:message>generated.comment</f:message>
	public enum ${$class/@name}TableType {
		READALL, READALL_SEARCH
	}
<f:message>generated.comment</f:message>
	public ReadAll${$class/@name}sPanel(List<${$class/@name}> entities) {
		initTable(new ${$class/@name}(), entities, ${camelCase($projectName)}Welcome.constants);
	}
<f:message>generated.comment</f:message>	
	public ReadAll${$class/@name}sPanel(${$class/@name}TableType tableType) {
		this.tableType = tableType;
		initTable(new ${$class/@name}(),
				${camelCase($projectName)}Welcome.constants);
	}
<f:message>generated.comment</f:message>
	@Override
	public void createTableHeader() {
		table.setText(0, 0, getKeyValue("Table_Action"));	
		<%
		int x = 1;
		%>
<%-- process parent class level 2 attributes--%>
<c:if test="not($class/@name = $parentClass2/@name)">
<c:iterate select="$parentClass2/Classifier.feature/Attribute" var="attribute">
			table.setText(0, <%= x++ %>, getClassValue("${$attribute/@name}"));
</c:iterate>
</c:if>	
<%-- process parent class level 1 attributes--%>
<c:if test="not($class/@name = $parentClass1/@name)">
<c:iterate select="$parentClass1/Classifier.feature/Attribute" var="attribute">
			table.setText(0, <%= x++ %>, getClassValue("${$attribute/@name}"));
</c:iterate>
</c:if>		
<%-- process base class attributes--%>
<c:iterate select="$class/Classifier.feature/Attribute" var="attribute">
			table.setText(0, <%= x++ %>, getClassValue("${$attribute/@name}"));
</c:iterate>
			<%-- process dropdowns one to one and many to one unidirectional--%>
			<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
				<c:iterate select="$association/Association.connection" var="association_connection">
					<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
						<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
					<%-- check is the association is corresponding to the class  --%>
								<c:if test="$association_connection_end_classID = $classID"> 
			  					   	<%-- iterate over the iterations ends  --%>
			  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
			  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
			  					  	 	<%-- get the end secondary end with other class  --%>
			  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
			  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
			  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
			  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 			  		 			
			  					  		 			<%-- This processes the JPA realations @OneToMany, @ManyToMany, @OneToOne etc--%>
			  					  		 			<%-- check target is one side--%>
			  					  		 			<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 1">
			  					    						<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = 1">
			  					    						<%--check for Many to one unidirectional--%>
			  					    						<c:if test="$association_connection_end/@isNavigable = 'false'">
			  					    								table.setText(0, <%= x++ %>, "${$class2/@name}");
			  					    						</c:if>	
			  					    						<%--check for one to one --%>	
			  					    						<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 1">
			  					    						<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = 1">
			  					    							table.setText(0, <%= x++ %>, "${$class2/@name}");
			  					  		 					</c:if>	
			  					  		 					</c:if>	
			  					  		 			</c:if>	
			  					  		 			</c:if>	
			  					  		 			</c:if> 
			  					  		 		</c:iterate>
			  							  	</c:if> 
			  					 	  </c:iterate> 					 	 				 	  
								</c:if> 											
					</c:iterate>
				</c:iterate>
			</c:iterate>
	}
<f:message>generated.comment</f:message>
	@Override
	public void fillData(List<${$class/@name}> entities) {
		int i = 1;
		for (${$class/@name} entity : entities) {
			createViewIcon(i, entity.getId());
			<%
			int y = 1;
			%>
<c:iterate select="$class/Classifier.feature/Attribute" var="attribute">
			 <c:choose select="$attribute/StructuralFeature.type/DataType/@href" > 
			 	<c:when test="${'$DateID'}" >
			  		table.setText(i, <%= y++ %>, Utils.getShortDate(entity.get${uppercaseFirst($attribute/@name)}())); 
			  	</c:when>
			 	<c:otherwise> 
					table.setText(i, <%= y++ %>, Utils.entityToString(entity.get${uppercaseFirst($attribute/@name)}()));
	 			</c:otherwise>
			</c:choose> 
</c:iterate>
			<%-- process dropdowns one to one and many to one unidirectional--%>
			<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
				<c:iterate select="$association/Association.connection" var="association_connection">
					<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
						<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
					<%-- check is the association is corresponding to the class  --%>
								<c:if test="$association_connection_end_classID = $classID"> 
			  					   	<%-- iterate over the iterations ends  --%>
			  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
			  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
			  					  	 	<%-- get the end secondary end with other class  --%>
			  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
			  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
			  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
			  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 			  		 			
			  					  		 			<%-- This processes the JPA realations @OneToMany, @ManyToMany, @OneToOne etc--%>
			  					  		 			<%-- check target is one side--%>
			  					  		 			<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 1">
			  					    						<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = 1">
			  					    						<%--check for Many to one unidirectional--%>
			  					    						<c:if test="$association_connection_end/@isNavigable = 'false'">
			  					    								table.setText(i, <%= y++ %>, Utils.entityToString(entity.get${$class2/@name}()));
			  					    						</c:if>	
			  					    						<%--check for one to one --%>	
			  					    						<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 1">
			  					    						<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = 1">
			  					    							table.setText(i, <%= y++ %>, Utils.entityToString(entity.get${$class2/@name}()));
			  					  		 					</c:if>	
			  					  		 					</c:if>	
			  					  		 			</c:if>	
			  					  		 			</c:if>	
			  					  		 			</c:if> 
			  					  		 		</c:iterate>
			  							  	</c:if> 
			  					 	  </c:iterate> 					 	 				 	  
								</c:if> 											
					</c:iterate>
				</c:iterate>
			</c:iterate>
	
			i++;
		}

	}
<f:message>generated.comment</f:message>
	@Override
	public void preFetchTable(int start) {
		if (${$class/@name}TableType.READALL.equals(tableType)) {
			${$packageName}.${lower-case($class/@name)}.${$class/@name}Service.${$class/@name}ServiceAsync.instance().getTableObj(start, new ALAsyncCallback<TableObj<${$class/@name}>>() {

						@Override
						public void onResponse(TableObj<${$class/@name}> tableObj) {
							postFetchTable(tableObj);

						}

					});
		}
		if (${$class/@name}TableType.READALL_SEARCH.equals(tableType)) {
			${$packageName}.${lower-case($class/@name)}.${$class/@name}Service.${$class/@name}ServiceAsync.instance().getEntities(
					${$class/@name}SearchPanelGeneric.instance().getEntity(),
					new ALAsyncCallback<List<${$class/@name}>>() {

						@Override
						public void onResponse(List<${$class/@name}> arg0) {
							postFetchTable(arg0);

						}

					});
		}

	}
<f:message>generated.comment</f:message>
	@Override
	public void viewClicked(int row, int col) {
		${camelCase($projectName)}Welcome.instance().getEntityPanel().clear();
		${camelCase($projectName)}Welcome.instance().getEntityPanel().add(
				new Read${$class/@name}Panely(getEntityId(row)));

	}

}
</f:bundle>
</java:format>
