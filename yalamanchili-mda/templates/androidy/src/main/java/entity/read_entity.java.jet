<c:setVariable select="$class/@xmi.id" var="classID"/>
<java:format>
package ${$groupID}.android.${$package/@name}.${lower-case($class/@name)};
import ${$groupID}.android.${camelCase($projectName)}Welcome;
import info.yalamanchili.android.crud.AbstractReadActivity;
import info.yalamanchili.android.views.Field;
import android.content.Intent;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import ${$groupID}.R;
<%--process level 1 generizations --%>
<c:if test="not($class/@name = $parentClass1/@name)">
  			<c:setVariable select="$parentClass1/@xmi.id" var="classID"/>		
  							<%-- process the assocations for level 1 class --%>
							<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
								<c:iterate select="$association/Association.connection" var="association_connection">
									<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
										<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
											<%-- check is the association is corresponding to the class  --%>
												<c:if test="$association_connection_end_classID = $classID">
							  					   	<%-- iterate over the iterations ends  --%>
							  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
							  					  	 <%-- process only non composits or non aggregations and --%>
  					  								<c:if test="$association_connection_end2/@aggregation = 'none'">
  					  								<c:if test="not($association_connection_end/@aggregation = 'none')">
							  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
							  					  	 	<%-- get the end secondary end with other class  --%>
							  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
										  					 <%-- check to see if this is a navigable relation--%>
										  					 <c:if test="$association_connection_end/@isNavigable = 'true'">										  					  		 	 
							  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
							  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
							  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
import ${$groupID}.android.${lower-case($package/@name)}.${lower-case($class2/@name)}.ReadAll${$class2/@name}s;
							  					  		 			</c:if> 
							  					  		 		</c:iterate>
							  							  	</c:if> 
							  							  	</c:if>
							  							  	</c:if>  
							  							  	</c:if>
							  					 	  </c:iterate> 
							  					 						 	 				 	  
												</c:if> 											
									</c:iterate>
								</c:iterate>
							</c:iterate> 
</c:if>
<%--process level 2 generizations --%>
<c:if test="not($class/@name = $parentClass2/@name)">
  			<c:setVariable select="$parentClass2/@xmi.id" var="classID"/>		
  							<%-- process the assocations for level 1 class --%>
							<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
								<c:iterate select="$association/Association.connection" var="association_connection">
									<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
										<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
											<%-- check is the association is corresponding to the class  --%>
												<c:if test="$association_connection_end_classID = $classID">
							  					   	<%-- iterate over the iterations ends  --%>
							  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
							  					  	 <%-- process only non composits or non aggregations and --%>
  					  								<c:if test="$association_connection_end2/@aggregation = 'none'">
  					  								<c:if test="not($association_connection_end/@aggregation = 'none')">
							  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
							  					  	 	<%-- get the end secondary end with other class  --%>
							  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
										  					 <%-- check to see if this is a navigable relation--%>
										  					 <c:if test="$association_connection_end/@isNavigable = 'true'">										  					  		 	 
							  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
							  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
							  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
import ${$groupID}.android.${lower-case($package/@name)}.${lower-case($class2/@name)}.ReadAll${$class2/@name}s;
							  					  		 			</c:if> 
							  					  		 		</c:iterate>
							  							  	</c:if> 
							  							  	</c:if>
							  							  	</c:if> 
							  							  	</c:if>   
							  					 	  </c:iterate> 
							  					 						 	 				 	  
												</c:if> 											
									</c:iterate>
								</c:iterate>
							</c:iterate> 
</c:if> 

<c:setVariable select="$class/@xmi.id" var="classID"/>
<%--process 0 level class relations --%>
<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID">
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <%-- process only non composits or non aggregations and --%>
  					  	 <c:if test="$association_connection_end2/@aggregation = 'none'">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
  					  		 	<%-- check to see if this is a navigable relation--%>
  					  		 	<c:if test="$association_connection_end2/@isNavigable = 'true'">
  					  		 	<%-- process many on target--%>
								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
  								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
import ${$groupID}.android.${lower-case($package/@name)}.${lower-case($class2/@name)}.ReadAll${$class2/@name}s;
  					  		 			</c:if> 
  					  		 		</c:iterate>
  					  		 	</c:if>	
  							  	</c:if> 
  							  	</c:if>
  							  	</c:if> 
  							  	</c:if>	
  					 	  </c:iterate> 					 	 				 	  
					</c:if> 										
		</c:iterate>
	</c:iterate>
</c:iterate>

public class Read${$class/@name} extends AbstractReadActivity {

	@Override
	protected int contentViewId() {
		return R.layout.${lower-case($class/@name)}_read;
	}

	@Override
	protected int updateButtonId() {
		return R.id.read_update;
	}

	@Override
	protected int doneButtonId() {
		return R.id.read_update;
	}

	@Override
	protected int deleteButtonId() {
		return R.id.read_delete;
	}

	@Override
	protected void assignFields() {
	<%-- process parent class level 2 attributes--%>
	<c:if test="not($class/@name = $parentClass2/@name)">
				<c:iterate select="$parentClass2/Classifier.feature/Attribute" var="attribute">
				<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
				 <c:when test="${'$StringID'}" > 
				 addAndAssignField(R.id.${lower-case($class/@name)}_read_${lower-case($attribute/@name)}, "${$attribute/@name}","${upper-case($attribute/@name)}", Field.STRING_FIELD);
				 </c:when>
				 <c:when test="${'$IntegerID'}" > 
				 addAndAssignField(R.id.${lower-case($class/@name)}_read_${lower-case($attribute/@name)}, "${$attribute/@name}","${upper-case($attribute/@name)}", Field.NUMERIC_FIELD);
				 </c:when>
				 <c:when test="${'$DateID'}" > 
				 addAndAssignField(R.id.${lower-case($class/@name)}_read_${lower-case($attribute/@name)}, "${$attribute/@name}","${upper-case($attribute/@name)}", Field.DATE_FIELD);
				 </c:when>
				 <c:when test="${'$BooleanID'}" >  
				 addAndAssignField(R.id.${lower-case($class/@name)}_read_${lower-case($attribute/@name)}, "${$attribute/@name}","${upper-case($attribute/@name)}", Field.BOOLEAN_FIELD);
				 </c:when>
				 <c:when test="${'$LongID'}" > 
				 addAndAssignField(R.id.${lower-case($class/@name)}_read_${lower-case($attribute/@name)}, "${$attribute/@name}","${upper-case($attribute/@name)}", Field.NUMERIC_FIELD);
				 </c:when>
				 <c:when test="${'$FloatID'}" > 
				 addAndAssignField(R.id.${lower-case($class/@name)}_read_${lower-case($attribute/@name)}, "${$attribute/@name}","${upper-case($attribute/@name)}", Field.DECIMAL_FIELD);
				 </c:when>
				 <c:when test="${'$CurrencyID'}" >  
				 addAndAssignField(R.id.${lower-case($class/@name)}_read_${lower-case($attribute/@name)}, "${$attribute/@name}","${upper-case($attribute/@name)}", Field.CURRENCY_FIELD);
				 </c:when>				 
		 		</c:choose>
				</c:iterate>
	</c:if>
	<%-- process parent class level 1 attributes--%>
	<c:if test="not($class/@name = $parentClass1/@name)">
				<c:iterate select="$parentClass1/Classifier.feature/Attribute" var="attribute">
				<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
				 <c:when test="${'$StringID'}" > 
				 addAndAssignField(R.id.${lower-case($class/@name)}_read_${lower-case($attribute/@name)}, "${$attribute/@name}","${upper-case($attribute/@name)}", Field.STRING_FIELD);
				 </c:when>
				 <c:when test="${'$IntegerID'}" > 
				 addAndAssignField(R.id.${lower-case($class/@name)}_read_${lower-case($attribute/@name)}, "${$attribute/@name}","${upper-case($attribute/@name)}", Field.NUMERIC_FIELD);
				 </c:when>
				 <c:when test="${'$DateID'}" > 
				 addAndAssignField(R.id.${lower-case($class/@name)}_read_${lower-case($attribute/@name)}, "${$attribute/@name}","${upper-case($attribute/@name)}", Field.DATE_FIELD);
				 </c:when>
				 <c:when test="${'$BooleanID'}" >  
				 addAndAssignField(R.id.${lower-case($class/@name)}_read_${lower-case($attribute/@name)}, "${$attribute/@name}","${upper-case($attribute/@name)}", Field.BOOLEAN_FIELD);
				 </c:when>
				 <c:when test="${'$LongID'}" > 
				 addAndAssignField(R.id.${lower-case($class/@name)}_read_${lower-case($attribute/@name)}, "${$attribute/@name}","${upper-case($attribute/@name)}", Field.NUMERIC_FIELD);
				 </c:when>
				 <c:when test="${'$FloatID'}" > 
				 addAndAssignField(R.id.${lower-case($class/@name)}_read_${lower-case($attribute/@name)}, "${$attribute/@name}","${upper-case($attribute/@name)}", Field.DECIMAL_FIELD);
				 </c:when>
				 <c:when test="${'$CurrencyID'}" >  
				 addAndAssignField(R.id.${lower-case($class/@name)}_read_${lower-case($attribute/@name)}, "${$attribute/@name}","${upper-case($attribute/@name)}", Field.CURRENCY_FIELD);
				 </c:when>				 
		 		</c:choose>
				</c:iterate>
	</c:if>		
	<%-- process parent class level 0 attributes--%>	
				<c:iterate select="$class/Classifier.feature/Attribute" var="attribute">
				<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
				 <c:when test="${'$StringID'}" > 
				 addAndAssignField(R.id.${lower-case($class/@name)}_read_${lower-case($attribute/@name)}, "${$attribute/@name}","${upper-case($attribute/@name)}", Field.STRING_FIELD);
				 </c:when>
				 <c:when test="${'$IntegerID'}" > 
				 addAndAssignField(R.id.${lower-case($class/@name)}_read_${lower-case($attribute/@name)}, "${$attribute/@name}","${upper-case($attribute/@name)}", Field.NUMERIC_FIELD);
				 </c:when>
				 <c:when test="${'$DateID'}" > 
				 addAndAssignField(R.id.${lower-case($class/@name)}_read_${lower-case($attribute/@name)}, "${$attribute/@name}","${upper-case($attribute/@name)}", Field.DATE_FIELD);
				 </c:when>
				 <c:when test="${'$BooleanID'}" >  
				 addAndAssignField(R.id.${lower-case($class/@name)}_read_${lower-case($attribute/@name)}, "${$attribute/@name}","${upper-case($attribute/@name)}", Field.BOOLEAN_FIELD);
				 </c:when>
				 <c:when test="${'$LongID'}" > 
				 addAndAssignField(R.id.${lower-case($class/@name)}_read_${lower-case($attribute/@name)}, "${$attribute/@name}","${upper-case($attribute/@name)}", Field.NUMERIC_FIELD);
				 </c:when>
				 <c:when test="${'$FloatID'}" > 
				 addAndAssignField(R.id.${lower-case($class/@name)}_read_${lower-case($attribute/@name)}, "${$attribute/@name}","${upper-case($attribute/@name)}", Field.DECIMAL_FIELD);
				 </c:when>
				 <c:when test="${'$CurrencyID'}" >  
				 addAndAssignField(R.id.${lower-case($class/@name)}_read_${lower-case($attribute/@name)}, "${$attribute/@name}","${upper-case($attribute/@name)}", Field.CURRENCY_FIELD);
				 </c:when>				 
		 		</c:choose>
				</c:iterate>						
	}
	
	@Override
	protected int appTitleBarId() {
		return R.layout.automanage_title_bar;
	}

	@Override
	protected int appTitleBArTextViewId() {
		return R.id.automanage_title_text;
	}

	@Override
	protected String titleText() {
		return "Read ${$class/@name} Activity";
	}

	@Override
	protected String entityName() {
		return "${lower-case($class/@name)}";
	}

	@Override
	public Class<?> updateClass() {
		return Update${$class/@name}.class;
	}

	@Override
	public String getReadURL() {
		Long id = getIntent().getLongExtra("id", new Long(1));
		return ${camelCase($projectName)}Welcome.baseURL + "${lower-case($class/@name)}/read/" + id;
	}
		
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		MenuInflater inflater = getMenuInflater();
		inflater.inflate(R.menu.${lower-case($class/@name)}_menu, menu);
		return true;
	}
	
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
<%--process level 1 generizations --%>
<c:if test="not($class/@name = $parentClass1/@name)">
  			<c:setVariable select="$parentClass1/@xmi.id" var="classID"/>		
  							<%-- process the assocations for level 1 class --%>
							<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
								<c:iterate select="$association/Association.connection" var="association_connection">
									<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
										<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
											<%-- check is the association is corresponding to the class  --%>
												<c:if test="$association_connection_end_classID = $classID">
							  					   	<%-- iterate over the iterations ends  --%>
							  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
							  					  	 <%-- process only non composits or non aggregations and --%>
  					  								<c:if test="$association_connection_end2/@aggregation = 'none'">
  					  								<c:if test="not($association_connection_end/@aggregation = 'none')">
							  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
							  					  	 	<%-- get the end secondary end with other class  --%>
							  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
										  					 <%-- check to see if this is a navigable relation--%>
										  					 <c:if test="$association_connection_end/@isNavigable = 'true'">										  					  		 	 
							  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
							  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
							  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
																	case R.id.${lower-case($class/@name)}_${lower-case($class2/@name)}s_menu:
																				Intent ${lower-case($class2/@name)}sIntent = new Intent(this, ReadAll${$class2/@name}s.class);
																				${lower-case($class2/@name)}sIntent.putExtra("resource", getReadURL() + "/${lower-case($class2/@name)}s");
																				${lower-case($class2/@name)}sIntent.putExtra("parent",entity.toString());
																				startActivity(${lower-case($class2/@name)}sIntent);
																				break;
							  					  		 			</c:if> 
							  					  		 		</c:iterate>
							  							  	</c:if> 
							  							  	</c:if>
							  							  	</c:if>  
							  							  	</c:if>
							  					 	  </c:iterate> 
							  					 						 	 				 	  
												</c:if> 											
									</c:iterate>
								</c:iterate>
							</c:iterate> 
</c:if>
<%--process level 2 generizations --%>
<c:if test="not($class/@name = $parentClass2/@name)">
  			<c:setVariable select="$parentClass2/@xmi.id" var="classID"/>		
  							<%-- process the assocations for level 1 class --%>
							<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
								<c:iterate select="$association/Association.connection" var="association_connection">
									<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
										<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
											<%-- check is the association is corresponding to the class  --%>
												<c:if test="$association_connection_end_classID = $classID">
							  					   	<%-- iterate over the iterations ends  --%>
							  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
							  					  	 <%-- process only non composits or non aggregations and --%>
  					  								<c:if test="$association_connection_end2/@aggregation = 'none'">
  					  								<c:if test="not($association_connection_end/@aggregation = 'none')">
							  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
							  					  	 	<%-- get the end secondary end with other class  --%>
							  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
										  					 <%-- check to see if this is a navigable relation--%>
										  					 <c:if test="$association_connection_end/@isNavigable = 'true'">										  					  		 	 
							  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
							  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
							  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
																	case R.id.${lower-case($class/@name)}_${lower-case($class2/@name)}s_menu:
																				Intent ${lower-case($class2/@name)}sIntent = new Intent(this, ReadAll${$class2/@name}s.class);
																				${lower-case($class2/@name)}sIntent.putExtra("resource", getReadURL() + "/${lower-case($class2/@name)}s");
																				${lower-case($class2/@name)}sIntent.putExtra("parent",entity.toString());
																				startActivity(${lower-case($class2/@name)}sIntent);
																				break;
							  					  		 			</c:if> 
							  					  		 		</c:iterate>
							  							  	</c:if> 
							  							  	</c:if>
							  							  	</c:if> 
							  							  	</c:if>   
							  					 	  </c:iterate> 
							  					 						 	 				 	  
												</c:if> 											
									</c:iterate>
								</c:iterate>
							</c:iterate> 
</c:if> 

<c:setVariable select="$class/@xmi.id" var="classID"/>
<%--process 0 level class relations --%>
<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID">
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <%-- process only non composits or non aggregations and --%>
  					  	 <c:if test="$association_connection_end2/@aggregation = 'none'">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
  					  		 	<%-- check to see if this is a navigable relation--%>
  					  		 	<c:if test="$association_connection_end2/@isNavigable = 'true'">
  					  		 	<%-- process many on target--%>
								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
  								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
																	case R.id.${lower-case($class/@name)}_${lower-case($class2/@name)}s_menu:
																				Intent ${lower-case($class2/@name)}sIntent = new Intent(this, ReadAll${$class2/@name}s.class);
																				${lower-case($class2/@name)}sIntent.putExtra("resource", getReadURL() + "/${lower-case($class2/@name)}s");
																				${lower-case($class2/@name)}sIntent.putExtra("parent",entity.toString());
																				startActivity(${lower-case($class2/@name)}sIntent);
																				break;
  					  		 			</c:if> 
  					  		 		</c:iterate>
  					  		 	</c:if>	
  							  	</c:if> 
  							  	</c:if>
  							  	</c:if> 
  							  	</c:if>	
  					 	  </c:iterate> 					 	 				 	  
					</c:if> 										
		</c:iterate>
	</c:iterate>
</c:iterate>		
		}
		return true;
	}

}
</java:format>