
<java:format>
<f:bundle basename="templates/resources/messages">
<f:message>copyright</f:message>
package ${$groupID}.dao.${lower-case($package/@name)}.${lower-case($class/@name)};


import info.yalamanchili.requestfactory.GenericDao;
import info.yalamanchili.trace.Trace;

import ${$groupID}.entity.${lower-case($package/@name)}.${$class/@name};
import info.yalamanchili.trace.Trace;
import org.jboss.seam.annotations.AutoCreate;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.ejb.Stateless;
import info.yalamanchili.server.GWTServletUtils;
<c:if test="$enableHibernateSearch = 'true'">
import org.apache.lucene.util.Version;
import info.yalamanchili.commons.DataType;
import info.yalamanchili.commons.ReflectionUtils;
import info.yalamanchili.commons.SearchUtils;
import info.yalamanchili.gwt.beans.MultiSelectObj;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.hibernate.search.FullTextQuery;
</c:if>	
import org.jboss.seam.ScopeType;
import org.jboss.seam.annotations.In;
import org.jboss.seam.annotations.Name;

<f:message>generated.class.comment</f:message>
@AutoCreate
@Name("${lower-case($class/@name)}Daoy")
@Stateless
public class ${$class/@name}DAOImpl implements ${$class/@name}DAOLocal, ${$class/@name}DAORemote {

	@In(create = true)
	protected EntityManager em;

	public ${$class/@name} findById(Long id) {
		return em.find( ${$class/@name}.class, id);
	}

	public void save(${$class/@name} entity) {
		em.merge(entity);
	}
	
	@Override
	public void delete(long id) {
		em.remove(id);
	}

	@Override
	public List<${$class/@name}> query(int start, int limit) {
		String query = "from " + ${$class/@name}.class.getCanonicalName();
		Query getEntitites = em.createQuery(query);
		getEntitites.setFirstResult(start);
		// TODO externalize the max results value
		getEntitites.setMaxResults(limit);
		return getEntitites.getResultList();
	}

	@Override
	public List<${$class/@name}> search(String searchText) {
		org.apache.lucene.search.Query luceneQuery = SearchUtils
				.getLuceneQuery(searchText, "id", new StandardAnalyzer(
						Version.LUCENE_30), ReflectionUtils.getBeanProperties(
						${$class/@name}.class, DataType.STRING));
		FullTextQuery query = SearchUtils.getFullTextSession(em)
				.createFullTextQuery(luceneQuery, ${$class/@name}.class);
		return query.list();
	}

	@Override
	public List<${$class/@name}> search(${$class/@name} entity) {
		Query getEntitiesQuery = em.createQuery(GWTServletUtils
				.getSearchQueryString(entity));
		return getEntitiesQuery.getResultList();
	}

	@Override
	public Long size() {
		String query = "select count(entity) from "
				+ ${$class/@name}.class.getCanonicalName() + " entity";
		Query getEntitiesSize = em.createQuery(query);
		return (Long) getEntitiesSize.getSingleResult();
	}

	public List<String> getSuggestionsForName(String name, ${$class/@name} entity) {
		Query query = em.createQuery(GWTServletUtils
				.getSuggestionsQueryForName(name, entity));
		return query.getResultList();
	}

}
</f:bundle>
</java:format>