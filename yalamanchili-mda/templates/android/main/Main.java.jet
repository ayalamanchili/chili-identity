<java:format>
package ${$groupID}.android;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package" var="package">
			 <%-- iterate through class and add only non composite children and non parent--%>
			 <c:iterate select="$package/Namespace.ownedElement/Class" var="class">
    		 <%-- Flag varibles--%>
    		 <c:setVariable select="$class/@xmi.id" var="isComposite"/>
    		 <c:setVariable select="$class/@xmi.id" var="classID"/>
    		 <c:setVariable select="$class/@xmi.id" var="isParent"/>
    		 <c:if test="$class/@isAbstract = 'false'">
    		 <%-- process all associations to eliminate composite children--%>
					<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
						<c:iterate select="$association/Association.connection" var="association_connection">
							<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
								<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
							<%-- check is the association is corresponding to the class  --%>
										<c:if test="$association_connection_end_classID = $classID"> 
										
										
					  					   	<%-- iterate over the iterations ends  --%>
					  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
					  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
					  					  	 <c:if test="not($association_connection_end_classID2 = $classID)"> 
					  					  	 <%-- process only non compositions--%>
					  					  	 <c:if test="$association_connection_end2/@aggregation = 'composite'">
					  					  	 <%-- update flag variable--%>
					  					  	 <c:setVariable select="$class/@name" var="isComposite"/>
					  					  	 </c:if>
					  					 	  </c:if>	
					  					 	  </c:iterate>					 	 				 	  
										</c:if> 
																			
							</c:iterate>
						</c:iterate>
					</c:iterate>
			<%-- process all generizations to eliminate all parent classes--%>	
				<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Generalization" var="generalization">
					<c:if test="$generalization/Generalization.parent/Class/@xmi.idref = $classID">
					<%-- update flag variable--%>
					<c:setVariable select="$class/@name" var="isParent"/>
					</c:if>															
				</c:iterate>	
			 <%-- check for flag varibles and add menu item class--%>	    		 
    		 <c:if test="$isComposite = $class/@xmi.id">
    		 <c:if test="$isParent = $class/@xmi.id">
    		 	import ${$groupID}.android.${$package/@name}.${lower-case($class/@name)}.ReadAll${$class/@name}s;
			</c:if>
			</c:if>
			</c:if>
		</c:iterate> 
	</c:iterate>
	
import android.app.ListActivity;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.ListView;
import android.widget.SimpleAdapter;
import info.yalamanchili.android.http.HttpHelper;
import info.yalamanchili.android.http.AsyncHttpGet;
/**
 * HelloFlashlight is a sample application for the usage of the Maven Android Plugin.
 * The code is trivial and not the focus of this example and therefore not really documented.
 */
public class ${camelCase($projectName)}Main extends ListActivity {

	public static String baseURL = "http://10.0.2.2:8080/${lower-case($projectName)}-webapp/seam/resource/restv1/crud/";
	public static String manageURL = "http://10.0.2.2:8080/${lower-case($projectName)}-webapp/seam/resource/restv1/manage/";
	private SimpleAdapter notes;
	
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
      	notes = new SimpleAdapter(this, getData(), R.layout.list_item,
				new String[] { "text" }, new int[] { R.id.list_item_view });
		setListAdapter(notes);

	}
        
	@Override
	protected void onListItemClick(ListView l, View v, int position, long id) {
		Map map = (Map) l.getItemAtPosition(position);
		Intent intent = (Intent) map.get("intent");
		startActivity(intent);
	}


	protected ArrayList<HashMap<String, Object>> getData() {
		ArrayList<HashMap<String, Object>> list = new ArrayList<HashMap<String, Object>>();
		
	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package" var="package">
			 <%-- iterate through class and add only non composite children and non parent--%>
			 <c:iterate select="$package/Namespace.ownedElement/Class" var="class">
    		 <%-- Flag varibles--%>
    		 <c:setVariable select="$class/@xmi.id" var="isComposite"/>
    		 <c:setVariable select="$class/@xmi.id" var="classID"/>
    		 <c:setVariable select="$class/@xmi.id" var="isParent"/>
    		 <c:if test="$class/@isAbstract = 'false'">
    		 <%-- process all associations to eliminate composite children--%>
					<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
						<c:iterate select="$association/Association.connection" var="association_connection">
							<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
								<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
							<%-- check is the association is corresponding to the class  --%>
										<c:if test="$association_connection_end_classID = $classID"> 
										
										
					  					   	<%-- iterate over the iterations ends  --%>
					  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
					  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
					  					  	 <c:if test="not($association_connection_end_classID2 = $classID)"> 
					  					  	 <%-- process only non compositions--%>
					  					  	 <c:if test="$association_connection_end2/@aggregation = 'composite'">
					  					  	 <%-- update flag variable--%>
					  					  	 <c:setVariable select="$class/@name" var="isComposite"/>
					  					  	 </c:if>
					  					 	  </c:if>	
					  					 	  </c:iterate>					 	 				 	  
										</c:if> 
																			
							</c:iterate>
						</c:iterate>
					</c:iterate>
			<%-- process all generizations to eliminate all parent classes--%>	
				<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Generalization" var="generalization">
					<c:if test="$generalization/Generalization.parent/Class/@xmi.idref = $classID">
					<%-- update flag variable--%>
					<c:setVariable select="$class/@name" var="isParent"/>
					</c:if>															
				</c:iterate>	
			 <%-- check for flag varibles and add menu item class--%>	    		 
    		 <c:if test="$isComposite = $class/@xmi.id">
    		 <c:if test="$isParent = $class/@xmi.id">
    		 	HashMap<String, Object> ${lower-case($class/@name)}Maintainence = new HashMap<String, Object>();
				${lower-case($class/@name)}Maintainence.put("text", "${$class/@name} Maintainence");
				Intent ${lower-case($class/@name)}Intent = new Intent(this, ReadAll${$class/@name}s.class);
				${lower-case($class/@name)}Maintainence.put("intent", ${lower-case($class/@name)}Intent);
				list.add(${lower-case($class/@name)}Maintainence);
			</c:if>
			</c:if>
			
			
			</c:if>
		</c:iterate> 
	</c:iterate>
	
		return list;
	} 
	
		@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		MenuInflater inflater = getMenuInflater();
		inflater.inflate(R.menu.main_menu, menu);
		return true;
	}

	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case R.id.menu_main_logout:
			logout();
			return true;
		case R.id.menu_main_exit:
			exit();
			return true;
		default:
			return super.onOptionsItemSelected(item);
		}
	}

	public void logout() {
		new AsyncHttpGet(this) {
			@Override
			protected void onResponse(String result) {
				finish();
			}
		}.execute(${camelCase($projectName)}Main.manageURL + "logout");
	}

	public void exit() {
		new AsyncHttpGet(this) {
			@Override
			protected void onResponse(String result) {
				finish();
			}
		}.execute(${camelCase($projectName)}Main.manageURL + "logout");
	}       
}
</java:format>