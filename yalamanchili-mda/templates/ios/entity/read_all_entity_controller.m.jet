#import "ReadAll${$class/@name}sViewController.h"

@implementation ReadAll${$class/@name}sViewController
@synthesize ${lower-case($class/@name)}sList;
@synthesize ${lower-case($class/@name)}s; 
@synthesize parent;
@synthesize parentResource;

/*
 // The designated initializer.  Override if you create the controller programmatically and want to perform customization that is not appropriate for viewDidLoad.
- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil {
    if ((self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil])) {
        // Custom initialization
    }
    return self;
}
*/

- (void)loadView {
	CGRect readAllViewCanvas= CGRectMake(0.0, 0.0, 320, 480);
	readAll${$class/@name}sView = [[[UIView alloc] initWithFrame:readAllViewCanvas] autorelease];
	readAll${$class/@name}sView.autoresizesSubviews = YES;              
	self.view = readAll${$class/@name}sView;
	[self configurePagingBarView];
	[self configureReadAllTableView];
	[self configureOptionsView];
	[readAll${$class/@name}sView addSubview:pagingBarView]; 
	[readAll${$class/@name}sView addSubview:readAll${$class/@name}sTableView];
	[readAll${$class/@name}sView addSubview:optionsBarView];
	
	readAll${$class/@name}sTableView.delegate = self;
	readAll${$class/@name}sTableView.dataSource=self;
}

- (void) configurePagingBarView{
	CGRect pagingBarCanvas= CGRectMake(0.0, 0.0, 320, 40);
	pagingBarView = [[[UITableView alloc] initWithFrame:pagingBarCanvas] autorelease];
	//configure create button
	createButton= [[UIButton buttonWithType:UIButtonTypeRoundedRect] retain];
	createButton.frame = CGRectMake(5,5, 80, 30.0);
	[createButton setTitle:@"Create" forState:UIControlStateNormal];
	[createButton setTitleColor:[UIColor grayColor] forState:UIControlStateNormal ];
	[createButton addTarget:self action:@selector(createClicked:) forControlEvents:UIControlEventTouchUpInside];
	
	//configure next button
	nextButton= [[UIButton buttonWithType:UIButtonTypeRoundedRect] retain];
	nextButton.frame = CGRectMake(90,5, 80, 30.0);
	[nextButton setTitle:@"next" forState:UIControlStateNormal];
	[nextButton setTitleColor:[UIColor grayColor] forState:UIControlStateNormal ];
	[nextButton addTarget:self action:@selector(nextClicked:) forControlEvents:UIControlEventTouchUpInside];	
	
	//configure previous button
	previousButton= [[UIButton buttonWithType:UIButtonTypeRoundedRect] retain];
	previousButton.frame = CGRectMake(175,5, 80, 30.0);
	[previousButton setTitle:@"previous" forState:UIControlStateNormal];
	[previousButton setTitleColor:[UIColor grayColor] forState:UIControlStateNormal ];
	[previousButton addTarget:self action:@selector(previousClicked:) forControlEvents:UIControlEventTouchUpInside];	
	
	[pagingBarView addSubview:createButton];
	[pagingBarView addSubview:nextButton];
	[pagingBarView addSubview:previousButton];
	
}

- (void) configureReadAllTableView{
	CGRect readAllTableViewCanvas= CGRectMake(0.0, 40, 320, 345);
	readAll${$class/@name}sTableView = [[[UITableView alloc] initWithFrame:readAllTableViewCanvas] autorelease];
}

- (void) configureOptionsView {
	CGRect optionsBarCanvas= CGRectMake(0.0, 385, 320, 30);
	optionsBarView = [[[UIView alloc] initWithFrame:optionsBarCanvas] autorelease];
	optionsBarView.backgroundColor=UIColor.redColor;
	
	optionsButton= [[UIButton buttonWithType:UIButtonTypeRoundedRect] retain];
	optionsButton.frame = CGRectMake(0,0, 320, 30.0);
	[optionsButton setTitle:@"Options" forState:UIControlStateNormal];
	[optionsButton setTitleColor:[UIColor grayColor] forState:UIControlStateNormal ];
	[optionsButton addTarget:self action:@selector(optionsClicked:) forControlEvents:UIControlEventTouchUpInside];
	
	[optionsBarView addSubview:optionsButton];	
}

// Implement viewDidLoad to do additional setup after loading the view, typically from a nib.
- (void)viewDidLoad {
 	[super viewDidLoad];
	${lower-case($class/@name)}sList =[[NSMutableArray alloc] init];
	${lower-case($class/@name)}s = [[NSMutableArray alloc] init];
	${lower-case($class/@name)}sStartIndex=0;
	[self loadDataWithStartIndex:0 pageSize:nil];
	self.navigationItem.title=@"${$class/@name}s";
}

- (void) loadDataWithStartIndex: (int) startIndex pageSize: (NSString*) pageSize {
	NSString *urlString;
	[${lower-case($class/@name)}sList removeAllObjects];
	[${lower-case($class/@name)}s removeAllObjects];
	if(parentResource !=nil){
		urlString =self.parentResource;
	}
	else {
		urlString =[self getReadAll${$class/@name}sURLWithStartIndex:startIndex];
	}
	NSData *data=[HttpHelper asyncHttpGetDataFromURL:urlString];
	NSArray *temp${lower-case($class/@name)}s=[XMLUtils convertXMLToObjects:data];
	for (<c:replaceStrings replace="." with="_">${$groupID}</c:replaceStrings>_entity_${lower-case($package/@name)}_${$class/@name} *${lower-case($class/@name)} in temp${lower-case($class/@name)}s) {
		[${lower-case($class/@name)}s addObject:${lower-case($class/@name)}];
		[${lower-case($class/@name)}sList addObject:[${lower-case($class/@name)} description]];
	}
	[readAll${$class/@name}sTableView reloadData];
}


/*
// Override to allow orientations other than the default portrait orientation.
- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation {
    // Return YES for supported orientations
    return (interfaceOrientation == UIInterfaceOrientationPortrait);
}
*/

- (void)didReceiveMemoryWarning {
    // Releases the view if it doesn't have a superview.
    [super didReceiveMemoryWarning];
    
    // Release any cached data, images, etc that aren't in use.
}

- (void)viewDidUnload {
    [super viewDidUnload];
    // Release any retained subviews of the main view.
    // e.g. self.myOutlet = nil;
}

// Customize the number of rows in the table view.
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return [${lower-case($class/@name)}sList count];
}


// Customize the appearance of table view cells.
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    
    static NSString *CellIdentifier = @"ReadAll${$class/@name}sCell";
    
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
    if (cell == nil) {
        cell = [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier] autorelease];
    }
	// Configure the cell.
	NSString *cellText=[${lower-case($class/@name)}sList objectAtIndex:indexPath.row];
	cell.textLabel.text=cellText;
    return cell;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
	Read${$class/@name}ViewController *read${$class/@name}Controller = [[Read${$class/@name}ViewController alloc] initWithNibName:nil bundle:nil];
	<c:replaceStrings replace="." with="_">${$groupID}</c:replaceStrings>_entity_${lower-case($package/@name)}_${$class/@name} *${lower-case($class/@name)}=[${lower-case($class/@name)}s objectAtIndex:indexPath.row];
	read${$class/@name}Controller.${lower-case($class/@name)}=${lower-case($class/@name)};
	[self.navigationController pushViewController:read${$class/@name}Controller animated:YES];
	[read${$class/@name}Controller release];
	read${$class/@name}Controller = nil;
	
}

- (void) createClicked:(id) sender{
	if (parent!=nil) {
<c:if test="$class/@isDependent = 'true'">
	<%-- process compsition associations--%>
	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID"> 
					<%-- process only compositions--%>
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
  					  		 	<%-- check if this is a comp--%>
  					  		 	<c:if test="$association_connection_end2/@aggregation = 'composite'">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
										<%-- check to see if class2 is parent and child--%>
		NSLog(@"creatinf {$class/@name} ");
		NSLog(@"parent %@",[parent entityID]);
		Create${$class/@name}ViewController *create${$class/@name}Controller = [[Create${$class/@name}ViewController alloc] initWithNibName:nil bundle:nil];
		create${$class/@name}Controller.${lower-case($class/@name)} = [[[<c:replaceStrings replace="." with="_">${$groupID}</c:replaceStrings>_entity_${lower-case($package/@name)}_${$class/@name} alloc] init] autorelease];
		create${$class/@name}Controller.${lower-case($class/@name)}.${lowercaseFirst($class2/@name)}=parent;
		[self.navigationController pushViewController:create${$class/@name}Controller animated:YES];
		[create${$class/@name}Controller release];
		create${$class/@name}Controller = nil;
  					  		 			</c:if> 
  					  		 		</c:iterate>
  					  		 	 </c:if> 	
  							  	</c:if> 
  					 	  </c:iterate> 					 	 				 	  
				</c:if>												
		</c:iterate>
	</c:iterate>
</c:iterate>
</c:if>	

	} else{
	Create${$class/@name}ViewController *create${$class/@name}Controller = [[Create${$class/@name}ViewController alloc] initWithNibName:nil bundle:nil];
	[self.navigationController pushViewController:create${$class/@name}Controller animated:YES];
	[create${$class/@name}Controller release];
	create${$class/@name}Controller = nil;
	}
}

- (void) optionsClicked: (id) sender{
	UIActionSheet *menu=[[UIActionSheet alloc] initWithTitle:@"options" delegate:self cancelButtonTitle:@"cancel" destructiveButtonTitle:nil otherButtonTitles:@"search",@"find",nil];
	[menu showInView:readAll${$class/@name}sTableView];
	[menu release];
}

-(void)actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex {
    if (buttonIndex == 0) {
		NSLog(@"search");
	} 
	else if (buttonIndex == 1) {
        NSLog(@"find");
    }
}

- (void) nextClicked:(id) sender{
	${lower-case($class/@name)}sStartIndex=${lower-case($class/@name)}sStartIndex+ [pageSize intValue];
	[self loadDataWithStartIndex:${lower-case($class/@name)}sStartIndex pageSize:nil];
}

- (void) previousClicked:(id) sender{
	if (${lower-case($class/@name)}sStartIndex >= [pageSize intValue]) {
		${lower-case($class/@name)}sStartIndex = ${lower-case($class/@name)}sStartIndex
		- [pageSize intValue];
		[self loadDataWithStartIndex:${lower-case($class/@name)}sStartIndex pageSize:nil];
	}
}

- (NSString*) getReadAll${$class/@name}sURLWithStartIndex: (int) startIndex {
	NSString* startIndexStr = [NSString stringWithFormat:@"%d", startIndex];
	NSString* endIndexStr = [NSString stringWithFormat:@"%d", startIndex+[pageSize intValue]];
	NSString *str=[NSString stringWithFormat:@"${lower-case($class/@name)}/readall/%@/%@", startIndexStr, endIndexStr];
	return [[HttpUtils crudURL] stringByAppendingString:str];
}

- (void)dealloc {
	[${lower-case($class/@name)}s release];
	[${lower-case($class/@name)}sList release];
    [super dealloc];
}


@end
