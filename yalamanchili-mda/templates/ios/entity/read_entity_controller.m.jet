#import "Read${$class/@name}ViewController.h"
<%--process level 1 generizations associatons --%>
<c:if test="not($class/@name = $parentClass1/@name)">
  			<c:setVariable select="$parentClass1/@xmi.id" var="classID"/>		
  							<%-- process the assocations for level 1 class --%>
							<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
								<c:iterate select="$association/Association.connection" var="association_connection">
									<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
										<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
											<%-- check is the association is corresponding to the class  --%>
												<c:if test="$association_connection_end_classID = $classID">
							  					   	<%-- iterate over the iterations ends  --%>
							  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
							  					  	 <%-- process only non composits or non aggregations and --%>
  					  								<c:if test="$association_connection_end2/@aggregation = 'none'">
  					  								<c:if test="not($association_connection_end/@aggregation = 'none')">
							  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
							  					  	 	<%-- get the end secondary end with other class  --%>
							  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
										  					 <%-- check to see if this is a navigable relation--%>
										  					 <c:if test="$association_connection_end/@isNavigable = 'true'">										  					  		 	 
							  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
							  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
							  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2">
#import "ReadAll${$class2/@name}sViewController.h"						  					  		 			 
							  					  		 			</c:if> 
							  					  		 		</c:iterate>
							  							  	</c:if> 
							  							  	</c:if>
							  							  	</c:if>  
							  							  	</c:if>
							  					 	  </c:iterate> 
							  					 						 	 				 	  
												</c:if> 											
									</c:iterate>
								</c:iterate>
							</c:iterate> 
</c:if>
<%--process level 2 generizations --%>
<c:if test="not($class/@name = $parentClass2/@name)">
  			<c:setVariable select="$parentClass2/@xmi.id" var="classID"/>		
  							<%-- process the assocations for level 1 class --%>
							<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
								<c:iterate select="$association/Association.connection" var="association_connection">
									<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
										<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
											<%-- check is the association is corresponding to the class  --%>
												<c:if test="$association_connection_end_classID = $classID">
							  					   	<%-- iterate over the iterations ends  --%>
							  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
							  					  	 <%-- process only non composits or non aggregations and --%>
  					  								<c:if test="$association_connection_end2/@aggregation = 'none'">
  					  								<c:if test="not($association_connection_end/@aggregation = 'none')">
							  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
							  					  	 	<%-- get the end secondary end with other class  --%>
							  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
										  					 <%-- check to see if this is a navigable relation--%>
										  					 <c:if test="$association_connection_end/@isNavigable = 'true'">										  					  		 	 
							  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
							  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
							  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
#import "ReadAll${$class2/@name}sViewController.h"
							  					  		 			</c:if> 
							  					  		 		</c:iterate>
							  							  	</c:if> 
							  							  	</c:if>
							  							  	</c:if> 
							  							  	</c:if>   
							  					 	  </c:iterate> 
							  					 						 	 				 	  
												</c:if> 											
									</c:iterate>
								</c:iterate>
							</c:iterate> 
</c:if> 

<c:setVariable select="$class/@xmi.id" var="classID"/>
<%--process 0 level class relations --%>
<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID">
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <%-- process only non composits or non aggregations and --%>
  					  	 <c:if test="$association_connection_end2/@aggregation = 'none'">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
  					  		 	<%-- check to see if this is a navigable relation--%>
  					  		 	<c:if test="$association_connection_end2/@isNavigable = 'true'">
  					  		 	<%-- process many on target--%>
								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
  								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
#import "ReadAll${$class2/@name}sViewController.h"
  					  		 			</c:if> 
  					  		 		</c:iterate>
  					  		 	</c:if>	
  							  	</c:if> 
  							  	</c:if>
  							  	</c:if> 
  							  	</c:if>	
  					 	  </c:iterate> 					 	 				 	  
					</c:if> 										
		</c:iterate>
	</c:iterate>
</c:iterate>
<%
Integer pageSize = 30;
Integer pos=0;
%>

@implementation Read${$class/@name}ViewController
@synthesize ${lower-case($class/@name)};

/*
 // The designated initializer.  Override if you create the controller programmatically and want to perform customization that is not appropriate for viewDidLoad.
- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil {
    if ((self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil])) {
        // Custom initialization
    }
    return self;
}
*/

// Implement loadView to create a view hierarchy programmatically, without using a nib.
- (void)loadView {
	CGRect cgRct = CGRectMake(0.0, 0.0, 480, 320); 
	read${$class/@name}View= [[UIView alloc] initWithFrame:cgRct]; 
	read${$class/@name}View.autoresizesSubviews = YES;  
	read${$class/@name}View.backgroundColor=[UIColor whiteColor];
	self.view = read${$class/@name}View;
	[self configureOptionsView];
	[read${$class/@name}View addSubview:optionsBarView];   
	<%-- process parent class level 2 attributes--%>
	<c:if test="not($class/@name = $parentClass2/@name)">
		<c:iterate select="$parentClass2/Classifier.feature/Attribute" var="attribute">
	 <c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
	  <c:when test="${'$StringID'}" > 
		UILabel *${$attribute/@name}L=[[[UILabel alloc] initWithFrame:CGRectMake(12,<% pos=pos+pageSize; %><%= pos.toString() %>,260,25)] autorelease];
		[${$attribute/@name}L setText:@"${$attribute/@name}"];
		[self.view addSubview:${$attribute/@name}L];
		${$attribute/@name}TF= [[[UITextField alloc] initWithFrame:CGRectMake(12, <% pos=pos+pageSize; %><%= pos.toString() %>, 260, 25)] autorelease];
		[${$attribute/@name}TF setBorderStyle:UITextBorderStyleLine];
		[${$attribute/@name}TF setFont:[UIFont fontWithName:@"Times New Roman" size:14]];
		[${$attribute/@name}TF addTarget:self action:@selector(textFieldDoneEditing:) forControlEvents:UIControlEventEditingDidEndOnExit];
		[self.view addSubview:${$attribute/@name}TF];
	  </c:when> 
	  <c:when test="${'$IntegerID'}" >
		UILabel *${$attribute/@name}L=[[[UILabel alloc] initWithFrame:CGRectMake(12,<% pos=pos+pageSize; %><%= pos.toString() %>,260,25)] autorelease];
		[${$attribute/@name}L setText:@"${$attribute/@name}"];
		[self.view addSubview:${$attribute/@name}L];
		${$attribute/@name}TF= [[[UITextField alloc] initWithFrame:CGRectMake(12, <% pos=pos+pageSize; %><%= pos.toString() %>, 260, 25)] autorelease];
		[${$attribute/@name}TF setBorderStyle:UITextBorderStyleLine];
		[${$attribute/@name}TF setFont:[UIFont fontWithName:@"Times New Roman" size:14]];
		[${$attribute/@name}TF addTarget:self action:@selector(textFieldDoneEditing:) forControlEvents:UIControlEventEditingDidEndOnExit];
		[self.view addSubview:${$attribute/@name}TF];
	  </c:when>
	  <c:when test="${'$DateID'}" >
	
	  </c:when>
	  <c:when test="${'$BooleanID'}" >
	
	  </c:when>
	  <c:when test="${'$LongID'}" >
		UILabel *${$attribute/@name}L=[[[UILabel alloc] initWithFrame:CGRectMake(12,<% pos=pos+pageSize; %><%= pos.toString() %>,260,25)] autorelease];
		[${$attribute/@name}L setText:@"${$attribute/@name}"];
		[self.view addSubview:${$attribute/@name}L];
		${$attribute/@name}TF= [[[UITextField alloc] initWithFrame:CGRectMake(12, <% pos=pos+pageSize; %><%= pos.toString() %>, 260, 25)] autorelease];
		[${$attribute/@name}TF setBorderStyle:UITextBorderStyleLine];
		[${$attribute/@name}TF setFont:[UIFont fontWithName:@"Times New Roman" size:14]];
		[${$attribute/@name}TF addTarget:self action:@selector(textFieldDoneEditing:) forControlEvents:UIControlEventEditingDidEndOnExit];
		[self.view addSubview:${$attribute/@name}TF];
	  </c:when>
	  <c:when test="${'$FloatID'}" >
		UILabel *${$attribute/@name}L=[[[UILabel alloc] initWithFrame:CGRectMake(12,<% pos=pos+pageSize; %><%= pos.toString() %>,260,25)] autorelease];
		[${$attribute/@name}L setText:@"${$attribute/@name}"];
		[self.view addSubview:${$attribute/@name}L];
		${$attribute/@name}TF= [[[UITextField alloc] initWithFrame:CGRectMake(12, <% pos=pos+pageSize; %><%= pos.toString() %>, 260, 25)] autorelease];
		[${$attribute/@name}TF setBorderStyle:UITextBorderStyleLine];
		[${$attribute/@name}TF setFont:[UIFont fontWithName:@"Times New Roman" size:14]];
		[${$attribute/@name}TF addTarget:self action:@selector(textFieldDoneEditing:) forControlEvents:UIControlEventEditingDidEndOnExit];
		[self.view addSubview:${$attribute/@name}TF];
	  </c:when>
	 <c:otherwise> 
	 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
	 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
	 			<%-- add  enums support--%>
	 			</c:if>
	 	</c:iterate>	
	 	  </c:otherwise>
		</c:choose> 
		</c:iterate>
	</c:if>
	<%-- process parent class level 1 attributes--%>
	<c:if test="not($class/@name = $parentClass1/@name)">
		<c:iterate select="$parentClass1/Classifier.feature/Attribute" var="attribute">
	 <c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
	  <c:when test="${'$StringID'}" > 
		UILabel *${$attribute/@name}L=[[[UILabel alloc] initWithFrame:CGRectMake(12,<% pos=pos+pageSize; %><%= pos.toString() %>,260,25)] autorelease];
		[${$attribute/@name}L setText:@"${$attribute/@name}"];
		[self.view addSubview:${$attribute/@name}L];
		${$attribute/@name}TF= [[[UITextField alloc] initWithFrame:CGRectMake(12, <% pos=pos+pageSize; %><%= pos.toString() %>, 260, 25)] autorelease];
		[${$attribute/@name}TF setBorderStyle:UITextBorderStyleLine];
		[${$attribute/@name}TF setFont:[UIFont fontWithName:@"Times New Roman" size:14]];
		[${$attribute/@name}TF addTarget:self action:@selector(textFieldDoneEditing:) forControlEvents:UIControlEventEditingDidEndOnExit];
		[self.view addSubview:${$attribute/@name}TF];
	  </c:when> 
	  <c:when test="${'$IntegerID'}" >
		UILabel *${$attribute/@name}L=[[[UILabel alloc] initWithFrame:CGRectMake(12,<% pos=pos+pageSize; %><%= pos.toString() %>,260,25)] autorelease];
		[${$attribute/@name}L setText:@"${$attribute/@name}"];
		[self.view addSubview:${$attribute/@name}L];
		${$attribute/@name}TF= [[[UITextField alloc] initWithFrame:CGRectMake(12, <% pos=pos+pageSize; %><%= pos.toString() %>, 260, 25)] autorelease];
		[${$attribute/@name}TF setBorderStyle:UITextBorderStyleLine];
		[${$attribute/@name}TF setFont:[UIFont fontWithName:@"Times New Roman" size:14]];
		[${$attribute/@name}TF addTarget:self action:@selector(textFieldDoneEditing:) forControlEvents:UIControlEventEditingDidEndOnExit];
		[self.view addSubview:${$attribute/@name}TF];
	  </c:when>
	  <c:when test="${'$DateID'}" >
	
	  </c:when>
	  <c:when test="${'$BooleanID'}" >
	
	  </c:when>
	  <c:when test="${'$LongID'}" >
		UILabel *${$attribute/@name}L=[[[UILabel alloc] initWithFrame:CGRectMake(12,<% pos=pos+pageSize; %><%= pos.toString() %>,260,25)] autorelease];
		[${$attribute/@name}L setText:@"${$attribute/@name}"];
		[self.view addSubview:${$attribute/@name}L];
		${$attribute/@name}TF= [[[UITextField alloc] initWithFrame:CGRectMake(12, <% pos=pos+pageSize; %><%= pos.toString() %>, 260, 25)] autorelease];
		[${$attribute/@name}TF setBorderStyle:UITextBorderStyleLine];
		[${$attribute/@name}TF setFont:[UIFont fontWithName:@"Times New Roman" size:14]];
		[${$attribute/@name}TF addTarget:self action:@selector(textFieldDoneEditing:) forControlEvents:UIControlEventEditingDidEndOnExit];
		[self.view addSubview:${$attribute/@name}TF];
	  </c:when>
	  <c:when test="${'$FloatID'}" >
		UILabel *${$attribute/@name}L=[[[UILabel alloc] initWithFrame:CGRectMake(12,<% pos=pos+pageSize; %><%= pos.toString() %>,260,25)] autorelease];
		[${$attribute/@name}L setText:@"${$attribute/@name}"];
		[self.view addSubview:${$attribute/@name}L];
		${$attribute/@name}TF= [[[UITextField alloc] initWithFrame:CGRectMake(12, <% pos=pos+pageSize; %><%= pos.toString() %>, 260, 25)] autorelease];
		[${$attribute/@name}TF setBorderStyle:UITextBorderStyleLine];
		[${$attribute/@name}TF setFont:[UIFont fontWithName:@"Times New Roman" size:14]];
		[${$attribute/@name}TF addTarget:self action:@selector(textFieldDoneEditing:) forControlEvents:UIControlEventEditingDidEndOnExit];
		[self.view addSubview:${$attribute/@name}TF];
	  </c:when>
	 <c:otherwise> 
	 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
	 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
	 			<%-- add  enums support--%>
	 			</c:if>
	 	</c:iterate>	
	 	  </c:otherwise>
		</c:choose> 
		</c:iterate>
	</c:if>		
	<%-- process parent class level 0 attributes--%>	
	<c:iterate select="$class/Classifier.feature/Attribute" var="attribute">
	 <c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
	  <c:when test="${'$StringID'}" > 
		UILabel *${$attribute/@name}L=[[[UILabel alloc] initWithFrame:CGRectMake(12,<% pos=pos+pageSize; %><%= pos.toString() %>,260,25)] autorelease];
		[${$attribute/@name}L setText:@"${$attribute/@name}"];
		[self.view addSubview:${$attribute/@name}L];
		${$attribute/@name}TF= [[[UITextField alloc] initWithFrame:CGRectMake(12, <% pos=pos+pageSize; %><%= pos.toString() %>, 260, 25)] autorelease];
		[${$attribute/@name}TF setBorderStyle:UITextBorderStyleLine];
		[${$attribute/@name}TF setFont:[UIFont fontWithName:@"Times New Roman" size:14]];
		[${$attribute/@name}TF addTarget:self action:@selector(textFieldDoneEditing:) forControlEvents:UIControlEventEditingDidEndOnExit];
		[self.view addSubview:${$attribute/@name}TF];
	  </c:when> 
	  <c:when test="${'$IntegerID'}" >
		UILabel *${$attribute/@name}L=[[[UILabel alloc] initWithFrame:CGRectMake(12,<% pos=pos+pageSize; %><%= pos.toString() %>,260,25)] autorelease];
		[${$attribute/@name}L setText:@"${$attribute/@name}"];
		[self.view addSubview:${$attribute/@name}L];
		${$attribute/@name}TF= [[[UITextField alloc] initWithFrame:CGRectMake(12, <% pos=pos+pageSize; %><%= pos.toString() %>, 260, 25)] autorelease];
		[${$attribute/@name}TF setBorderStyle:UITextBorderStyleLine];
		[${$attribute/@name}TF setFont:[UIFont fontWithName:@"Times New Roman" size:14]];
		[${$attribute/@name}TF addTarget:self action:@selector(textFieldDoneEditing:) forControlEvents:UIControlEventEditingDidEndOnExit];
		[self.view addSubview:${$attribute/@name}TF];
	  </c:when>
	  <c:when test="${'$DateID'}" >
	
	  </c:when>
	  <c:when test="${'$BooleanID'}" >
	
	  </c:when>
	  <c:when test="${'$LongID'}" >
		UILabel *${$attribute/@name}L=[[[UILabel alloc] initWithFrame:CGRectMake(12,<% pos=pos+pageSize; %><%= pos.toString() %>,260,25)] autorelease];
		[${$attribute/@name}L setText:@"${$attribute/@name}"];
		[self.view addSubview:${$attribute/@name}L];
		${$attribute/@name}TF= [[[UITextField alloc] initWithFrame:CGRectMake(12, <% pos=pos+pageSize; %><%= pos.toString() %>, 260, 25)] autorelease];
		[${$attribute/@name}TF setBorderStyle:UITextBorderStyleLine];
		[${$attribute/@name}TF setFont:[UIFont fontWithName:@"Times New Roman" size:14]];
		[${$attribute/@name}TF addTarget:self action:@selector(textFieldDoneEditing:) forControlEvents:UIControlEventEditingDidEndOnExit];
		[self.view addSubview:${$attribute/@name}TF];
	  </c:when>
	  <c:when test="${'$FloatID'}" >
		UILabel *${$attribute/@name}L=[[[UILabel alloc] initWithFrame:CGRectMake(12,<% pos=pos+pageSize; %><%= pos.toString() %>,260,25)] autorelease];
		[${$attribute/@name}L setText:@"${$attribute/@name}"];
		[self.view addSubview:${$attribute/@name}L];
		${$attribute/@name}TF= [[[UITextField alloc] initWithFrame:CGRectMake(12, <% pos=pos+pageSize; %><%= pos.toString() %>, 260, 25)] autorelease];
		[${$attribute/@name}TF setBorderStyle:UITextBorderStyleLine];
		[${$attribute/@name}TF setFont:[UIFont fontWithName:@"Times New Roman" size:14]];
		[${$attribute/@name}TF addTarget:self action:@selector(textFieldDoneEditing:) forControlEvents:UIControlEventEditingDidEndOnExit];
		[self.view addSubview:${$attribute/@name}TF];
	  </c:when>
	 <c:otherwise> 
	 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
	 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
	 			<%-- add  enums support--%>
	 			</c:if>
	 	</c:iterate>	
	 	  </c:otherwise>
		</c:choose> 
	</c:iterate>
}

- (void) configureOptionsView {
	CGRect optionsBarCanvas= CGRectMake(0.0, 385, 320, 30);
	optionsBarView = [[[UIView alloc] initWithFrame:optionsBarCanvas] autorelease];
	optionsBarView.backgroundColor=UIColor.redColor;
	
	optionsButton= [[UIButton buttonWithType:UIButtonTypeRoundedRect] retain];
	optionsButton.frame = CGRectMake(0,0, 320, 30.0);
	[optionsButton setTitle:@"Options" forState:UIControlStateNormal];
	[optionsButton setTitleColor:[UIColor grayColor] forState:UIControlStateNormal ];
	[optionsButton addTarget:self action:@selector(optionsClicked:) forControlEvents:UIControlEventTouchUpInside];
	
	[optionsBarView addSubview:optionsButton];	
}

- (void) optionsClicked: (id) sender{
	menu = [[[UIActionSheet alloc] initWithTitle:@"options" delegate:self cancelButtonTitle:@"cancel" destructiveButtonTitle:nil otherButtonTitles:nil] autorelease];
<%--process level 1 generizations associatons --%>
<c:if test="not($class/@name = $parentClass1/@name)">
  			<c:setVariable select="$parentClass1/@xmi.id" var="classID"/>		
  							<%-- process the assocations for level 1 class --%>
							<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
								<c:iterate select="$association/Association.connection" var="association_connection">
									<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
										<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
											<%-- check is the association is corresponding to the class  --%>
												<c:if test="$association_connection_end_classID = $classID">
							  					   	<%-- iterate over the iterations ends  --%>
							  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
							  					  	 <%-- process only non composits or non aggregations and --%>
  					  								<c:if test="$association_connection_end2/@aggregation = 'none'">
  					  								<c:if test="not($association_connection_end/@aggregation = 'none')">
							  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
							  					  	 	<%-- get the end secondary end with other class  --%>
							  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
										  					 <%-- check to see if this is a navigable relation--%>
										  					 <c:if test="$association_connection_end/@isNavigable = 'true'">										  					  		 	 
							  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
							  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
							  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
	[menu addButtonWithTitle:@"${lower-case($class2/@name)}s"];
							  					  		 			</c:if> 
							  					  		 		</c:iterate>
							  							  	</c:if> 
							  							  	</c:if>
							  							  	</c:if>  
							  							  	</c:if>
							  					 	  </c:iterate> 
							  					 						 	 				 	  
												</c:if> 											
									</c:iterate>
								</c:iterate>
							</c:iterate> 
</c:if>
<%--process level 2 generizations --%>
<c:if test="not($class/@name = $parentClass2/@name)">
  			<c:setVariable select="$parentClass2/@xmi.id" var="classID"/>		
  							<%-- process the assocations for level 1 class --%>
							<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
								<c:iterate select="$association/Association.connection" var="association_connection">
									<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
										<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
											<%-- check is the association is corresponding to the class  --%>
												<c:if test="$association_connection_end_classID = $classID">
							  					   	<%-- iterate over the iterations ends  --%>
							  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
							  					  	 <%-- process only non composits or non aggregations and --%>
  					  								<c:if test="$association_connection_end2/@aggregation = 'none'">
  					  								<c:if test="not($association_connection_end/@aggregation = 'none')">
							  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
							  					  	 	<%-- get the end secondary end with other class  --%>
							  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
										  					 <%-- check to see if this is a navigable relation--%>
										  					 <c:if test="$association_connection_end/@isNavigable = 'true'">										  					  		 	 
							  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
							  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
							  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
	[menu addButtonWithTitle:@"${lower-case($class2/@name)}s"];
							  					  		 			</c:if> 
							  					  		 		</c:iterate>
							  							  	</c:if> 
							  							  	</c:if>
							  							  	</c:if> 
							  							  	</c:if>   
							  					 	  </c:iterate> 
							  					 						 	 				 	  
												</c:if> 											
									</c:iterate>
								</c:iterate>
							</c:iterate> 
</c:if> 

<c:setVariable select="$class/@xmi.id" var="classID"/>
<%--process 0 level class relations --%>
<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID">
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <%-- process only non composits or non aggregations and --%>
  					  	 <c:if test="$association_connection_end2/@aggregation = 'none'">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
  					  		 	<%-- check to see if this is a navigable relation--%>
  					  		 	<c:if test="$association_connection_end2/@isNavigable = 'true'">
  					  		 	<%-- process many on target--%>
								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
  								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
	[menu addButtonWithTitle:@"${lower-case($class2/@name)}s"];
  					  		 			</c:if> 
  					  		 		</c:iterate>
  					  		 	</c:if>	
  							  	</c:if> 
  							  	</c:if>
  							  	</c:if> 
  							  	</c:if>	
  					 	  </c:iterate> 					 	 				 	  
					</c:if> 										
		</c:iterate>
	</c:iterate>
</c:iterate>		
	[menu showInView:self.view];
}

-(void)actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex {
<%--process level 1 generizations associatons --%>
<c:if test="not($class/@name = $parentClass1/@name)">
  			<c:setVariable select="$parentClass1/@xmi.id" var="classID"/>		
  							<%-- process the assocations for level 1 class --%>
							<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
								<c:iterate select="$association/Association.connection" var="association_connection">
									<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
										<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
											<%-- check is the association is corresponding to the class  --%>
												<c:if test="$association_connection_end_classID = $classID">
							  					   	<%-- iterate over the iterations ends  --%>
							  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
							  					  	 <%-- process only non composits or non aggregations and --%>
  					  								<c:if test="$association_connection_end2/@aggregation = 'none'">
  					  								<c:if test="not($association_connection_end/@aggregation = 'none')">
							  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
							  					  	 	<%-- get the end secondary end with other class  --%>
							  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
										  					 <%-- check to see if this is a navigable relation--%>
										  					 <c:if test="$association_connection_end/@isNavigable = 'true'">										  					  		 	 
							  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
							  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
							  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2">
	if([[menu buttonTitleAtIndex:buttonIndex] isEqualToString:@"${lower-case($class2/@name)}s"]){
		NSLog(@"${lower-case($class2/@name)}s clicked");
		ReadAll${$class2/@name}sViewController *readAll${$class2/@name}sViewController = [[ReadAll${$class2/@name}sViewController alloc] initWithNibName:nil bundle:nil];
		readAll${$class2/@name}sViewController.parent=${lower-case($class/@name)};
		int ${lower-case($class/@name)}Id=[${lower-case($class/@name)}.entityID intValue];
		readAll${$class2/@name}sViewController.parentResource=[[self getReadURLWithID:${lower-case($class/@name)}Id] stringByAppendingFormat:@"/${lower-case($class2/@name)}s"];
		[self.navigationController pushViewController:readAll${$class2/@name}sViewController animated:YES];
		[readAll${$class2/@name}sViewController release];
		readAll${$class2/@name}sViewController = nil;
	}						  					  		 			 
							  					  		 			</c:if> 
							  					  		 		</c:iterate>
							  							  	</c:if> 
							  							  	</c:if>
							  							  	</c:if>  
							  							  	</c:if>
							  					 	  </c:iterate> 
							  					 						 	 				 	  
												</c:if> 											
									</c:iterate>
								</c:iterate>
							</c:iterate> 
</c:if>
<%--process level 2 generizations --%>
<c:if test="not($class/@name = $parentClass2/@name)">
  			<c:setVariable select="$parentClass2/@xmi.id" var="classID"/>		
  							<%-- process the assocations for level 1 class --%>
							<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
								<c:iterate select="$association/Association.connection" var="association_connection">
									<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
										<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
											<%-- check is the association is corresponding to the class  --%>
												<c:if test="$association_connection_end_classID = $classID">
							  					   	<%-- iterate over the iterations ends  --%>
							  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
							  					  	 <%-- process only non composits or non aggregations and --%>
  					  								<c:if test="$association_connection_end2/@aggregation = 'none'">
  					  								<c:if test="not($association_connection_end/@aggregation = 'none')">
							  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
							  					  	 	<%-- get the end secondary end with other class  --%>
							  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
										  					 <%-- check to see if this is a navigable relation--%>
										  					 <c:if test="$association_connection_end/@isNavigable = 'true'">										  					  		 	 
							  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
							  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
							  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
	if([[menu buttonTitleAtIndex:buttonIndex] isEqualToString:@"${lower-case($class2/@name)}s"]){
		NSLog(@"${lower-case($class2/@name)}s clicked");
		ReadAll${$class2/@name}sViewController *readAll${$class2/@name}sViewController = [[ReadAll${$class2/@name}sViewController alloc] initWithNibName:nil bundle:nil];
		readAll${$class2/@name}sViewController.parent=${lower-case($class/@name)};
		int ${lower-case($class/@name)}Id=[${lower-case($class/@name)}.entityID intValue];
		readAll${$class2/@name}sViewController.parentResource=[[self getReadURLWithID:${lower-case($class/@name)}Id] stringByAppendingFormat:@"/${lower-case($class2/@name)}s"];
		[self.navigationController pushViewController:readAll${$class2/@name}sViewController animated:YES];
		[readAll${$class2/@name}sViewController release];
		readAll${$class2/@name}sViewController = nil;
	}
							  					  		 			</c:if> 
							  					  		 		</c:iterate>
							  							  	</c:if> 
							  							  	</c:if>
							  							  	</c:if> 
							  							  	</c:if>   
							  					 	  </c:iterate> 
							  					 						 	 				 	  
												</c:if> 											
									</c:iterate>
								</c:iterate>
							</c:iterate> 
</c:if> 

<c:setVariable select="$class/@xmi.id" var="classID"/>
<%--process 0 level class relations --%>
<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID">
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <%-- process only non composits or non aggregations and --%>
  					  	 <c:if test="$association_connection_end2/@aggregation = 'none'">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
  					  		 	<%-- check to see if this is a navigable relation--%>
  					  		 	<c:if test="$association_connection_end2/@isNavigable = 'true'">
  					  		 	<%-- process many on target--%>
								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
  								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
	if([[menu buttonTitleAtIndex:buttonIndex] isEqualToString:@"${lower-case($class2/@name)}s"]){
		NSLog(@"${lower-case($class2/@name)}s clicked");
		ReadAll${$class2/@name}sViewController *readAll${$class2/@name}sViewController = [[ReadAll${$class2/@name}sViewController alloc] initWithNibName:nil bundle:nil];
		readAll${$class2/@name}sViewController.parent=${lower-case($class/@name)};
		int ${lower-case($class/@name)}Id=[${lower-case($class/@name)}.entityID intValue];
		readAll${$class2/@name}sViewController.parentResource=[[self getReadURLWithID:${lower-case($class/@name)}Id] stringByAppendingFormat:@"/${lower-case($class2/@name)}s"];
		[self.navigationController pushViewController:readAll${$class2/@name}sViewController animated:YES];
		[readAll${$class2/@name}sViewController release];
		readAll${$class2/@name}sViewController = nil;
	}
  					  		 			</c:if> 
  					  		 		</c:iterate>
  					  		 	</c:if>	
  							  	</c:if> 
  							  	</c:if>
  							  	</c:if> 
  							  	</c:if>	
  					 	  </c:iterate> 					 	 				 	  
					</c:if> 										
		</c:iterate>
	</c:iterate>
</c:iterate>
}

// Implement viewDidLoad to do additional setup after loading the view, typically from a nib.
- (void)viewDidLoad {
	self.navigationItem.title=@"Read ${$class/@name}";
	
	<%-- process parent class level 2 attributes--%>
	<c:if test="not($class/@name = $parentClass2/@name)">
		<c:iterate select="$parentClass2/Classifier.feature/Attribute" var="attribute">
	 <c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
	  <c:when test="${'$StringID'}" > ${$attribute/@name}TF.text=[${lower-case($class/@name)} ${$attribute/@name}];
	  </c:when> 
	  <c:when test="${'$IntegerID'}" >
	  </c:when>
	  <c:when test="${'$DateID'}" >
	
	  </c:when>
	  <c:when test="${'$BooleanID'}" >
	
	  </c:when>
	  <c:when test="${'$LongID'}" >
	  </c:when>
	  <c:when test="${'$FloatID'}" >
	  </c:when>
	 <c:otherwise> 
	 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
	 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
	 			<%-- add  enums support--%>
	 			</c:if>
	 	</c:iterate>	
	 	  </c:otherwise>
		</c:choose> 
		</c:iterate>
	</c:if>
	<%-- process parent class level 1 attributes--%>
	<c:if test="not($class/@name = $parentClass1/@name)">
		<c:iterate select="$parentClass1/Classifier.feature/Attribute" var="attribute">
	 <c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
	  <c:when test="${'$StringID'}" > ${$attribute/@name}TF.text=[${lower-case($class/@name)} ${$attribute/@name}];
	  </c:when> 
	  <c:when test="${'$IntegerID'}" >
	  </c:when>
	  <c:when test="${'$DateID'}" >
	
	  </c:when>
	  <c:when test="${'$BooleanID'}" >
	
	  </c:when>
	  <c:when test="${'$LongID'}" >
	  </c:when>
	  <c:when test="${'$FloatID'}" >
	  </c:when>
	 <c:otherwise> 
	 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
	 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
	 			<%-- add  enums support--%>
	 			</c:if>
	 	</c:iterate>	
	 	  </c:otherwise>
		</c:choose>  
		</c:iterate>
	</c:if>		
	<%-- process parent class level 0 attributes--%>	
	<c:iterate select="$class/Classifier.feature/Attribute" var="attribute">
	 <c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
	  <c:when test="${'$StringID'}" > ${$attribute/@name}TF.text=[${lower-case($class/@name)} ${$attribute/@name}];
	  </c:when> 
	  <c:when test="${'$IntegerID'}" >
	  </c:when>
	  <c:when test="${'$DateID'}" >
	
	  </c:when>
	  <c:when test="${'$BooleanID'}" >
	
	  </c:when>
	  <c:when test="${'$LongID'}" >
	  </c:when>
	  <c:when test="${'$FloatID'}" >
	  </c:when>
	 <c:otherwise> 
	 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
	 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
	 			<%-- add  enums support--%>
	 			</c:if>
	 	</c:iterate>	
	 	  </c:otherwise>
		</c:choose>  
	</c:iterate>
    [super viewDidLoad];
}

/*
// Override to allow orientations other than the default portrait orientation.
- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation {
    // Return YES for supported orientations
    return (interfaceOrientation == UIInterfaceOrientationPortrait);
}
*/

- (void)didReceiveMemoryWarning {
    // Releases the view if it doesn't have a superview.
    [super didReceiveMemoryWarning];
    
    // Release any cached data, images, etc that aren't in use.
}

- (void)viewDidUnload {
    [super viewDidUnload];
    // Release any retained subviews of the main view.
    // e.g. self.myOutlet = nil;
}

- (NSString*) getReadURLWithID: (int) key {
	NSString* keyStr = [NSString stringWithFormat:@"%d", key];
	NSString *str=[NSString stringWithFormat:@"${lower-case($class/@name)}/read/%@", keyStr];
	NSLog(@"read url:%@",str);
	return [[HttpUtils crudURL] stringByAppendingString:str];
}

- (void)dealloc {
    [super dealloc];
}


@end
