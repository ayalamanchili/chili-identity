<java:format>
package ${$groupID}.android.${$package/@name}.${lower-case($class/@name)};
import ${$groupID}.android.${camelCase($projectName)}Main;
<c:if test="$class/@isDependent = 'false'">  
import android.view.ContextMenu;
import android.widget.AdapterView.AdapterContextMenuInfo;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.Menu;
</c:if>	
import info.yalamanchili.android.http.HttpHelper;
import ${$groupID}.android.R;
import info.yalamanchili.android.widgets.ReadAllPageBar;
import android.util.Log;

import ${$groupID}.entity.${lower-case($package/@name)}.${$class/@name};
<c:if test="$class/@isDependent = 'true'">
	<%-- process compsition associations--%>
	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID"> 
					<%-- process only compositions--%>
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
  					  		 	<%-- check if this is a comp--%>
  					  		 	<c:if test="$association_connection_end2/@aggregation = 'composite'">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
										<%-- check to see if class2 is parent and child--%>
										<c:if test="not($class2/@parent1 = $class2/@name)">
										<c:if test="not($class2/@hasChildren = $class2/@name)">
										import	${$groupID}.entity.${$package/@name}.${$class2/@name};
										</c:if>
										<%-- has parent and no children--%>
										<c:if test="$class2/@hasChildren = $class2/@name">
										import	${$groupID}.entity.${$package/@name}.${$class2/@name};
										</c:if>
										</c:if>
										<%-- no parent and has children--%>
										 <c:if test="$class2/@parent1 = $class2/@name">
										 <c:if test="not($class2/@hasChildren = $class2/@name)">
										import	${$groupID}.entity.${$package/@name}.${$class2/@name};
										 </c:if>
										 </c:if>
  					  		 			</c:if> 
  					  		 		</c:iterate>
  					  		 	 </c:if> 	
  							  	</c:if> 
  					 	  </c:iterate> 					 	 				 	  
				</c:if>												
		</c:iterate>
	</c:iterate>
</c:iterate>
</c:if>
import java.util.ArrayList;
import java.util.List;
import info.yalamanchili.android.http.AsyncHttpGet;

import android.widget.Button;
import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.ListView;
import android.widget.TextView;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.view.View.OnClickListener;

public class ReadAll${$class/@name}s extends Activity implements OnItemClickListener,OnClickListener{
	private Integer pageOffSet = 0;
	private ArrayList<${$class/@name}> ${lower-case($class/@name)}s = new ArrayList<${$class/@name}>();
	private ListView ${lower-case($class/@name)}ListView;
	private Button create;
	private Button nextPage;
	private Button previousPage;
	private ${$class/@name}Adapter ${lower-case($class/@name)}Adapter;
	
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_CUSTOM_TITLE);
		setContentView(R.layout.entity_readall);
		customizeTitle();
		getControls();
		setListeners();
		int resID = R.layout.readall_list;
		${lower-case($class/@name)}Adapter = new ${$class/@name}Adapter(ReadAll${$class/@name}s.this, resID, ${lower-case($class/@name)}s);
		${lower-case($class/@name)}ListView.setAdapter(${lower-case($class/@name)}Adapter);
<c:if test="$class/@isDependent = 'false'"> 		
		registerForContextMenu(${lower-case($class/@name)}ListView);
</c:if>		
	}
	
	public void customizeTitle(){
		getWindow().setFeatureInt(Window.FEATURE_CUSTOM_TITLE, R.layout.${lower-case($projectName)}_title_bar);
	     TextView mytitletext = (TextView) findViewById(R.id.${lower-case($projectName)}_title_text);
	     mytitletext.setText("Read All ${$class/@name}s Panel");	
	}
	
	public void getControls() {
	ReadAllPageBar pageBar=	(ReadAllPageBar)findViewById(R.id.read_all_page_bar);
		create=pageBar.getCreateButton();
		nextPage=pageBar.getNextPageButton();
		previousPage=pageBar.getPreviousPageButton();
		${lower-case($class/@name)}ListView = (ListView) findViewById(R.id.readall_listview);
	}
	
	public void setListeners() {
		create.setOnClickListener(this);
		nextPage.setOnClickListener(this);
		previousPage.setOnClickListener(this);
		${lower-case($class/@name)}ListView.setOnItemClickListener(this);
	}

	public void onItemClick(AdapterView<?> parent, View arg1, int position,
			long id) {
		${$class/@name} ${lower-case($class/@name)} = (${$class/@name}) parent.getItemAtPosition(position);
		Intent intent = new Intent(this, Read${$class/@name}.class);
		intent.putExtra("id", ${lower-case($class/@name)}.getId());
		startActivity(intent);
	}
	
<c:if test="$class/@isDependent = 'false'">  
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		MenuInflater inflater = getMenuInflater();
		inflater.inflate(R.menu.read_all_search_menu, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case R.id.search:
			Intent intent = new Intent(this, Search${$class/@name}.class);
			startActivity(intent);
			break;
		}
		return true;
	}
	
	@Override
	public void onCreateContextMenu(ContextMenu menu, View v,
			ContextMenuInfo menuInfo) {
		super.onCreateContextMenu(menu, v, menuInfo);
		MenuInflater inflater = getMenuInflater();
		inflater.inflate(R.menu.${lower-case($class/@name)}_menu, menu);
	}
	
	@Override
	public boolean onContextItemSelected(MenuItem item) {
		AdapterContextMenuInfo info = (AdapterContextMenuInfo) item
				.getMenuInfo();
		Log.d("aaaaaaaaaaaaaaaaaaaaaa", "in contes sel");
		return true;
	}
</c:if>	

	
	public String getReadALLURL(Integer pageOffSet, Integer pageSize) {
	return ${camelCase($projectName)}Main.baseURL + "${lower-case($class/@name)}/readall/" + pageOffSet.toString()
				+ "/" + getString(R.string.page_size);
	}
	
	public void onClick(View arg0) {
Object parent = getIntent().getSerializableExtra("parent");	
		if (arg0.getId() == create.getId()) {
			if(parent!=null){
	<%-- process compsition associations--%>
	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID"> 
					<%-- process only compositions--%>
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
  					  		 	<%-- check if this is a comp--%>
  					  		 	<c:if test="$association_connection_end2/@aggregation = 'composite'">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
										<%-- check to see if class2 is parent and child--%>
										<c:if test="not($class2/@parent1 = $class2/@name)">
										<c:if test="not($class2/@hasChildren = $class2/@name)">
										if (arg0.getId() == create.getId()) {
												Intent addIntent = new Intent(this, Create${$class/@name}.class);
												${$class/@name} ${lower-case($class/@name)} = new ${$class/@name}();
												${lower-case($class/@name)}.set${$class2/@name}((${$class2/@name}) parent);
												addIntent.putExtra("entity", ${lower-case($class/@name)});
												startActivity(addIntent);
											}
										</c:if>
										<%-- has parent and no children--%>
										<c:if test="$class2/@hasChildren = $class2/@name">
										if (arg0.getId() == create.getId()) {
												Intent addIntent = new Intent(this, Create${$class/@name}.class);
												${$class/@name} ${lower-case($class/@name)} = new ${$class/@name}();
												${lower-case($class/@name)}.set${$class2/@name}((${$class2/@name}) parent);
												addIntent.putExtra("entity", ${lower-case($class/@name)});
												startActivity(addIntent);
											}
										</c:if>
										</c:if>
										<%-- no parent and has children--%>
										 <c:if test="$class2/@parent1 = $class2/@name">
										 <c:if test="not($class2/@hasChildren = $class2/@name)">
										if (arg0.getId() == create.getId()) {
												Intent addIntent = new Intent(this, Create${$class/@name}.class);
												${$class/@name} ${lower-case($class/@name)} = new ${$class/@name}();
												${lower-case($class/@name)}.set${$class2/@name}((${$class2/@name}) parent);
												addIntent.putExtra("entity", ${lower-case($class/@name)});
												startActivity(addIntent);
											}
										 </c:if>
										 </c:if>
  					  		 			</c:if> 
  					  		 		</c:iterate>
  					  		 	 </c:if> 	
  							  	</c:if> 
  					 	  </c:iterate> 					 	 				 	  
				</c:if>												
		</c:iterate>
	</c:iterate>
</c:iterate>
		}
		else{
		Intent createIntent = new Intent(this, Create${$class/@name}.class);
		startActivity(createIntent);
		}
	}
	
		if (arg0.getId() == nextPage.getId()) {
			loadNextPage();
		}
		if (arg0.getId() == previousPage.getId()) {
			loadPreviousPage();
		}
	}
	
	protected void loadNextPage() {
		pageOffSet = pageOffSet + new Integer(getString(R.string.page_size));
		loadPage(pageOffSet, new Integer(getString(R.string.page_size)));
	}

	protected void loadPreviousPage() {
		if (pageOffSet >= new Integer(getString(R.string.page_size))) {
			pageOffSet = pageOffSet
					- new Integer(getString(R.string.page_size));
			loadPage(pageOffSet, new Integer(getString(R.string.page_size)));
		}
	}
	
	protected void loadPage(int pageOffSet, int pageSize) {
		${lower-case($class/@name)}Adapter.clear();
		String intent = getIntent().getStringExtra("intent");
		if ("SEARCH".equals(intent)) {
			new AsyncHttpGet(this) {
				@Override
				protected void onResponse(String result) {
					Object obj = HttpHelper.xstream.fromXML(result);
					if (obj instanceof List<?>) {
						for (${$class/@name} entity : (List<${$class/@name}>) HttpHelper.xstream
								.fromXML(result)) {
							${lower-case($class/@name)}Adapter.add(entity);
						}
					}
				}
			}.execute(getSearchURL());
		} 
				
	String parentResource=getIntent().getStringExtra("resource");
	if(parentResource!=null){
			new AsyncHttpGet(this) {
				@Override
				protected void onResponse(String result) {
					Object obj = HttpHelper.xstream.fromXML(result);
					if (obj instanceof List<?>) {
						for (${$class/@name} entity : (List<${$class/@name}>) HttpHelper.xstream
								.fromXML(result)) {
							${lower-case($class/@name)}Adapter.add(entity);
						}
					}
				}
			}.execute(parentResource);
			return;
		}
		new AsyncHttpGet(this) {
			@Override
			protected void onResponse(String result) {
				Object obj = HttpHelper.xstream.fromXML(result);
				if (obj instanceof List<?>) {
					for (${$class/@name} entity : (List<${$class/@name}>) HttpHelper.xstream
							.fromXML(result)) {
						${lower-case($class/@name)}Adapter.add(entity);
					}
				}
			}
		}.execute(getReadALLURL(pageOffSet, pageSize));	
	}

	protected String getSearchURL() {
		String searchText = getIntent().getStringExtra("searchText");
		return ${camelCase($projectName)}Main.baseURL + "${lower-case($class/@name)}/search/" + searchText;
	}
		
	@Override
	public void onStart() {
		super.onStart();
		Log.d("info.yalamacnhili.android","in start");
		main();
	}
	
	public void main() {
		loadPage(0, new Integer(getString(R.string.page_size)));
	}
}
</java:format>