
<java:format>
<f:bundle basename="templates/resources/messages">
<f:message>copyright</f:message>
package ${$packageName}.${lower-case($class/@name)};
<c:setVariable select="$class/@xmi.id" var="classID"/>
import ${$webPackage}${camelCase($projectName)}Welcome;
import info.yalamanchili.gwt.composite.ReadCompositey;
import info.yalamanchili.gwt.utils.Alignment;
import info.yalamanchili.gwt.fields.DataType;
import info.yalamanchili.gwt.rf.GenericRequest;
import info.yalamanchili.gwt.composite.OptionsComposite.OptionsCompositeType;
import ${$groupID}.entity.${lower-case($package/@name)}.${$class/@name};
<f:message>generated.class.comment</f:message>
public class Read${$class/@name}Panely extends ReadCompositey<${$class/@name}Proxy> {
<f:message>generated.comment</f:message>
private static Read${$class/@name}Panely read${$class/@name}Panel;
<f:message>generated.comment</f:message>
	${$class/@name}OptionsPanel options = new ${$class/@name}OptionsPanel(OptionsCompositeType.CRUD);
<f:message>generated.comment</f:message>
	public static Read${$class/@name}Panely instance() {
		return read${$class/@name}Panel;
	}
<f:message>generated.comment</f:message>
	public Read${$class/@name}Panely(Long id) {
		read${$class/@name}Panel = this;
		initReadComposite(id, "${$groupID}.entity.${lower-case($package/@name)}.${$class/@name}", ${camelCase($projectName)}Welcome.constants);
	}
<f:message>generated.comment</f:message>	
	@Override
	public GenericRequest<${$class/@name}Proxy> getRequest() {
		return ${camelCase($projectName)}Welcome.instance().requestFactory.${lower-case($class/@name)}Request();
	}	
	
<f:message>generated.comment</f:message>
	@Override
	protected void populateFieldsFromProxy(${$class/@name}Proxy ${lower-case($class/@name)}) {
			<%-- process parent class level 2 attributes--%>
			<c:if test="not($class/@name = $parentClass2/@name)">
			<c:iterate select="$parentClass2/Classifier.feature/Attribute" var="attribute">
				<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
				 <c:when test="${'$StringID'}" > setField("${$attribute/@name}",${lower-case($class/@name)}.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$IntegerID'}" >  setField("${$attribute/@name}",${lower-case($class/@name)}.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$DateID'}" >  setField("${$attribute/@name}",${lower-case($class/@name)}.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$BooleanID'}" >  setField("${$attribute/@name}",${lower-case($class/@name)}.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$LongID'}" >  setField("${$attribute/@name}",${lower-case($class/@name)}.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$FloatID'}" >  setField("${$attribute/@name}",${lower-case($class/@name)}.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$CurrencyID'}" >  setField("${$attribute/@name}",${lower-case($class/@name)}.get${ uppercaseFirst($attribute/@name)}(),true); 
				 </c:when>				 
				 <c:when test="${'$ImageID'}" >  setImageField("${$attribute/@name}",${camelCase($projectName)}Welcome.constants
								.imagesTargetDirectory() + ${lower-case($class/@name)}.get${ uppercaseFirst($attribute/@name)}(),"400","400"); 
				 </c:when>
				 <c:when test="${'$RichTextID'}" > setRichTextField("${$attribute/@name}",${lower-case($class/@name)}.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>				 				 
					 <c:otherwise>
					 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
					 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
								setEnumFeild("${$attribute/@name}", ${lower-case($class/@name)}.get${ uppercaseFirst($attribute/@name)}().toString());
					 			</c:if>
					 	</c:iterate>					 						
		 			</c:otherwise>					 
		 		</c:choose>
			</c:iterate>
			</c:if>
			<%-- process parent class level 1 attributes--%>
			<c:if test="not($class/@name = $parentClass1/@name)">
			<c:iterate select="$parentClass1/Classifier.feature/Attribute" var="attribute">
				<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
				 <c:when test="${'$StringID'}" > setField("${$attribute/@name}",${lower-case($class/@name)}.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$IntegerID'}" >  setField("${$attribute/@name}",${lower-case($class/@name)}.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$DateID'}" >  setField("${$attribute/@name}",${lower-case($class/@name)}.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$BooleanID'}" >  setField("${$attribute/@name}",${lower-case($class/@name)}.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$LongID'}" >  setField("${$attribute/@name}",${lower-case($class/@name)}.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$FloatID'}" >  setField("${$attribute/@name}",${lower-case($class/@name)}.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$CurrencyID'}" >  setField("${$attribute/@name}",${lower-case($class/@name)}.get${ uppercaseFirst($attribute/@name)}(),true); 
				 </c:when>				 
				 <c:when test="${'$ImageID'}" >  setImageField("${$attribute/@name}",${camelCase($projectName)}Welcome.constants
								.imagesTargetDirectory() + ${lower-case($class/@name)}.get${ uppercaseFirst($attribute/@name)}(),"400","400"); 
				 </c:when>	
				 <c:when test="${'$RichTextID'}" > setRichTextField("${$attribute/@name}",${lower-case($class/@name)}.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>				 		 
					 <c:otherwise>
					 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
					 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
								setEnumFeild("${$attribute/@name}", ${lower-case($class/@name)}.get${ uppercaseFirst($attribute/@name)}().toString());
					 			</c:if>
					 	</c:iterate>					
		 			</c:otherwise>
		 		</c:choose>
			</c:iterate>
			</c:if>						
			<%-- process base class--%>			
			<c:iterate select="$class/Classifier.feature/Attribute" var="attribute">
				<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
				 <c:when test="${'$StringID'}" > setField("${$attribute/@name}",${lower-case($class/@name)}.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$IntegerID'}" >  setField("${$attribute/@name}",${lower-case($class/@name)}.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$DateID'}" >  setField("${$attribute/@name}",${lower-case($class/@name)}.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$BooleanID'}" >  setField("${$attribute/@name}",${lower-case($class/@name)}.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$LongID'}" >  setField("${$attribute/@name}",${lower-case($class/@name)}.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$FloatID'}" >  setField("${$attribute/@name}",${lower-case($class/@name)}.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>
				 <c:when test="${'$CurrencyID'}" >  setField("${$attribute/@name}",${lower-case($class/@name)}.get${ uppercaseFirst($attribute/@name)}(),true); 
				 </c:when>				 
				 <c:when test="${'$ImageID'}" >  setImageField("${$attribute/@name}",${camelCase($projectName)}Welcome.constants
								.imagesTargetDirectory() + ${lower-case($class/@name)}.get${ uppercaseFirst($attribute/@name)}(),"400","400"); 
				 </c:when>	
				 <c:when test="${'$RichTextID'}" > setRichTextField("${$attribute/@name}",${lower-case($class/@name)}.get${ uppercaseFirst($attribute/@name)}()); 
				 </c:when>				 		 
					 <c:otherwise>
					 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
					 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
								setEnumFeild("${$attribute/@name}", ${lower-case($class/@name)}.get${ uppercaseFirst($attribute/@name)}().toString());
					 			</c:if>
					 	</c:iterate>					
		 			</c:otherwise>
		 		</c:choose>
			</c:iterate>
			<%-- process dropdowns one to one and many to one unidirectional--%>
			<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
				<c:iterate select="$association/Association.connection" var="association_connection">
					<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
						<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
					<%-- check is the association is corresponding to the class  --%>
								<c:if test="$association_connection_end_classID = $classID"> 
			  					   	<%-- iterate over the iterations ends  --%>
			  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
			  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
			  					  	 	<%-- get the end secondary end with other class  --%>
			  					  		 	<c:if test="not($association_connection_end/@xmi.id = $association_connection_end2/@xmi.id)"> 
			  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
			  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
			  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 			  		 			
			  					  		 			<%-- This processes the JPA realations @OneToMany, @ManyToMany, @OneToOne etc--%>
			  					  		 			<%-- check target is one side--%>
			  					  		 			<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 1">
			  					    						<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = 1">
  					    						<%--process only non composites --%>
  					    						<c:if test="not($association_connection_end2/@aggregation = 'composite')">			  					    						
			  					    							setDropDownField("${lower-case($class2/@name)}", ${lower-case($class/@name)}.get${$class2/@name}());
			  					  		 			</c:if>		
			  					  		 			</c:if>	
			  					  		 			</c:if>	
			  					  		 			</c:if> 
			  					  		 		</c:iterate>
			  							  	</c:if> 
			  					 	  </c:iterate> 					 	 				 	  
								</c:if> 											
					</c:iterate>
				</c:iterate>
			</c:iterate>	
	}
<f:message>generated.comment</f:message>
	@Override
	protected void addListeners() {
		// TODO Auto-generated method stub

	}
<f:message>generated.comment</f:message>
	@Override
	protected void addWidgetsBeforeCaptionPanel() {
		basePanel.add(options);

	}
<f:message>generated.comment</f:message>
	@Override
	protected void addWidgets() {
		<%-- process parent class level 2 attributes--%>
	<c:if test="not($class/@name = $parentClass2/@name)">
				<c:iterate select="$parentClass2/Classifier.feature/Attribute" var="attribute">
				<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
				 <c:when test="${'$StringID'}" > addField("${$attribute/@name}", true, ${$attribute/@isRequired}, DataType.STRING_FIELD); 
				 </c:when>
				 <c:when test="${'$IntegerID'}" > addField("${$attribute/@name}", true, ${$attribute/@isRequired}, DataType.INTEGER_FIELD); 
				 </c:when>
				 <c:when test="${'$DateID'}" > addField("${$attribute/@name}", true, ${$attribute/@isRequired}, DataType.DATE_FIELD);  
				 </c:when>
				 <c:when test="${'$BooleanID'}" > addField("${$attribute/@name}", true, ${$attribute/@isRequired}, DataType.BOOLEAN_FIELD); 
				 </c:when>
				 <c:when test="${'$LongID'}" > addField("${$attribute/@name}", true, ${$attribute/@isRequired}, DataType.LONG_FIELD); 
				 </c:when>
				 <c:when test="${'$FloatID'}" > addField("${$attribute/@name}", true, ${$attribute/@isRequired}, DataType.FLOAT_FIELD); 
				 </c:when>
				 <c:when test="${'$ImageID'}" > addField("${$attribute/@name}", true, ${$attribute/@isRequired}, DataType.IMAGE_FIELD); 
				 </c:when>
				 <c:when test="${'$RichTextID'}" > addField("${$attribute/@name}", true, ${$attribute/@isRequired}, DataType.RICH_TEXT_AREA); 
				 </c:when>
				 <c:when test="${'$CurrencyID'}" > addField("${$attribute/@name}", true, ${$attribute/@isRequired}, DataType.CURRENCY_FIELD); 
				 </c:when>				 					 				 
					 <c:otherwise>
					 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
					 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
								addEnumField("${$attribute/@name}", true, ${$attribute/@isRequired}, "${$attribute/@name}", ${$class/@name}.class.getName());
					 			</c:if>
					 	</c:iterate>
		 			</c:otherwise>
		 		</c:choose>
			</c:iterate>
	</c:if>
	<%-- process parent class level 1 attributes--%>
	<c:if test="not($class/@name = $parentClass1/@name)">
				<c:iterate select="$parentClass1/Classifier.feature/Attribute" var="attribute">
				<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
				 <c:when test="${'$StringID'}" > addField("${$attribute/@name}", true, ${$attribute/@isRequired}, DataType.STRING_FIELD); 
				 </c:when>
				 <c:when test="${'$IntegerID'}" > addField("${$attribute/@name}", true, ${$attribute/@isRequired}, DataType.INTEGER_FIELD); 
				 </c:when>
				 <c:when test="${'$DateID'}" > addField("${$attribute/@name}", true, ${$attribute/@isRequired}, DataType.DATE_FIELD);  
				 </c:when>
				 <c:when test="${'$BooleanID'}" > addField("${$attribute/@name}", true, ${$attribute/@isRequired}, DataType.BOOLEAN_FIELD); 
				 </c:when>
				 <c:when test="${'$LongID'}" > addField("${$attribute/@name}", true, ${$attribute/@isRequired}, DataType.LONG_FIELD); 
				 </c:when>
				 <c:when test="${'$FloatID'}" > addField("${$attribute/@name}", true, ${$attribute/@isRequired}, DataType.FLOAT_FIELD); 
				 </c:when>
				 <c:when test="${'$ImageID'}" > addField("${$attribute/@name}", true, ${$attribute/@isRequired}, DataType.IMAGE_FIELD); 
				 </c:when>	
				 <c:when test="${'$RichTextID'}" > addField("${$attribute/@name}", true, ${$attribute/@isRequired}, DataType.RICH_TEXT_AREA); 
				 </c:when>
				 <c:when test="${'$CurrencyID'}" > addField("${$attribute/@name}", true, ${$attribute/@isRequired}, DataType.CURRENCY_FIELD); 
				 </c:when>				 				 			 
					 <c:otherwise>
					 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
					 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
								addEnumField("${$attribute/@name}", true, ${$attribute/@isRequired}, "${$attribute/@name}", ${$class/@name}.class.getName());
					 			</c:if>
					 	</c:iterate>					 
		 			</c:otherwise>
		 		</c:choose>
			</c:iterate>
	</c:if>
	<%-- process baseClass--%>
			<c:iterate select="$class/Classifier.feature/Attribute" var="attribute">
				<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
				 <c:when test="${'$StringID'}" > addField("${$attribute/@name}", true, ${$attribute/@isRequired}, DataType.STRING_FIELD); 
				 </c:when>
				 <c:when test="${'$IntegerID'}" > addField("${$attribute/@name}", true, ${$attribute/@isRequired}, DataType.INTEGER_FIELD); 
				 </c:when>
				 <c:when test="${'$DateID'}" > addField("${$attribute/@name}", true, ${$attribute/@isRequired}, DataType.DATE_FIELD);  
				 </c:when>
				 <c:when test="${'$BooleanID'}" > addField("${$attribute/@name}", true, ${$attribute/@isRequired}, DataType.BOOLEAN_FIELD); 
				 </c:when>
				 <c:when test="${'$LongID'}" > addField("${$attribute/@name}", true, ${$attribute/@isRequired}, DataType.LONG_FIELD); 
				 </c:when>
				 <c:when test="${'$FloatID'}" > addField("${$attribute/@name}", true, ${$attribute/@isRequired}, DataType.FLOAT_FIELD); 
				 </c:when>
				 <c:when test="${'$ImageID'}" > addField("${$attribute/@name}", true, ${$attribute/@isRequired}, DataType.IMAGE_FIELD); 
				 </c:when>	
				 <c:when test="${'$RichTextID'}" > addField("${$attribute/@name}", true, ${$attribute/@isRequired}, DataType.RICH_TEXT_AREA); 
				 </c:when>	
				 <c:when test="${'$CurrencyID'}" > addField("${$attribute/@name}", true, ${$attribute/@isRequired}, DataType.CURRENCY_FIELD); 
				 </c:when>				 			 			 
					 <c:otherwise>
					 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
					 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
								addEnumField("${$attribute/@name}", true, ${$attribute/@isRequired}, "${$attribute/@name}", ${$class/@name}.class.getName());
					 			</c:if>
					 	</c:iterate>
		 			</c:otherwise>
		 		</c:choose>
			</c:iterate>
			
			<%-- process dropdowns one to one and many to one --%>
			<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
				<c:iterate select="$association/Association.connection" var="association_connection">
					<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
						<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
					<%-- check is the association is corresponding to the class  --%>
								<c:if test="$association_connection_end_classID = $classID"> 
			  					   	<%-- iterate over the iterations ends  --%>
			  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
			  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
			  					  	 	<%-- get the end secondary end with other class  --%>
			  					  		 	<c:if test="not($association_connection_end/@xmi.id = $association_connection_end2/@xmi.id)"> 
			  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
			  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
			  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 			  		 			
			  					  		 			<%-- This processes the JPA realations @OneToMany, @ManyToMany, @OneToOne etc--%>
			  					  		 			<%-- check target is one side--%>
			  					  		 			<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 1">
			  					    						<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = 1">
  					    						<%--process only non composites --%>
  					    						<c:if test="not($association_connection_end2/@aggregation = 'composite')">			  					    						
			  					    							addField("${lower-case($class2/@name)}", true, true , DataType.DROPDOWN_FIELD);
			  					  		 			</c:if>		
			  					  		 			</c:if>	
			  					  		 			</c:if>	
			  					  		 			</c:if> 
			  					  		 		</c:iterate>
			  							  	</c:if> 
			  					 	  </c:iterate> 					 	 				 	  
								</c:if> 											
					</c:iterate>
				</c:iterate>
			</c:iterate>	
	}
<f:message>generated.comment</f:message>
	@Override
	protected void configure() {

	}
}
</f:bundle>
</java:format>