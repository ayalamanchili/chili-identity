
<java:format>
<f:bundle basename="templates/resources/messages">
<f:message>copyright</f:message>
<c:setVariable select="$class/@xmi.id" var="classID"/>
package ${$packageName}.${lower-case($class/@name)};
import info.yalamanchili.gwt.composite.ReadAllCompositey.ReadAllTableType;

<%--process enums from base and lavel1,2 parents --%>
	<%-- process parent class level 2 attributes--%>
	<c:if test="not($class/@name = $parentClass2/@name)">
				<c:iterate select="$parentClass2/Classifier.feature/Attribute" var="attribute">
				<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
					 <c:otherwise>
					 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
					 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
								import ${$groupID}.entity.${lower-case($package/@name)}.${ uppercaseFirst($enumeration/@name)};
					 			</c:if>
					 	</c:iterate>					 
		 			</c:otherwise>
		 		</c:choose>
			</c:iterate>
	</c:if>
	<%-- process parent class level 1 attributes--%>
	<c:if test="not($class/@name = $parentClass1/@name)">
				<c:iterate select="$parentClass1/Classifier.feature/Attribute" var="attribute">
				<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
					 <c:otherwise>
					 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
					 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
							import ${$groupID}.entity.${lower-case($package/@name)}.${ uppercaseFirst($enumeration/@name)};
					 			</c:if>
					 	</c:iterate>					 
		 			</c:otherwise>
		 		</c:choose>
			</c:iterate>
	</c:if>
	<%--process premitive data types of base current class --%>
			<c:iterate select="$class/Classifier.feature/Attribute" var="attribute">
				<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
					 <c:otherwise>
					 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
					 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
								import ${$groupID}.entity.${lower-case($package/@name)}.${ uppercaseFirst($enumeration/@name)};
					 			</c:if>
					 	</c:iterate>					 
		 			</c:otherwise>
		 		</c:choose>
			</c:iterate>	
	<%-- process compsition associations--%>
	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID"> 
					<%-- process only compositions--%>
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
  					  		 	<%-- check if this is a comp--%>
  					  		 	<c:if test="$association_connection_end2/@aggregation = 'composite'">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
  					  		 			
  					  		 				<%-- check if this is a parent--%>
					  					  	<c:setVariable select="$class2/@xmi.id" var="isParent"/>
											<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Generalization" var="generalization">
												<c:if test="$generalization/Generalization.parent/Class/@xmi.idref = $class2/@xmi.id">
												<%-- update flag variable--%>
												<c:setVariable select="$class2/@name" var="isParent"/>
												</c:if>															
											</c:iterate>
											<%-- if class is a Parent class--%>
											import ${$groupID}.entity.${lower-case($package/@name)}.${$class2/@name};
							    		 	<c:if test="$isParent = $class2/@name">  
								    		 	import ${$groupID}.client.${lower-case($package/@name)}.${lower-case($class2/@name)}.TreeAbstract${$class2/@name}Panely;
								    		 	import ${$groupID}.client.${lower-case($package/@name)}.${lower-case($class2/@name)}.${$class2/@name}Proxy;
											</c:if>
											<%-- if class is a regular  class--%>
											import ${$groupID}.entity.${lower-case($package/@name)}.${$class2/@name};
											<c:if test="$isParent = $class2/@xmi.id">  
											import ${$groupID}.client.${lower-case($package/@name)}.${lower-case($class2/@name)}.Tree${$class2/@name}Panely;
											import ${$groupID}.client.${lower-case($package/@name)}.${lower-case($class2/@name)}.${$class2/@name}Proxy;
											</c:if>	  					  		 			
  					  		 			</c:if> 
  					  		 		</c:iterate>
  					  		 	 </c:if> 	
  							  	</c:if> 
  					 	  </c:iterate> 					 	 				 	  
				</c:if>												
		</c:iterate>
	</c:iterate>
</c:iterate>

<%-- process dropdowns one tone and many to one --%>
<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID"> 
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 			  		 			
  					  		 			<%-- This processes the JPA realations @OneToMany, @ManyToMany, @OneToOne etc--%>
  					  		 			<%-- check target is one side--%>
  					  		 			<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 1">
  					    						<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = 1">
  					    							import ${$groupID}.client.${lower-case($package/@name)}.${lower-case($class2/@name)}.Select${$class2/@name}Panely;
  					    						<%--check for one to one --%>	
  					    						<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 1">
  					    						<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = 1">
  					    							import ${$groupID}.client.${lower-case($package/@name)}.${lower-case($class2/@name)}.Select${$class2/@name}Panely;
  					  		 					</c:if>	
  					  		 					</c:if>	
  					  		 			</c:if>	
  					  		 			</c:if>	
  					  		 			</c:if> 
  					  		 		</c:iterate>
  							  	</c:if> 
  					 	  </c:iterate> 					 	 				 	  
					</c:if> 											
		</c:iterate>
	</c:iterate>
</c:iterate>

import info.yalamanchili.gwt.callback.ALAsyncCallback;
import info.yalamanchili.gwt.composite.CreateCompositey;
import info.yalamanchili.gwt.widgets.ResponseStatusWidget;
import ${$webPackage}${camelCase($projectName)}Welcome;
import ${$groupID}.entity.${lower-case($package/@name)}.${$class/@name};
import info.yalamanchili.gwt.fields.DataType;
import info.yalamanchili.gwt.rf.GenericRequest;

<f:message>generated.class.comment</f:message>
public class Create${$class/@name}Panely extends CreateCompositey<${$class/@name}Proxy> {
<%-- process dropdowns one tone and many to one --%>
<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID"> 
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end/@xmi.id = $association_connection_end2/@xmi.id)"> 
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 			  		 			
  					  		 			<%-- This processes the JPA realations @OneToMany, @ManyToMany, @OneToOne etc--%>
  					  		 			<%-- check target is one side--%>
  					  		 			<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 1">
  					    						<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = 1">
  					    						<%--process only non composites --%>
  					    						<c:if test="not($association_connection_end2/@aggregation = 'composite')">
<f:message>generated.comment</f:message>  					    						
  					    							Select${$class2/@name}Panely select${$class2/@name}Panel = new Select${$class2/@name}Panely("${$class2/@name}");
  					  		 					</c:if>	
  					  		 			</c:if>	
  					  		 			</c:if>	
  					  		 			</c:if> 
  					  		 		</c:iterate>
  							  	</c:if> 
  					 	  </c:iterate> 					 	 				 	  
					</c:if> 											
		</c:iterate>
	</c:iterate>
</c:iterate>

<f:message>generated.comment</f:message>
public Create${$class/@name}Panely(CreateCompositeType type) {
	super(type);
		initCreateComposite(${$class/@name}.class.getName(), ${camelCase($projectName)}Welcome.constants);
	}
	
<f:message>generated.comment</f:message>
	@Override
	protected void addListeners() {
		// TODO Auto-generated method stub

	}
<f:message>generated.comment</f:message>
	@Override
	protected void addWidgetsBeforeCaptionPanel() {
		// TODO Auto-generated method stub

	}
<f:message>generated.comment</f:message>
	@Override
	protected void addWidgets() {
	<%-- process parent class level 2 attributes--%>
	<c:if test="not($class/@name = $parentClass2/@name)">
				<c:iterate select="$parentClass2/Classifier.feature/Attribute" var="attribute">
				<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
				 <c:when test="${'$StringID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.STRING_FIELD); 
				 </c:when>
				 <c:when test="${'$IntegerID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.INTEGER_FIELD); 
				 </c:when>
				 <c:when test="${'$DateID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.DATE_FIELD);  
				 </c:when>
				 <c:when test="${'$BooleanID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.BOOLEAN_FIELD); 
				 </c:when>
				 <c:when test="${'$LongID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.LONG_FIELD); 
				 </c:when>
				 <c:when test="${'$FloatID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.FLOAT_FIELD); 
				 </c:when>
				 <c:when test="${'$ImageID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.IMAGE_FIELD); 
				 </c:when>
				 <c:when test="${'$RichTextID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.RICH_TEXT_AREA); 
				 </c:when>
				 <c:when test="${'$CurrencyID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.CURRENCY_FIELD); 
				 </c:when>				 					 				 
					 <c:otherwise>
					 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
					 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
								addEnumField("${$attribute/@name}", false, ${$attribute/@isRequired}, "${$attribute/@name}", ${$class/@name}.class.getName());
					 			</c:if>
					 	</c:iterate>					 
		 			</c:otherwise>
		 		</c:choose>
			</c:iterate>
	</c:if>
	<%-- process parent class level 1 attributes--%>
	<c:if test="not($class/@name = $parentClass1/@name)">
				<c:iterate select="$parentClass1/Classifier.feature/Attribute" var="attribute">
				<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
				 <c:when test="${'$StringID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.STRING_FIELD); 
				 </c:when>
				 <c:when test="${'$IntegerID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.INTEGER_FIELD); 
				 </c:when>
				 <c:when test="${'$DateID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.DATE_FIELD);  
				 </c:when>
				 <c:when test="${'$BooleanID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.BOOLEAN_FIELD); 
				 </c:when>
				 <c:when test="${'$LongID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.LONG_FIELD); 
				 </c:when>
				 <c:when test="${'$FloatID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.FLOAT_FIELD); 
				 </c:when>
				 <c:when test="${'$ImageID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.IMAGE_FIELD); 
				 </c:when>
				 <c:when test="${'$RichTextID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.RICH_TEXT_AREA); 
				 </c:when>	
				 <c:when test="${'$CurrencyID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.CURRENCY_FIELD); 
				 </c:when>				 				 				 
					 <c:otherwise>
					 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
					 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
								addEnumField("${$attribute/@name}", false, ${$attribute/@isRequired}, "${$attribute/@name}", ${$class/@name}.class.getName());
					 			</c:if>
					 	</c:iterate>					 
		 			</c:otherwise>
		 		</c:choose>
			</c:iterate>
	</c:if>
	<%--process premitive data types of base current class --%>
			<c:iterate select="$class/Classifier.feature/Attribute" var="attribute">
				<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
				 <c:when test="${'$StringID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.STRING_FIELD); 
				 </c:when>
				 <c:when test="${'$IntegerID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.INTEGER_FIELD); 
				 </c:when>
				 <c:when test="${'$DateID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.DATE_FIELD);  
				 </c:when>
				 <c:when test="${'$BooleanID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.BOOLEAN_FIELD); 
				 </c:when>
				 <c:when test="${'$LongID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.LONG_FIELD); 
				 </c:when>
				 <c:when test="${'$FloatID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.FLOAT_FIELD); 
				 </c:when>
				 <c:when test="${'$ImageID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.IMAGE_FIELD); 
				 </c:when>
				 <c:when test="${'$RichTextID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.RICH_TEXT_AREA); 
				 </c:when>
				 <c:when test="${'$CurrencyID'}" > addField("${$attribute/@name}", false, ${$attribute/@isRequired}, DataType.CURRENCY_FIELD); 
				 </c:when>				 					 				 
					 <c:otherwise>
					 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
					 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
								addEnumField("${$attribute/@name}", false, ${$attribute/@isRequired}, "${$attribute/@name}", ${$class/@name}.class.getName());
					 			</c:if>
					 	</c:iterate>					 
		 			</c:otherwise>
		 		</c:choose>
			</c:iterate>
			
			<%-- process dropdowns one to one and many to one unidirectional--%>
			<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
				<c:iterate select="$association/Association.connection" var="association_connection">
					<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
						<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
					<%-- check is the association is corresponding to the class  --%>
								<c:if test="$association_connection_end_classID = $classID"> 
			  					   	<%-- iterate over the iterations ends  --%>
			  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
			  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
			  					  	 	<%-- get the end secondary end with other class  --%>
			  					  		 	<c:if test="not($association_connection_end/@xmi.id = $association_connection_end2/@xmi.id)"> 
			  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
			  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
			  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 			  		 			
			  					  		 			<%-- This processes the JPA realations @OneToMany, @ManyToMany, @OneToOne etc--%>
			  					  		 			<%-- check target is one side--%>
			  					  		 			<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 1">
			  					    						<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = 1">
  					    						<%--process only non composites --%>
  					    						<c:if test="not($association_connection_end2/@aggregation = 'composite')">			  					    						
			  					    							addDropDown(select${$class2/@name}Panel);
			  					  		 			</c:if>			
			  					  		 			</c:if>	
			  					  		 			</c:if>	
			  					  		 			</c:if> 
			  					  		 		</c:iterate>
			  							  	</c:if> 
			  					 	  </c:iterate> 					 	 				 	  
								</c:if> 											
					</c:iterate>
				</c:iterate>
			</c:iterate>	
	}
<f:message>generated.comment</f:message>
	@Override
	protected ${$class/@name}Proxy populateEntityFromFields() {
		request = (GenericRequest< ${$class/@name}Proxy>)  ${camelCase($projectName)}Welcome.requestFactory.${lower-case($class/@name)}Request();
		proxy = request.create(${$class/@name}Proxy.class);
	<%-- process parent class level 2 attributes--%>
	<c:if test="not($class/@name = $parentClass2/@name)">
		<c:iterate select="$parentClass2/Classifier.feature/Attribute" var="attribute">
			<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
			 <c:when test="${'$StringID'}" > proxy.set${ uppercaseFirst($attribute/@name)}(getStringField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$IntegerID'}" > proxy.set${ uppercaseFirst($attribute/@name)}(getIntegerField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$DateID'}" > proxy.set${ uppercaseFirst($attribute/@name)}(getDateField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$BooleanID'}" >proxy.set${ uppercaseFirst($attribute/@name)}(getBooleanField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$LongID'}" > proxy.set${ uppercaseFirst($attribute/@name)}(getLongField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$FloatID'}" > proxy.set${ uppercaseFirst($attribute/@name)}(getFloatField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$ImageID'}" > proxy.set${ uppercaseFirst($attribute/@name)}(getImageField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$RichTextID'}" > proxy.set${ uppercaseFirst($attribute/@name)}(getRichTextField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$CurrencyID'}" > proxy.set${ uppercaseFirst($attribute/@name)}(getCurrencyField("${$attribute/@name}")); 
			 </c:when>			 			 			 
				 <c:otherwise>
					 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
					 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
								proxy.set${ uppercaseFirst($attribute/@name)}(${ uppercaseFirst($enumeration/@name)}.valueOf(getEnumField("${$attribute/@name}")));
					 			</c:if>
					 	</c:iterate>				 
	 			</c:otherwise>
	 		</c:choose>
		</c:iterate>

	</c:if>
	<%-- process parent class level 1 attributes--%>
	<c:if test="not($class/@name = $parentClass1/@name)">
		<c:iterate select="$parentClass1/Classifier.feature/Attribute" var="attribute">
			<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
			 <c:when test="${'$StringID'}" > proxy.set${ uppercaseFirst($attribute/@name)}(getStringField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$IntegerID'}" > proxy.set${ uppercaseFirst($attribute/@name)}(getIntegerField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$DateID'}" > proxy.set${ uppercaseFirst($attribute/@name)}(getDateField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$BooleanID'}" >proxy.set${ uppercaseFirst($attribute/@name)}(getBooleanField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$LongID'}" > proxy.set${ uppercaseFirst($attribute/@name)}(getLongField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$FloatID'}" > proxy.set${ uppercaseFirst($attribute/@name)}(getFloatField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$ImageID'}" > proxy.set${ uppercaseFirst($attribute/@name)}(getImageField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$RichTextID'}" > proxy.set${ uppercaseFirst($attribute/@name)}(getRichTextField("${$attribute/@name}")); 
			 </c:when>	
			 <c:when test="${'$CurrencyID'}" > proxy.set${ uppercaseFirst($attribute/@name)}(getCurrencyField("${$attribute/@name}")); 
			 </c:when>				 		 			 
				 <c:otherwise>
					 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
					 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
								proxy.set${ uppercaseFirst($attribute/@name)}(${ uppercaseFirst($enumeration/@name)}.valueOf(getEnumField("${$attribute/@name}")));
					 			</c:if>
					 	</c:iterate>				 
	 			</c:otherwise>
	 		</c:choose>
		</c:iterate>
	</c:if>
		<%-- process base class --%>
		<c:iterate select="$class/Classifier.feature/Attribute" var="attribute">
			<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
			 <c:when test="${'$StringID'}" > proxy.set${ uppercaseFirst($attribute/@name)}(getStringField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$IntegerID'}" >proxy.set${ uppercaseFirst($attribute/@name)}(getIntegerField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$DateID'}" > proxy.set${ uppercaseFirst($attribute/@name)}(getDateField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$BooleanID'}" >proxy.set${ uppercaseFirst($attribute/@name)}(getBooleanField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$LongID'}" > proxy.set${ uppercaseFirst($attribute/@name)}(getLongField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$FloatID'}" > proxy.set${ uppercaseFirst($attribute/@name)}(getFloatField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$ImageID'}" > proxy.set${ uppercaseFirst($attribute/@name)}(getImageField("${$attribute/@name}")); 
			 </c:when>
			 <c:when test="${'$RichTextID'}" >proxy.set${ uppercaseFirst($attribute/@name)}(getRichTextField("${$attribute/@name}")); 
			 </c:when>		
			 <c:when test="${'$CurrencyID'}" >proxy.set${ uppercaseFirst($attribute/@name)}(getCurrencyField("${$attribute/@name}")); 
			 </c:when>				 	 			 
				 <c:otherwise>
					 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
					 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
								proxy.set${ uppercaseFirst($attribute/@name)}(${ uppercaseFirst($enumeration/@name)}.valueOf(getEnumField("${$attribute/@name}")));
					 			</c:if>
					 	</c:iterate>				 
	 			</c:otherwise>
	 		</c:choose>
		</c:iterate>
		
			<%-- process dropdowns one tone and many to one unidirectional--%>
			<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
				<c:iterate select="$association/Association.connection" var="association_connection">
					<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
						<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
					<%-- check is the association is corresponding to the class  --%>
								<c:if test="$association_connection_end_classID = $classID"> 
			  					   	<%-- iterate over the iterations ends  --%>
			  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
			  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
			  					  	 	<%-- get the end secondary end with other class  --%>
			  					  		 	<c:if test="not($association_connection_end/@xmi.id = $association_connection_end2/@xmi.id)"> 
			  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
			  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
			  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 			  		 			
			  					  		 			<%-- This processes the JPA realations @OneToMany, @ManyToMany, @OneToOne etc--%>
			  					  		 			<%-- check target is one side--%>
			  					  		 			<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 1">
			  					    						<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = 1">
  					    						<%--process only non composites --%>
  					    						<c:if test="not($association_connection_end2/@aggregation = 'composite')">			  					    						
			  					    							proxy.set${uppercaseFirst($class2/@name)}(select${$class2/@name}Panel.getProxy());
			  					  		 			</c:if>		
			  					  		 			</c:if>	
			  					  		 			</c:if>	
			  					  		 			</c:if> 
			  					  		 		</c:iterate>
			  							  	</c:if> 
			  					 	  </c:iterate> 					 	 				 	  
								</c:if> 											
					</c:iterate>
				</c:iterate>
			</c:iterate>
		return proxy;
	}
<f:message>generated.comment</f:message>	
	@Override
	protected void configure() {

	}

<f:message>generated.comment</f:message>	
	@Override
	protected void successfullyCreated() {
		${camelCase($projectName)}Welcome.instance().getEntityPanel().clear();
						${camelCase($projectName)}Welcome.instance().getEntityPanel().add(
						new ReadAll${$class/@name}sPanely(ReadAllTableType.READALL));
	}
	
<f:message>generated.comment</f:message>	
	@Override
	protected void setParent() {
	<%-- check to see is this class is a comp first--%>
	<c:if test="$class/@isDependent = 'true'">
	<%-- process compsition associations--%>
	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID"> 
					<%-- process only compositions--%>
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
  					  		 	<%-- check if this is a comp--%>
  					  		 	<c:if test="$association_connection_end2/@aggregation = 'composite'">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
										<%-- check to see if class2 is parent and child--%>
										<c:if test="not($class2/@parent1 = $class2/@name)">
										<c:if test="not($class2/@hasChildren = $class2/@name)">
										// this is a issue with gwt rf
										// http://yalamanchili.info:8080/jira/browse/YCORE-71
										${$class2/@name}Proxy parent = ${camelCase($projectName)}Welcome.requestFactory.${lower-case($class2/@name)}Request().create(${$class2/@name}Proxy.class);
										parent.setId(TreeAbstract${$class2/@name}Panely.instance().getEntity().getId());
										proxy.set${$class2/@name}(parent);
										</c:if>
										<%-- has parent and no children--%>
										<c:if test="$class2/@hasChildren = $class2/@name">
										proxy.set${$class2/@name}((${$class2/@name}Proxy)Tree${$class2/@name}Panely.instance().getEntity());
										</c:if>
										</c:if>
										<%-- no parent and has children--%>
										 <c:if test="$class2/@parent1 = $class2/@name">
										 <c:if test="not($class2/@hasChildren = $class2/@name)">
											// this is a issue with gwt rf
											// http://yalamanchili.info:8080/jira/browse/YCORE-71
											${$class2/@name}Proxy parent = ${camelCase($projectName)}Welcome.requestFactory.${lower-case($class2/@name)}Request().create(${$class2/@name}Proxy.class);
											parent.setId(TreeAbstract${$class2/@name}Panely.instance().getEntity().getId());
											proxy.set${$class2/@name}(parent);
										 </c:if>
										 </c:if>
  					  		 			</c:if> 
  					  		 		</c:iterate>
  					  		 	 </c:if> 	
  							  	</c:if> 
  					 	  </c:iterate> 					 	 				 	  
				</c:if>												
		</c:iterate>
	</c:iterate>
</c:iterate>
</c:if>		
	}
<f:message>generated.comment</f:message>
	@Override
	protected void successfullyAdded() {
			${camelCase($projectName)}Welcome.instance().getEntityPanel().clear();
						${camelCase($projectName)}Welcome.instance().getEntityPanel().add(
						new ReadAll${$class/@name}sPanely(ReadAllTableType.READALL));
	}
}
</f:bundle>
</java:format>