<java:merge/>
<java:format>
<f:bundle basename="templates/resources/messages">
<f:message>copyright</f:message>
<c:setVariable select="$class/@xmi.id" var="classID"/>


package ${$packageName}.${lower-case($class/@name)};
import ${$groupID}.entity.${lower-case($package/@name)}.${$class/@name};
import ${$webPackage}${camelCase($projectName)}Welcome;
import info.yalamanchili.gwt.callback.ALAsyncCallback;
import info.yalamanchili.gwt.composite.TreePanelComposite;
import info.yalamanchili.gwt.widgets.ClickableLink;
import info.yalamanchili.gwt.beans.MultiSelectObj;
import com.google.gwt.user.client.Window;
import java.util.List;
import info.yalamanchili.gwt.composite.OptionsComposite.OptionsCompositeType;			


<%--process level 1 generizations --%>
<c:if test="not($class/@name = $parentClass1/@name)">
  			<c:setVariable select="$parentClass1/@xmi.id" var="classID"/>
  			import ${$groupID}.client.${lower-case($package/@name)}.${lower-case($parentClass1/@name)}.TreeAbstract${$parentClass1/@name}Panel;
  							<%-- process the assocations for level 1 class --%>
							<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
								<c:iterate select="$association/Association.connection" var="association_connection">
									<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
										<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
												<%-- process only compositions or aggegations--%>
													<c:if test="not($association_connection_end/@aggregation = 'none')">
							  					   	<%-- iterate over the iterations ends  --%>
							  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
							  					  	 <%-- process only non composits or non aggregations and --%>
  					  								<c:if test="$association_connection_end2/@aggregation = 'none'">
							  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
							  					  	 	<%-- get the end secondary end with other class  --%>
							  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
							  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
							  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
							  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
							  					  		 			import ${$groupID}.entity.${lower-case($package/@name)}.${$class2/@name};
							  					  		 			import ${$groupID}.client.${lower-case($package/@name)}.${lower-case($class2/@name)}.ReadAll${$class2/@name}sPanel;
							  					  		 			import ${$groupID}.client.${lower-case($package/@name)}.${lower-case($class2/@name)}.${$class2/@name}OptionsPanel;
							  					  		 			import ${$groupID}.client.${lower-case($package/@name)}.${lower-case($class2/@name)}.Select${$class2/@name}Panel;
							  					  		 			</c:if> 
							  					  		 		</c:iterate>
							  							  	</c:if>
							  							  	</c:if> 
							  					 	  </c:iterate> 
							  					 	 </c:if> 					 	 				 	  											
									</c:iterate>
								</c:iterate>
							</c:iterate> 
</c:if>
<%--process level 2 generizations --%>
<c:if test="not($class/@name = $parentClass2/@name)">
  			<c:setVariable select="$parentClass2/@xmi.id" var="classID"/>
  			import ${$groupID}.client.${lower-case($package/@name)}.${lower-case($parentClass2/@name)}.TreeAbstract${$parentClass2/@name}Panel;
  							<%-- process the assocations for level 2 class --%>
							<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
								<c:iterate select="$association/Association.connection" var="association_connection">
									<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
										<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
												<%-- process only compositions or aggegations--%>
													<c:if test="not($association_connection_end/@aggregation = 'none')">
							  					   	<%-- iterate over the iterations ends  --%>
							  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
							  					  	 <%-- process only non composits or non aggregations and --%>
  					  								<c:if test="$association_connection_end2/@aggregation = 'none'">
							  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
							  					  	 	<%-- get the end secondary end with other class  --%>
							  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
							  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
							  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
							  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
							  					  		 			import ${$groupID}.entity.${lower-case($package/@name)}.${$class2/@name};
							  					  		 			import ${$groupID}.client.${lower-case($package/@name)}.${lower-case($class2/@name)}.ReadAll${$class2/@name}sPanel;
							  					  		 			import ${$groupID}.client.${lower-case($package/@name)}.${lower-case($class2/@name)}.${$class2/@name}OptionsPanel;
							  					  		 			import ${$groupID}.client.${lower-case($package/@name)}.${lower-case($class2/@name)}.Select${$class2/@name}Panel;
							  					  		 			</c:if> 
							  					  		 		</c:iterate>
							  							  	</c:if>
							  							  	</c:if> 
							  					 	  </c:iterate> 
							  					 	 </c:if> 					 	 				 	  											
									</c:iterate>
								</c:iterate>
							</c:iterate> 
</c:if>				

<c:setVariable select="$class/@xmi.id" var="classID"/>
<%--process 0 level class relations --%>
<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID">
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <%-- process only non composits or non aggregations and --%>
  					  	<c:if test="$association_connection_end2/@aggregation = 'none'">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
  					  		 			import ${$groupID}.entity.${lower-case($package/@name)}.${$class2/@name};
  					  		 				import ${$groupID}.client.${lower-case($package/@name)}.${lower-case($class2/@name)}.ReadAll${$class2/@name}sPanel;
  					  		 				import ${$groupID}.client.${lower-case($package/@name)}.${lower-case($class2/@name)}.${$class2/@name}OptionsPanel;
  					  		 				import ${$groupID}.client.${lower-case($package/@name)}.${lower-case($class2/@name)}.Select${$class2/@name}Panel;
  					  		 			</c:if> 
  					  		 		</c:iterate>
  							  	</c:if> 
  							  	</c:if>	
  					 	  </c:iterate> 					 	 				 	  
					</c:if> 											
		</c:iterate>
	</c:iterate>
</c:iterate>
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.user.client.ui.DockPanel;
import com.google.gwt.user.client.ui.TreeItem;
<f:message>generated.class.comment</f:message>
public class Tree${$class/@name}Panel extends <c:choose select="$parentClass1/@name" > <c:when test="$class/@name" > TreePanelComposite<${$class/@name}> </c:when> <c:otherwise> TreeAbstract${$parentClass1/@name}Panel</c:otherwise>  </c:choose> {
<f:message>generated.comment</f:message>
	private static Tree${$class/@name}Panel instance;
<f:message>generated.comment</f:message>
	public static Tree${$class/@name}Panel instance() {
		return instance;
	}
<f:message>generated.comment</f:message>
	public Tree${$class/@name}Panel() {
		instance=this;
		initTreePanelComposite(${$class/@name}.class.getName());
	}
<f:message>generated.comment</f:message>
	@Override
	protected void addListeners() {
		// TODO Auto-generated method stub

	}
<f:message>generated.comment</f:message>
	@Override
	protected void addWidgets() {
		// TODO Auto-generated method stub

	}
<f:message>generated.comment</f:message>
	@Override
	protected void configure() {
		// TODO Auto-generated method stub

	}
<f:message>generated.comment</f:message>
	@Override
	public ${$class/@name} loadEntity() {
		return Read${$class/@name}Panel.instance().getEntity();
	}

<f:message>generated.comment</f:message>
	@Override
	public void treeNodeSelected(final String link) {

<%--process level 1 generizations --%>
<c:if test="not($class/@name = $parentClass1/@name)">
  			<c:setVariable select="$parentClass1/@xmi.id" var="classID"/>		
  							<%-- process the assocations for level 1 class --%>
							<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
								<c:iterate select="$association/Association.connection" var="association_connection">
									<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
										<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
											<%-- check is the association is corresponding to the class  --%>
												<c:if test="$association_connection_end_classID = $classID">
							  					   	<%-- iterate over the iterations ends  --%>
							  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
							  					  	 <%-- process only non composits or non aggregations and --%>
  					  								<c:if test="$association_connection_end2/@aggregation = 'none'">
							  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
							  					  	 	<%-- get the end secondary end with other class  --%>
							  					  		 	<c:if test="not($association_connection_end/@xmi.id = $association_connection_end2/@xmi.id)"> 
										  					 <%-- check to see if this is a navigable relation--%>
										  					 <c:if test="$association_connection_end2/@isNavigable = 'true'">										  					  		 	 
							  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
							  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
							  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
							  					  		 			if (${$class2/@name}.class.getName().contains(link)) {
							  					  		 			<%--for composite add --%>
																		<c:if test="$association_connection_end/@aggregation = 'composite'">
																			${$packageName}.${lower-case($class/@name)}.${$class/@name}Service.${$class/@name}ServiceAsync.instance().get${$class2/@name}s(
																			entity.getId(),new ALAsyncCallback<List<${$class2/@name}>>() {
																											@Override
																											public void onResponse(List<${$class2/@name}> arg0) {
																												ReadAll${$class2/@name}sPanel readAll${$class2/@name}sPanel= new ReadAll${$class2/@name}sPanel(arg0);
																												readAll${$class2/@name}sPanel.parentTree = Tree${$class/@name}Panel.this;
																												readAll${$class2/@name}sPanel.parentTreeClass = link;																				
																												${camelCase($projectName)}Welcome.instance().getEntityPanel()
																												.clear();
																												${camelCase($projectName)}Welcome.instance().getEntityPanel().add(readAll${$class2/@name}sPanel);
																												${camelCase($projectName)}Welcome.instance().getEntityPanel().add(
																																			new ${$class2/@name}OptionsPanel(
																																			OptionsCompositeType.ADD));
																											}
																				
																										});
																		</c:if>
							  					  		 			<%--for non composite add_all --%>
																		<c:if test="not($association_connection_end/@aggregation = 'composite')">
																				String[] ${lower-case($class2/@name)}Columns = { 
																			<c:iterate select="$class2/Classifier.feature/Attribute" var="attribute">
																			<%-- processes the premitive Datatypes --%>
																				 <c:choose select="$attribute/StructuralFeature.type/DataType/@href" > <c:when test="${'$StringID'}" > "${$attribute/@name}", </c:when> 
																			</c:choose> 
																			</c:iterate>	
																				 };
																			${$packageName}.${lower-case($class/@name)}.${$class/@name}Service.${$class/@name}ServiceAsync.instance().get${$class2/@name}s(
																			entity.getId(),${lower-case($class2/@name)}Columns,new ALAsyncCallback<MultiSelectObj<${$class2/@name}>>() {
																											@Override
																											public void onResponse(MultiSelectObj<${$class2/@name}> arg0) {																			
																												${camelCase($projectName)}Welcome.instance().getEntityPanel()
																												.clear();
																												${camelCase($projectName)}Welcome.instance().getEntityPanel().add(new ReadAll${$class2/@name}sPanel(arg0.getSelectedObjs()));
																												${camelCase($projectName)}Welcome.instance().getEntityPanel().add(new Select${$class2/@name}Panel("Select ${$class2/@name}s",Tree${$class/@name}Panel.instance(),arg0.getAvailable(),arg0.getSelected()));
																											}
																				
																										});
																		</c:if>																										  					  		 			
																	}
							  					  		 			</c:if> 
							  					  		 		</c:iterate>
							  							  	</c:if> 
							  							  	</c:if>
							  							  	</c:if>  
							  					 	  </c:iterate> 
							  					 						 	 				 	  
												</c:if> 											
									</c:iterate>
								</c:iterate>
							</c:iterate> 
</c:if>
<%--process level 2 generizations --%>
<c:if test="not($class/@name = $parentClass2/@name)">
  			<c:setVariable select="$parentClass2/@xmi.id" var="classID"/>		
  							<%-- process the assocations for level 1 class --%>
							<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
								<c:iterate select="$association/Association.connection" var="association_connection">
									<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
										<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
											<%-- check is the association is corresponding to the class  --%>
												<c:if test="$association_connection_end_classID = $classID">
							  					   	<%-- iterate over the iterations ends  --%>
							  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
							  					  	 <%-- process only non composits or non aggregations and --%>
  					  								<c:if test="$association_connection_end2/@aggregation = 'none'">
							  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
							  					  	 	<%-- get the end secondary end with other class  --%>
							  					  		 	<c:if test="not($association_connection_end/@xmi.id = $association_connection_end2/@xmi.id)"> 
										  					 <%-- check to see if this is a navigable relation--%>
										  					 <c:if test="$association_connection_end2/@isNavigable = 'true'">										  					  		 	 
							  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
							  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
							  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
								  					  		 			if (${$class2/@name}.class.getName().contains(link)) {
							  					  		 			<%--for composite add --%>
																		<c:if test="$association_connection_end/@aggregation = 'composite'">
																			${$packageName}.${lower-case($class/@name)}.${$class/@name}Service.${$class/@name}ServiceAsync.instance().get${$class2/@name}s(
																			entity.getId(),new ALAsyncCallback<List<${$class2/@name}>>() {
																											@Override
																											public void onResponse(List<${$class2/@name}> arg0) {
																												ReadAll${$class2/@name}sPanel readAll${$class2/@name}sPanel= new ReadAll${$class2/@name}sPanel(arg0);
																												readAll${$class2/@name}sPanel.parentTree = Tree${$class/@name}Panel.this;
																												readAll${$class2/@name}sPanel.parentTreeClass = link;																				
																												${camelCase($projectName)}Welcome.instance().getEntityPanel()
																												.clear();
																												${camelCase($projectName)}Welcome.instance().getEntityPanel().add(readAll${$class2/@name}sPanel);
																												${camelCase($projectName)}Welcome.instance().getEntityPanel().add(
																																			new ${$class2/@name}OptionsPanel(
																																			OptionsCompositeType.ADD));
																											}
																				
																										});
																		</c:if>
							  					  		 			<%--for non composite add_all --%>
																		<c:if test="not($association_connection_end/@aggregation = 'composite')">
																				String[] ${lower-case($class2/@name)}Columns = { 
																			<c:iterate select="$class2/Classifier.feature/Attribute" var="attribute">
																			<%-- processes the premitive Datatypes --%>
																				 <c:choose select="$attribute/StructuralFeature.type/DataType/@href" > <c:when test="${'$StringID'}" > "${$attribute/@name}", </c:when> 
																			</c:choose> 
																			</c:iterate>	
																				 };
																			${$packageName}.${lower-case($class/@name)}.${$class/@name}Service.${$class/@name}ServiceAsync.instance().get${$class2/@name}s(
																			entity.getId(),${lower-case($class2/@name)}Columns,new ALAsyncCallback<MultiSelectObj<${$class2/@name}>>() {
																											@Override
																											public void onResponse(MultiSelectObj<${$class2/@name}> arg0) {																			
																												${camelCase($projectName)}Welcome.instance().getEntityPanel()
																												.clear();
																												${camelCase($projectName)}Welcome.instance().getEntityPanel().add(new ReadAll${$class2/@name}sPanel(arg0.getSelectedObjs()));
																												${camelCase($projectName)}Welcome.instance().getEntityPanel().add(new Select${$class2/@name}Panel("Select ${$class2/@name}s",Tree${$class/@name}Panel.instance(),arg0.getAvailable(),arg0.getSelected()));
																											}
																				
																										});
																		</c:if>	
																	}

							  					  		 			</c:if> 
							  					  		 		</c:iterate>
							  							  	</c:if> 
							  							  	</c:if>
							  							  	</c:if>
							  					 	  </c:iterate> 
							  					 						 	 				 	  
												</c:if> 											
									</c:iterate>
								</c:iterate>
							</c:iterate> 
</c:if> 

<c:setVariable select="$class/@xmi.id" var="classID"/>
<%--process 0 level class relations --%>
<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID">
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <%-- process only non composits or non aggregations and --%>
  					  	 <c:if test="$association_connection_end2/@aggregation = 'none'">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end/@xmi.id = $association_connection_end2/@xmi.id)"> 
  					  		 	<%-- check to see if this is a navigable relation--%>
  					  		 	<c:if test="$association_connection_end2/@isNavigable = 'true'">
  					  		 	<%-- process many on target--%>
								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
  								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
							  					  		 			if (${$class2/@name}.class.getName().contains(link)) {
							  					  		 			<%--for composite add --%>
																		<c:if test="$association_connection_end/@aggregation = 'composite'">
																			${$packageName}.${lower-case($class/@name)}.${$class/@name}Service.${$class/@name}ServiceAsync.instance().get${$class2/@name}s(
																			entity.getId(),new ALAsyncCallback<List<${$class2/@name}>>() {
																											@Override
																											public void onResponse(List<${$class2/@name}> arg0) {
																												ReadAll${$class2/@name}sPanel readAll${$class2/@name}sPanel= new ReadAll${$class2/@name}sPanel(arg0);
																												readAll${$class2/@name}sPanel.parentTree = Tree${$class/@name}Panel.this;
																												readAll${$class2/@name}sPanel.parentTreeClass = link;																				
																												${camelCase($projectName)}Welcome.instance().getEntityPanel()
																												.clear();
																												${camelCase($projectName)}Welcome.instance().getEntityPanel().add(readAll${$class2/@name}sPanel);
																												${camelCase($projectName)}Welcome.instance().getEntityPanel().add(
																																			new ${$class2/@name}OptionsPanel(
																																			OptionsCompositeType.ADD));
																											}
																				
																										});
																		</c:if>
							  					  		 			<%--for non composite add_all --%>
																		<c:if test="not($association_connection_end/@aggregation = 'composite')">
																				String[] ${lower-case($class2/@name)}Columns = { 
																			<c:iterate select="$class2/Classifier.feature/Attribute" var="attribute">
																			<%-- processes the premitive Datatypes --%>
																				 <c:choose select="$attribute/StructuralFeature.type/DataType/@href" > <c:when test="${'$StringID'}" > "${$attribute/@name}", </c:when> 
																			</c:choose> 
																			</c:iterate>	
																				 };
																			${$packageName}.${lower-case($class/@name)}.${$class/@name}Service.${$class/@name}ServiceAsync.instance().get${$class2/@name}s(
																			entity.getId(),${lower-case($class2/@name)}Columns,new ALAsyncCallback<MultiSelectObj<${$class2/@name}>>() {
																											@Override
																											public void onResponse(MultiSelectObj<${$class2/@name}> arg0) {																			
																												${camelCase($projectName)}Welcome.instance().getEntityPanel()
																												.clear();
																												${camelCase($projectName)}Welcome.instance().getEntityPanel().add(new ReadAll${$class2/@name}sPanel(arg0.getSelectedObjs()));
																												${camelCase($projectName)}Welcome.instance().getEntityPanel().add(new Select${$class2/@name}Panel("Select ${$class2/@name}s",Tree${$class/@name}Panel.instance(),arg0.getAvailable(),arg0.getSelected()));
																											}
																				
																										});
																		</c:if>	
																	}

  					  		 			</c:if> 
  					  		 		</c:iterate>
  					  		 	</c:if>	
  							  	</c:if> 
  							  	</c:if>
  							  	</c:if> 
  							  	</c:if>	
  					 	  </c:iterate> 					 	 				 	  
					</c:if> 										
		</c:iterate>
	</c:iterate>
</c:iterate>	
	}
<f:message>generated.comment</f:message>	
@Override
	public void showEntity() {
		

	}
}
</f:bundle>
</java:format>