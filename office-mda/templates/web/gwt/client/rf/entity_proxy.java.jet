
<java:format>
<f:bundle basename="templates/resources/messages">
<f:message>copyright</f:message>
<c:setVariable select="$class/@xmi.id" var="classID"/>
package ${$packageName}.${lower-case($class/@name)};
import java.io.Serializable;
import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.HashSet;
import java.util.ArrayList;
import java.math.BigDecimal;

<%-- related classes import--%>
<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
				<%-- check is the association is corresponding to the class  --%>
				<c:if test="$association_connection_end_classID = $classID"> 
					<%-- iterate over the iterations ends  --%>
  					<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 		<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end/@xmi.id = $association_connection_end2/@xmi.id)"> 
  					  		 		<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
	  					  		 			<%-- check to see the association is navigable in the first case--%>
	  										<c:if test="$association_connection_end2/@isNavigable = 'true'">
import ${$packageName}.${lower-case($class2/@name)}.${$class2/@name}Proxy;					
	  										</c:if>
  										</c:if>	
  									</c:iterate>
  								</c:if>	
  					</c:iterate>								
				</c:if>
		</c:iterate>
	</c:iterate>
</c:iterate>					 	
<%--process enums from base and lavel1,2 parents --%>
	<%-- process parent class level 2 attributes--%>
	<c:if test="not($class/@name = $parentClass2/@name)">
		<c:iterate select="$parentClass2/Classifier.feature/Attribute" var="attribute">
			<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
				 <c:otherwise>
					<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
					 		<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
								import ${$groupID}.entity.${lower-case($package/@name)}.${ uppercaseFirst($enumeration/@name)};
					 		</c:if>
					</c:iterate>					 
		 		</c:otherwise>
		 	</c:choose>
		</c:iterate>
	</c:if>
	<%-- process parent class level 1 attributes--%>
	<c:if test="not($class/@name = $parentClass1/@name)">
		<c:iterate select="$parentClass1/Classifier.feature/Attribute" var="attribute">
			<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
				 <c:otherwise>
					 <c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
					 	<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
							import ${$groupID}.entity.${lower-case($package/@name)}.${ uppercaseFirst($enumeration/@name)};
					 	</c:if>
					</c:iterate>					 
		 		</c:otherwise>
		 	</c:choose>
		</c:iterate>
	</c:if>
	<%--process premitive data types of base current class --%>
	<c:iterate select="$class/Classifier.feature/Attribute" var="attribute">
		<c:choose select="$attribute/StructuralFeature.type/DataType/@href" >
			 <c:otherwise>
				<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
					 <c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
						import ${$groupID}.entity.${lower-case($package/@name)}.${ uppercaseFirst($enumeration/@name)};
					 </c:if>
				</c:iterate>					 
		 	</c:otherwise>
		</c:choose>
	</c:iterate>				
<%--process level 1 generizations for parent class proxy imports--%>
<c:if test="not($class/@name = $parentClass1/@name)">
 import ${$groupID}.client.${lower-case($package/@name)}.${lower-case($parentClass1/@name)}.${$parentClass1/@name}Proxy;
</c:if>
<%--process level 2 generizations --%>
<c:if test="not($class/@name = $parentClass2/@name)">
 import ${$groupID}.client.${lower-case($package/@name)}.${lower-case($parentClass2/@name)}.${$parentClass2/@name}Proxy;
</c:if>		

import ${$groupID}.entity.${lower-case($package/@name)}.${$class/@name};
import ${$groupID}.server.rf.GenericEntityLocator;
import com.google.web.bindery.requestfactory.shared.EntityProxy;
import com.google.web.bindery.requestfactory.shared.ProxyFor;

@ProxyFor(value = ${$class/@name}.class, locator = GenericEntityLocator.class)
public <c:if test="$class/@isAbstract = 'true'">abstract</c:if> interface ${$class/@name}Proxy extends <c:if test="$class/@parentClass1Name = $class/@name">  EntityProxy </c:if> <c:if test="not($class/@parentClass1Name = $class/@name)">  ${$class/@parentClass1Name}Proxy </c:if> {
<%--getter and seeter for id attribute --%>
<c:if test="$class/@parentClass1Name = $class/@name">
<f:message>generated.comment</f:message>
  public Long getId();
<f:message>generated.comment</f:message>  
  public void setId(Long id);
</c:if>

<%-- getters and setters --%>
<c:iterate select="$class/Classifier.feature/Attribute" var="attribute">
	<%--getters for basic attributes --%>
	<f:message>generated.comment</f:message>
	public  <c:choose select="$attribute/StructuralFeature.type/DataType/@href" >  <c:when test="${'$StringID'}" >String</c:when> <c:when test="${'$IntegerID'}" >Integer</c:when><c:when test="${'$DateID'}" >Date</c:when><c:when test="${'$BooleanID'}" >Boolean</c:when><c:when test="${'$LongID'}" > Long </c:when><c:when test="${'$FloatID'}" >Float</c:when> <c:when test="${'$ImageID'}" >String</c:when> <c:when test="${'$RichTextID'}" >String</c:when> <c:when test="${'$CurrencyID'}" >BigDecimal</c:when> <c:otherwise> 
	 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
	 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
	 			 ${$enumeration/@name} 
	 			</c:if>
	 	</c:iterate>	
	 	  </c:otherwise> </c:choose> get${uppercaseFirst($attribute/@name)}();
	<f:message>generated.comment</f:message>
	public void set${uppercaseFirst($attribute/@name)}(<c:choose select="$attribute/StructuralFeature.type/DataType/@href" > <c:when test="${'$StringID'}" >String</c:when> <c:when test="${'$IntegerID'}" >Integer</c:when><c:when test="${'$DateID'}" >Date</c:when><c:when test="${'$BooleanID'}" >Boolean</c:when><c:when test="${'$LongID'}" > Long </c:when><c:when test="${'$FloatID'}" >Float</c:when> <c:when test="${'$ImageID'}" >String</c:when> <c:when test="${'$RichTextID'}" >String</c:when> <c:when test="${'$CurrencyID'}" >BigDecimal</c:when> <c:otherwise> 
	 	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Enumeration" var="enumeration">
	 			<c:if test="$attribute/StructuralFeature.type/Enumeration/@xmi.idref = $enumeration/@xmi.id">
	 			 ${$enumeration/@name} 
	 			</c:if>
	 	</c:iterate>	
	 	  </c:otherwise> </c:choose> <c:get select="$attribute/@name" />);
	
</c:iterate>
<%-- user defined types getters and setters-->
<%--getters for collection attributes --%>
	<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
	
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID"> 
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end/@xmi.id = $association_connection_end2/@xmi.id)"> 
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
  					  		 			
  					  		 			<%-- check to see the association is navigable in the first case--%>
  										<c:if test="$association_connection_end2/@isNavigable = 'true'">		
  					  		 			<%-- This processes the JPA realations @OneToMany, @ManyToMany, @OneToOne etc--%>
  					  		 			<%-- check if target is one side--%>
  					  		 			<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 1">
  					    						<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = 1">
<%-- gettter returning a non collection--%>
 <f:message>generated.comment</f:message>													
 public 	${$class2/@name}Proxy get${$class2/@name}();
<%-- setter returning a non clooection--%>
<f:message>generated.comment</f:message>
  public 	void set${$class2/@name}(${$class2/@name}Proxy ${lowercaseFirst($class2/@name)});
 
  					  		 					</c:if>  
  					  		 			</c:if>
  					  		 			
  										 <%-- check if target is many side--%>
   					  		 			<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
  					    						<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
   		
	 										<%-- check if source is many side--%>
	 										<%-- this is a many to many--%>
	 										<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
	  					    						<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
	  					    						<%-- gettter returning a collection--%>	
	  					    						<f:message>generated.comment</f:message>			    											    									    						
														 public 	Set<${$class2/@name}Proxy>  get${$class2/@name}s();
														<%-- setter returning a collection--%>
														<f:message>generated.comment</f:message>	
														 public 	  void set${$class2/@name}s(Set<${$class2/@name}Proxy> ${lowercaseFirst($class2/@name)}s);
	  					    						</c:if>  
	  					  		 			</c:if>
	  					  		 			<%-- check if source is one side--%>
	  					  		 			<%-- this is a one to many--%>
	  					  		 			<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 1">
	  					    						<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = 1">
	  					    						<%-- gettter returning a collection--%>	
	  					    							<f:message>generated.comment</f:message>			    											    									    						
														 public 	List<${$class2/@name}Proxy>  get${$class2/@name}s();
														<%-- setter returning a collection--%>
														<f:message>generated.comment</f:message>	
														 public 	  void set${$class2/@name}s(List<${$class2/@name}Proxy> ${lowercaseFirst($class2/@name)}s);
	  					    						</c:if>  
	  					  		 			</c:if>
  					
				  		 					</c:if>  
  					  		 			</c:if>
  					  		 			
  					  		 			</c:if> 
  					  		 			</c:if>
  					  		 		</c:iterate>
  							  	</c:if> 
  					 	  </c:iterate> 					 	 				 	  
					</c:if> 											
		</c:iterate>
	</c:iterate>
	</c:iterate>
}
</f:bundle>
</java:format>