
<java:format>
<f:bundle basename="templates/resources/messages">
<f:message>copyright</f:message>
package ${$packageName}.${lower-case($class/@name)};
<c:setVariable select="$class/@xmi.id" var="classID"/>


<%-- process all getRelated entities relations--%>
<%--process level2 generizations --%>
<c:if test="not($class/@name = $parentClass2/@name)">
  			<c:setVariable select="$parentClass2/@xmi.id" var="classID"/>
  			<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID">
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  	 	<c:if test="not($association_connection_end_classID2 = $classID)">
  					  		 	<%-- process many on target--%>
								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
  								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
  					  		 	<%-- check to see if this is a navigable relation--%>
  					  		 	<c:if test="$association_connection_end2/@isNavigable = 'true'">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
import ${$groupID}.client.${lower-case($package/@name)}.${lower-case($class2/@name)}.${$class2/@name}Proxy;
  					  		 			</c:if> 
  					  		 		</c:iterate>
  							  	</c:if> 
								</c:if>	
  							  	</c:if>
  							  	</c:if>
  					 	  </c:iterate>	  					 	 				 	  
					</c:if> 										
		</c:iterate>
	</c:iterate>
</c:iterate>
</c:if>
<c:setVariable select="$class/@xmi.id" var="classID"/>
<%--process level 1 generizations --%>
<c:if test="not($class/@name = $parentClass1/@name)">
  			<c:setVariable select="$parentClass1/@xmi.id" var="classID"/>
  			<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID">
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  	 	<c:if test="not($association_connection_end_classID2 = $classID)">
  					  		 	<%-- process many on target--%>
								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
  								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
  					  		 	<%-- check to see if this is a navigable relation--%>
  					  		 	<c:if test="$association_connection_end2/@isNavigable = 'true'">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
import ${$groupID}.client.${lower-case($package/@name)}.${lower-case($class2/@name)}.${$class2/@name}Proxy;
  					  		 			</c:if> 
  					  		 		</c:iterate>
  							  	</c:if> 
								</c:if>	
  							  	</c:if>
  							  	</c:if>
  					 	  </c:iterate>	  					 	 				 	  
					</c:if> 										
		</c:iterate>
	</c:iterate>
</c:iterate>
</c:if>
<c:setVariable select="$class/@xmi.id" var="classID"/>
<%--level 0 --%>				
<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID">
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  	 	<c:if test="not($association_connection_end_classID2 = $classID)">
  					  		 	<%-- process many on target--%>
								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
  								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
  					  		 	<%-- check to see if this is a navigable relation--%>
  					  		 	<c:if test="$association_connection_end2/@isNavigable = 'true'">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
import ${$groupID}.client.${lower-case($package/@name)}.${lower-case($class2/@name)}.${$class2/@name}Proxy;
  					  		 			</c:if> 
  					  		 		</c:iterate>
  							  	</c:if> 
								</c:if>	
  							  	</c:if>
  							  	</c:if>
  					 	  </c:iterate>	  					 	 				 	  
					</c:if> 										
		</c:iterate>
	</c:iterate>
</c:iterate>

<%-- process all addAll relations--%>
<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID">
					<%-- process only classes with many on source side--%>
					<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
  					<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <%-- process only non composites --%>
  					  	 <c:if test="not($association_connection_end2/@aggregation = 'composite')">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
  					  		 	<%-- check to see if this is a navigable relation--%>
  					  		 	<c:if test="$association_connection_end/@isNavigable = 'true'">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
  					  		 			import ${$groupID}.client.${lower-case($package/@name)}.${lower-case($class2/@name)}.${$class2/@name}Proxy;
  					  		 			</c:if> 
  					  		 		</c:iterate>
  					  		 	</c:if>	
  							  	</c:if> 
  							  	</c:if>	
  					 	  </c:iterate>
  					</c:if> 	   
  					</c:if> 	  					 	 				 	  
					</c:if> 										
		</c:iterate>
	</c:iterate>
</c:iterate>

<%-- process all merge relations--%>	
<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID">
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <%-- process only  composites on target--%>
  					  	 <c:if test="$association_connection_end2/@aggregation = 'composite'">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
 										import ${$groupID}.entity.${lower-case($package/@name)}.${$class2/@name};
 										<c:if test="not($class2/@parent1 = $class2/@name)">
 										//TODO check code gen
 										import ${$groupID}.client.${lower-case($package/@name)}.${lower-case($class2/@name)}.*;
 										</c:if>
 										<c:if test="not($class2/@parent2 = $class2/@name)"> 
 										//TODO check codegen
 										import ${$groupID}.client.${lower-case($package/@name)}.${lower-case($class2/@name)}.*;
 										</c:if>
  					  		 			</c:if> 
  					  		 		</c:iterate>
  							  	</c:if> 
  							  	</c:if>	
  					 	  </c:iterate> 	  					 	 				 	  
					</c:if> 										
		</c:iterate>
	</c:iterate>
</c:iterate>

<c:setVariable select="$class/@xmi.id" var="classID"/>

import info.yalamanchili.gwt.rf.GenericRequest;
import java.util.List;
import ${$groupID}.server.rf.${$class/@name}GWTDao;
import info.yalamanchili.requestfactory.RequestFactoryDaoLocator;

import com.google.web.bindery.requestfactory.shared.Request;
import com.google.web.bindery.requestfactory.shared.RequestContext;
import com.google.web.bindery.requestfactory.shared.Service;

@Service(value = ${$class/@name}GWTDao.class, locator = RequestFactoryDaoLocator.class)
public interface ${$class/@name}Request extends GenericRequest< ${$class/@name}Proxy> {
	Request<${$class/@name}Proxy> findById(Long id);

	Request<Void> save(${$class/@name}Proxy entity);
	
	Request<List<${$class/@name}Proxy>> query(int start, int limit);

	Request<Long> size();
	
//TODO need to review which of these are actually needed
<%-- process all getRelated entities relations--%>
<%--process level2 generizations --%>
<c:if test="not($class/@name = $parentClass2/@name)">
  			<c:setVariable select="$parentClass2/@xmi.id" var="classID"/>
  			<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID">
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  	 	<c:if test="not($association_connection_end/@xmi.id = $association_connection_end2/@xmi.id)">
  					  		 	<%-- process many on target--%>
								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
  								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
  					  		 	<%-- check to see if this is a navigable relation--%>
  					  		 	<c:if test="$association_connection_end2/@isNavigable = 'true'">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2">
<f:message>generated.comment</f:message>  					  		 			 
public   Request<List<${$class2/@name}Proxy>> get${$class2/@name}s(Long entityID);
	  					  		 			<%-- check to see if the parent side is aggregation or none--%> 
	  					  		 			<c:if test="not($association_connection_end/@aggregation = 'composite')">
<f:message>generated.comment</f:message>	  					  		 			
//public MultiSelectObj<${$class2/@name}Proxy> get${$class2/@name}s(Long entityID, String[] columns);
	  					  		 			</c:if>
  					  		 			</c:if>
  					  		 		</c:iterate>
  							  	</c:if> 
								</c:if>	
  							  	</c:if>
  							  	</c:if>
  					 	  </c:iterate>	  					 	 				 	  
					</c:if> 										
		</c:iterate>
	</c:iterate>
</c:iterate>
</c:if>
<c:setVariable select="$class/@xmi.id" var="classID"/>
<%--process level 1 generizations --%>
<c:if test="not($class/@name = $parentClass1/@name)">
  			<c:setVariable select="$parentClass1/@xmi.id" var="classID"/>
  			<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID">
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  	 	<c:if test="not($association_connection_end/@xmi.id = $association_connection_end2/@xmi.id)">
  					  		 	<%-- process many on target--%>
								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
  								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
  					  		 	<%-- check to see if this is a navigable relation--%>
  					  		 	<c:if test="$association_connection_end2/@isNavigable = 'true'">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2">
<f:message>generated.comment</f:message>  					  		 			 
public  Request<List<${$class2/@name}Proxy>> get${$class2/@name}s(Long entityID);
	  					  		 			<%-- check to see if the parent side is aggregation or none--%> 
	  					  		 			<c:if test="not($association_connection_end/@aggregation = 'composite')">
<f:message>generated.comment</f:message>	  					  		 			
//public MultiSelectObj<${$class2/@name}Proxy> get${$class2/@name}s(Long entityID, String[] columns);
	  					  		 			</c:if>
  					  		 			</c:if>   					  		 			
  					  		 		</c:iterate>
  							  	</c:if> 
								</c:if>	
  							  	</c:if>
  							  	</c:if>
  					 	  </c:iterate>	  					 	 				 	  
					</c:if> 										
		</c:iterate>
	</c:iterate>
</c:iterate>
</c:if>
<c:setVariable select="$class/@xmi.id" var="classID"/>
<%--level 0 --%>	
<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID">
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  	 	<c:if test="not($association_connection_end/@xmi.id = $association_connection_end2/@xmi.id)">
  					  		 	<%-- process many on target--%>
								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
  								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
  					  		 	<%-- check to see if this is a navigable relation--%>
  					  		 	<c:if test="$association_connection_end2/@isNavigable = 'true'">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2">
<f:message>generated.comment</f:message>  					  		 			 
public   Request<List<${$class2/@name}Proxy>> get${$class2/@name}s(Long entityID);
	  					  		 			<%-- check to see if the parent side is aggregation or none--%>	  					  		 			 
	  					  		 			<c:if test="not($association_connection_end/@aggregation = 'composite')">
<f:message>generated.comment</f:message>	  					  		 			
//public MultiSelectObj<${$class2/@name}Proxy> get${$class2/@name}s(Long entityID, String[] columns);
	  					  		 			</c:if>
  					  		 			</c:if> 
 					  		 			
  					  		 		</c:iterate>
  							  	</c:if> 
								</c:if>	
  							  	</c:if>
  							  	</c:if>
  					 	  </c:iterate>	  					 	 				 	  
					</c:if> 										
		</c:iterate>
	</c:iterate>
</c:iterate>	
	
<%-- process all addAll relations--%>	
<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID">
					<%-- process only classes with many on source side--%>
					<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
  					<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <%-- process only non composites --%>
  					  	 <c:if test="not($association_connection_end2/@aggregation = 'composite')">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end/@xmi.id = $association_connection_end2/@xmi.id)"> 
  					  		 	<%-- check to see if this is a navigable relation--%>
  					  		 	<c:if test="$association_connection_end/@isNavigable = 'true'">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2">
<f:message>generated.comment</f:message>  					  		 			 
//public void addAll(${$class2/@name} ${lower-case($class2/@name)}, ${$class/@name} children,List<Long> childrenIds);
  					  		 			</c:if> 
  					  		 		</c:iterate>
  					  		 	</c:if>	
  							  	</c:if> 
  							  	</c:if>	
  					 	  </c:iterate>
  					</c:if> 	   
  					</c:if> 	  					 	 				 	  
					</c:if> 										
		</c:iterate>
	</c:iterate>
</c:iterate>	

<%-- process all removeAll relations--%>	
<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID">
					<%-- process only classes with many on source side--%>
					<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
  					<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <%-- process only non composites --%>
  					  	 <c:if test="not($association_connection_end2/@aggregation = 'composite')">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end/@xmi.id = $association_connection_end2/@xmi.id)"> 
  					  		 	<%-- check to see if this is a navigable relation--%>
  					  		 	<c:if test="$association_connection_end/@isNavigable = 'true'">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2">
<f:message>generated.comment</f:message>  					  		 			 
//public void removeAll(${$class2/@name} ${lower-case($class2/@name)}, ${$class/@name} children,List<Long> childrenIds);
  					  		 			</c:if> 
  					  		 		</c:iterate>
  					  		 	</c:if>	
  							  	</c:if> 
  							  	</c:if>	
  					 	  </c:iterate>
  					</c:if> 	   
  					</c:if> 	  					 	 				 	  
					</c:if> 										
		</c:iterate>
	</c:iterate>
</c:iterate>	

<%-- process all merge relations--%>	
<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID">
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <%-- process only  composites on target--%>
  					  	 <c:if test="$association_connection_end2/@aggregation = 'composite'">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end/@xmi.id = $association_connection_end2/@xmi.id)"> 
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2">
<f:message>generated.comment</f:message>  					  		 			 
//public void merge(${$class/@name} entity, ${$class2/@name} child);
  					  		 			</c:if> 
  					  		 		</c:iterate>
  							  	</c:if> 
  							  	</c:if>	
  					 	  </c:iterate> 	  					 	 				 	  
					</c:if> 										
		</c:iterate>
	</c:iterate>
</c:iterate>
}
</f:bundle>
</java:format>