
<java:format>
<f:bundle basename="templates/resources/messages">
<f:message>copyright</f:message>
package ${$groupID}.server;


<c:if test="$enableHibernateSearch = 'true'">
import info.yalamanchili.commons.DataType;
import info.yalamanchili.commons.ReflectionUtils;
import info.yalamanchili.commons.SearchUtils;
import info.yalamanchili.gwt.beans.MultiSelectObjy;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.hibernate.search.FullTextQuery;
</c:if>	
import java.util.HashMap;
import java.util.Properties;
import java.util.HashSet;
import java.util.Set;
import javax.ejb.EJB;
import org.apache.lucene.util.Version;
import org.jboss.seam.annotations.Transactional;
import ${$groupID}.ejb.GenericServiceLocal;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import info.yalamanchili.server.GWTServletUtils;
import javax.persistence.Query;
<%-- process all getRelated entities relations--%>
<%--process level2 generizations --%>
<c:if test="not($class/@name = $parentClass2/@name)">
  			<c:setVariable select="$parentClass2/@xmi.id" var="classID"/>
  			<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID">
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  	 	<c:if test="not($association_connection_end_classID2 = $classID)">
  					  		 	<%-- process many on target--%>
								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
  								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
  					  		 	<%-- check to see if this is a navigable relation--%>
  					  		 	<c:if test="$association_connection_end2/@isNavigable = 'true'">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
import ${$groupID}.entity.${lower-case($package/@name)}.${$class2/@name};
  					  		 			</c:if> 
  					  		 		</c:iterate>
  							  	</c:if> 
								</c:if>	
  							  	</c:if>
  							  	</c:if>
  					 	  </c:iterate>	  					 	 				 	  
					</c:if> 										
		</c:iterate>
	</c:iterate>
</c:iterate>
</c:if>
<c:setVariable select="$class/@xmi.id" var="classID"/>
<%--process level 1 generizations --%>
<c:if test="not($class/@name = $parentClass1/@name)">
  			<c:setVariable select="$parentClass1/@xmi.id" var="classID"/>
  			<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID">
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  	 	<c:if test="not($association_connection_end_classID2 = $classID)">
  					  		 	<%-- process many on target--%>
								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
  								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
  					  		 	<%-- check to see if this is a navigable relation--%>
  					  		 	<c:if test="$association_connection_end2/@isNavigable = 'true'">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
import ${$groupID}.entity.${lower-case($package/@name)}.${$class2/@name};
  					  		 			</c:if> 
  					  		 		</c:iterate>
  							  	</c:if> 
								</c:if>	
  							  	</c:if>
  							  	</c:if>
  					 	  </c:iterate>	  					 	 				 	  
					</c:if> 										
		</c:iterate>
	</c:iterate>
</c:iterate>
</c:if>
<c:setVariable select="$class/@xmi.id" var="classID"/>
<%--level 0 --%>				
<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID">
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  	 	<c:if test="not($association_connection_end_classID2 = $classID)">
  					  		 	<%-- process many on target--%>
								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
  								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
  					  		 	<%-- check to see if this is a navigable relation--%>
  					  		 	<c:if test="$association_connection_end2/@isNavigable = 'true'">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
import ${$groupID}.entity.${lower-case($package/@name)}.${$class2/@name};
  					  		 			</c:if> 
  					  		 		</c:iterate>
  							  	</c:if> 
								</c:if>	
  							  	</c:if>
  							  	</c:if>
  					 	  </c:iterate>	  					 	 				 	  
					</c:if> 										
		</c:iterate>
	</c:iterate>
</c:iterate>

<%-- process all addAll relations--%>
<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID">
					<%-- process only classes with many on source side--%>
					<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
  					<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <%-- process only non composites --%>
  					  	 <c:if test="not($association_connection_end2/@aggregation = 'composite')">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
  					  		 	<%-- check to see if this is a navigable relation--%>
  					  		 	<c:if test="$association_connection_end/@isNavigable = 'true'">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
  					  		 			import ${$groupID}.entity.${lower-case($package/@name)}.${$class2/@name};
  					  		 			</c:if> 
  					  		 		</c:iterate>
  					  		 	</c:if>	
  							  	</c:if> 
  							  	</c:if>	
  					 	  </c:iterate>
  					</c:if> 	   
  					</c:if> 	  					 	 				 	  
					</c:if> 										
		</c:iterate>
	</c:iterate>
</c:iterate>

<%-- process all merge relations--%>	
<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID">
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <%-- process only  composites on target--%>
  					  	 <c:if test="$association_connection_end2/@aggregation = 'composite'">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end_classID2 = $classID)"> 
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
 										import ${$groupID}.entity.${lower-case($package/@name)}.${$class2/@name};
 										<c:if test="not($class2/@parent1 = $class2/@name)">
 										import ${$groupID}.entity.${lower-case($package/@name)}.${$class2/@parentClass1Name};
 										</c:if>
 										<c:if test="not($class2/@parent2 = $class2/@name)"> 
 										import ${$groupID}.entity.${lower-case($package/@name)}.${$class2/@parentClass2Name};
 										</c:if>
  					  		 			</c:if> 
  					  		 		</c:iterate>
  							  	</c:if> 
  							  	</c:if>	
  					 	  </c:iterate> 	  					 	 				 	  
					</c:if> 										
		</c:iterate>
	</c:iterate>
</c:iterate>

import ${$groupID}.ejb.${$package/@name}.${lower-case($class/@name)}.${$class/@name}ServiceLocal;
import ${$groupID}.entity.${$package/@name}.${$class/@name};

import java.io.Serializable;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import javax.persistence.EntityManager;

import org.jboss.seam.annotations.Create;
import org.jboss.seam.annotations.In;
import org.jboss.seam.annotations.Name;
import info.yalamanchili.gwt.beans.TableObj;
import org.jboss.seam.annotations.remoting.WebRemote;

import org.jboss.seam.annotations.Scope;
import org.jboss.seam.ScopeType;
import info.yalamanchili.trace.Trace;
import info.yalamanchili.server.GileadService;

@Trace
@Transactional
@Scope(ScopeType.SESSION)
@Name("${$packageName}.${lower-case($class/@name)}.${$class/@name}Service")
<f:message>generated.class.comment</f:message>
public class ${$class/@name}ServiceImpl extends GileadService implements ${$packageName}.${lower-case($class/@name)}.${$class/@name}Service {
<f:message>generated.comment</f:message>
	private static final Log log = LogFactory
			.getLog(${$class/@name}ServiceImpl.class);
<f:message>generated.comment</f:message>
	public ${$class/@name}ServiceImpl() {
		super("java:/${$projectName}");
	}
<f:message>generated.comment</f:message>	
	//@In(create = true)
	//protected GenericServiceLocal genericServiceBean;
<f:message>generated.comment</f:message>
	//@In(create = true)
	//protected ${$class/@name}ServiceLocal ${lower-case($class/@name)}ServiceBean;
<f:message>generated.comment</f:message>	
	@In(create = true)
	protected EntityManager em;
<f:message>generated.comment</f:message>	
	@Override
	@WebRemote
	public ${$class/@name} create(${$class/@name} entity) {
		return  (${$class/@name}) getBeanManager().clone(em.merge(entity));
	}
<f:message>generated.comment</f:message>
	@Override
	@WebRemote
	public void delete(${$class/@name} entity) {
		em.remove(em.find(${$class/@name}.class, entity.getId()));
	}
<f:message>generated.comment</f:message>
	@Override
	@WebRemote
	public TableObj<${$class/@name}> getTableObj( int start) {
		TableObj<${$class/@name}> tableObj = new TableObj<${$class/@name}>();
		tableObj.setRecords(getEntities(start));
		tableObj.setNumberOfRecords(getEntitySize());
		return tableObj;
	}
<f:message>generated.comment</f:message>
	@Override
	@WebRemote
	public ${$class/@name} read( Long id) {
		return (${$class/@name}) getBeanManager().clone(em.find(${$class/@name}.class, id));
	}
<f:message>generated.comment</f:message>
	@Override
	@WebRemote
	public ${$class/@name} update(${$class/@name} entity) {
		em.merge(getBeanManager().merge(entity));
		return entity;
	}

<%-- process all getRelated entities relations--%>
<%--process level2 generizations --%>
<c:if test="not($class/@name = $parentClass2/@name)">
  			<c:setVariable select="$parentClass2/@xmi.id" var="classID"/>
  			<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID">
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  	 	<c:if test="not($association_connection_end/@xmi.id = $association_connection_end2/@xmi.id)">
  					  		 	<%-- process many on target--%>
								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
  								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
  					  		 	<%-- check to see if this is a navigable relation--%>
  					  		 	<c:if test="$association_connection_end2/@isNavigable = 'true'">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2">
<f:message>generated.comment</f:message>  					  		 			 
	@Override
	@WebRemote
	public  List<${$class2/@name}> get${$class2/@name}s(Long entityID) {
		List<${$class2/@name}> res = new ArrayList<${$class2/@name}>();
		for (${$class2/@name} obj : em.find(${$class/@name}.class, entityID).get${$class2/@name}s()) {
			res.add((${$class2/@name}) getBeanManager().clone(obj));
		}
		return res;	
	}
	  					  		 			<%-- check to see if the parent side is aggregation or none--%> 
	  					  		 			<c:if test="not($association_connection_end/@aggregation = 'composite')">
<f:message>generated.comment</f:message>	  					  		 			
	@Override
	@WebRemote	  					  		 			
	public MultiSelectObjy get${$class2/@name}sMultiSelect(Long entityID, String[] columns){
		${$class/@name} entity = em.find(${$class/@name}.class, entityID);
		Set<Long> ids = new HashSet<Long>();
		MultiSelectObjy obj = new MultiSelectObjy();
		obj.setAvailable(GWTServletUtils.getListBoxValues(${$class2/@name}.class,
				columns, em));
		for (${$class2/@name} child : entity.get${$class2/@name}s()) {
			ids.add(child.getId());
		}
		obj.setSelected(ids);
		return obj;
	}
	  					  		 			</c:if>	
  					  		 			</c:if> 
  					  		 		</c:iterate>
  							  	</c:if> 
								</c:if>	
  							  	</c:if>
  							  	</c:if>
  					 	  </c:iterate>	  					 	 				 	  
					</c:if> 										
		</c:iterate>
	</c:iterate>
</c:iterate>
</c:if>
<c:setVariable select="$class/@xmi.id" var="classID"/>
<%--process level 1 generizations --%>
<c:if test="not($class/@name = $parentClass1/@name)">
  			<c:setVariable select="$parentClass1/@xmi.id" var="classID"/>
  			<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID">
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  	 	<c:if test="not($association_connection_end_classID2 = $classID)">
  					  		 	<%-- process many on target--%>
								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
  								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
  					  		 	<%-- check to see if this is a navigable relation--%>
  					  		 	<c:if test="$association_connection_end2/@isNavigable = 'true'">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2">
<f:message>generated.comment</f:message>  					  		 			 
	@Override
	@WebRemote
	public  List<${$class2/@name}> get${$class2/@name}s(Long entityID) {
		List<${$class2/@name}> res = new ArrayList<${$class2/@name}>();
		for (${$class2/@name} obj : em.find(${$class/@name}.class, entityID).get${$class2/@name}s()) {
			res.add((${$class2/@name}) getBeanManager().clone(obj));
		}
		return res;	
	}
	  					  		 			<%-- check to see if the parent side is aggregation or none--%> 
	  					  		 			<c:if test="not($association_connection_end/@aggregation = 'composite')">
<f:message>generated.comment</f:message>	  					  		 			
	@Override
	@WebRemote	  					  		 			
	public MultiSelectObjy get${$class2/@name}sMultiSelect(Long entityID, String[] columns){
		${$class/@name} entity = em.find(${$class/@name}.class, entityID);
		Set<Long> ids = new HashSet<Long>();
		MultiSelectObjy obj = new MultiSelectObjy();
		obj.setAvailable(GWTServletUtils.getListBoxValues(${$class2/@name}.class,
				columns, em));
		for (${$class2/@name} child : entity.get${$class2/@name}s()) {
			ids.add(child.getId());
		}
		obj.setSelected(ids);
		return obj;
	}
	  					  		 			</c:if>		
	
  					  		 			</c:if> 
  					  		 		</c:iterate>
  							  	</c:if> 
								</c:if>	
  							  	</c:if>
  							  	</c:if>
  					 	  </c:iterate>	  					 	 				 	  
					</c:if> 										
		</c:iterate>
	</c:iterate>
</c:iterate>
</c:if>
<c:setVariable select="$class/@xmi.id" var="classID"/>
<%--level 0 --%>				
<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID">
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  	 	<c:if test="not($association_connection_end/@xmi.id = $association_connection_end2/@xmi.id)">
  					  		 	<%-- process many on target--%>
								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
  								<c:if test="$association_connection_end2/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
  					  		 	<%-- check to see if this is a navigable relation--%>
  					  		 	<c:if test="$association_connection_end2/@isNavigable = 'true'">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2">
<f:message>generated.comment</f:message>  					  		 			 
	@Override
	@WebRemote
	public  List<${$class2/@name}> get${$class2/@name}s(Long entityID) {
		List<${$class2/@name}> res = new ArrayList<${$class2/@name}>();
		for (${$class2/@name} obj : em.find(${$class/@name}.class, entityID).get${$class2/@name}s()) {
			res.add((${$class2/@name}) getBeanManager().clone(obj));
		}
		return res;	
	}
	  					  		 			<%-- check to see if the parent side is aggregation or none--%> 
	  					  		 			<c:if test="not($association_connection_end/@aggregation = 'composite')">
<f:message>generated.comment</f:message>	  					  		 			
	@Override
	@WebRemote	  					  		 			
	public MultiSelectObjy get${$class2/@name}sMultiSelect(Long entityID, String[] columns){
		${$class/@name} entity = em.find(${$class/@name}.class, entityID);
		Set<Long> ids = new HashSet<Long>();
		MultiSelectObjy obj = new MultiSelectObjy();
		obj.setAvailable(GWTServletUtils.getListBoxValues(${$class2/@name}.class,
				columns, em));
		for (${$class2/@name} child : entity.get${$class2/@name}s()) {
			ids.add(child.getId());
		}
		obj.setSelected(ids);
		return obj;
	}
	  					  		 			</c:if>		
  					  		 			</c:if> 
  					  		 		</c:iterate>
  							  	</c:if> 
								</c:if>	
  							  	</c:if>
  							  	</c:if>
  					 	  </c:iterate>	  					 	 				 	  
					</c:if> 										
		</c:iterate>
	</c:iterate>
</c:iterate>

	
<%-- process all addAll relations--%>	
<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID">
					<%-- process only classes with many on source side--%>
					<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
  					<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <%-- process only non composites --%>
  					  	 <c:if test="not($association_connection_end2/@aggregation = 'composite')">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end/@xmi.id = $association_connection_end2/@xmi.id)"> 
  					  		 	<%-- check to see if this is a navigable relation--%>
  					  		 	<c:if test="$association_connection_end/@isNavigable = 'true'">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2">
  					  		 			//TODO fix this remove generics
<f:message>generated.comment</f:message>  					  		 			
  					  		 			@Override
										@WebRemote
										public void add${$class2/@name}${$class/@name}s(Long ${lower-case($class2/@name)}Id,List<Long> ids) {							
										${$class2/@name}	${lower-case($class2/@name)} = em.find(${$class2/@name}.class,${lower-case($class2/@name)}Id);
											for (Long id : ids) {
												${$class/@name} child = (${$class/@name}) em.find(${$class/@name}.class, id);
												if (child == null) {
													throw new RuntimeException("error find entity with id:" + id
															+ ":on:" + child.getClass().getName());
												}
												${lower-case($class2/@name)}.add${$class/@name}(child);
											}											
										} 
  					  		 			</c:if> 
  					  		 		</c:iterate>
  					  		 	</c:if>	
  							  	</c:if> 
  							  	</c:if>	
  					 	  </c:iterate>
  					</c:if> 	   
  					</c:if> 	  					 	 				 	  
					</c:if> 										
		</c:iterate>
	</c:iterate>
</c:iterate>	

<%-- process all removeAll relations--%>	
<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID">
					<%-- process only classes with many on source side--%>
					<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@lower = 0">
  					<c:if test="$association_connection_end/AssociationEnd.multiplicity/Multiplicity/Multiplicity.range/MultiplicityRange/@upper = -1">
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <%-- process only non composites --%>
  					  	 <c:if test="not($association_connection_end2/@aggregation = 'composite')">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end/@xmi.id = $association_connection_end2/@xmi.id)"> 
  					  		 	<%-- check to see if this is a navigable relation--%>
  					  		 	<c:if test="$association_connection_end/@isNavigable = 'true'">
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2">
  					  		 			//TODO fix this remove generics
<f:message>generated.comment</f:message>  					  		 			
  					  		 			@Override
										@WebRemote
										public void remove${$class2/@name}${$class/@name}s(Long ${lower-case($class2/@name)}Id,List<Long> ids) {
										${$class2/@name}	${lower-case($class2/@name)} = em.find(${$class2/@name}.class,${lower-case($class2/@name)}Id);
											for (Long id : ids) {
												${$class/@name} child = (${$class/@name}) em.find(${$class/@name}.class, id);
												if (child == null) {
													throw new RuntimeException("error find entity with id:" + id
															+ ":on:" + child.getClass().getName());
												}
												${lower-case($class2/@name)}.get${$class/@name}s().remove(child);
											}
										} 
  					  		 			</c:if> 
  					  		 		</c:iterate>
  					  		 	</c:if>	
  							  	</c:if> 
  							  	</c:if>	
  					 	  </c:iterate>
  					</c:if> 	   
  					</c:if> 	  					 	 				 	  
					</c:if> 										
		</c:iterate>
	</c:iterate>
</c:iterate>
		
<f:message>generated.comment</f:message>
	@Override
	@WebRemote
	public List<${$class/@name}> getEntities(${$class/@name} entity) {
		List<${$class/@name}> entities = new ArrayList<${$class/@name}>();
		Query getEntities = em.createQuery(GWTServletUtils
				.getSearchQueryString(entity));
		for (Object obj : getEntities.getResultList()) {
			entities.add((${$class/@name}) getBeanManager().clone(obj));
		}
		return entities;
	}
<f:message>generated.comment</f:message>
	@Override
	@WebRemote
	public  Map<Long, String> getListBoxValues(String[] columns) {
		String query = GWTServletUtils.getListBoxResultsQueryString(${$class/@name}.class.getCanonicalName(), columns);
		Map<Long, String> values = new HashMap<Long, String>();
		Query getListBoxValues = em.createQuery(query);
		for (Object obj : getListBoxValues.getResultList()) {
			Object[] obs = (Object[]) obj;
			values.put((Long) obs[0], (String) obs[1]);
		}
		return values;
	}

<f:message>generated.comment</f:message>
	@Override
	@WebRemote
	public List<String> getSuggestionsForName(String name, ${$class/@name} entity) {
		Query query = em.createQuery(GWTServletUtils.getSuggestionsQueryForName(name, entity));
		return query.getResultList();
	}

	
	<%-- process all merge relations--%>	
<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Association" var="association">
	<c:iterate select="$association/Association.connection" var="association_connection">
		<c:iterate select="$association_connection/AssociationEnd" var="association_connection_end">
			<c:setVariable select="$association_connection_end/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID" />
		<%-- check is the association is corresponding to the class  --%>
					<c:if test="$association_connection_end_classID = $classID">
  					   	<%-- iterate over the iterations ends  --%>
  					  	 <c:iterate select="$association_connection/AssociationEnd" var="association_connection_end2">
  					  	 <%-- process only  composites on target--%>
  					  	 <c:if test="$association_connection_end2/@aggregation = 'composite'">
  					  	 <c:setVariable select="$association_connection_end2/AssociationEnd.participant/Class/@xmi.idref" var="association_connection_end_classID2" />
  					  	 	<%-- get the end secondary end with other class  --%>
  					  		 	<c:if test="not($association_connection_end/@xmi.id = $association_connection_end2/@xmi.id)"> 
  					  		 	<%-- iterate throught all the classes to get the other class on the association--%>
  					  		 		<c:iterate select="/XMI/XMI.content/Model/Namespace.ownedElement/Package/Namespace.ownedElement/Class" var="class2">
  					  		 			<c:if test="$class2/@xmi.id = $association_connection_end_classID2"> 
<f:message>generated.comment</f:message> 											
	@Override
	@WebRemote
	public  void merge(${$class/@name} entity, ${$class2/@name} child) {
		entity.set${$class2/@name}(em.find(${$class2/@name}.class, child.getId()));
		em.merge(entity);
	}
  					  		 			</c:if> 
  					  		 		</c:iterate>
  							  	</c:if> 
  							  	</c:if>	
  					 	  </c:iterate> 	  					 	 				 	  
					</c:if> 										
		</c:iterate>
	</c:iterate>
</c:iterate>

<c:if test="$enableHibernateSearch = 'true'">
<f:message>generated.comment</f:message>
	@Override
	@WebRemote
	public List<${$class/@name}> search(String searchText) {
		List<${$class/@name}> results = new ArrayList<${$class/@name}>();
		org.apache.lucene.search.Query luceneQuery = SearchUtils
				.getLuceneQuery(searchText, "id", new StandardAnalyzer(Version.LUCENE_30),
						ReflectionUtils.getBeanProperties(${$class/@name}.class,
								DataType.STRING));
		FullTextQuery query = SearchUtils.getFullTextSession(em)
				.createFullTextQuery(luceneQuery,  ${$class/@name}.class);
		for (Object obj : query.list()) {
			results.add((${$class/@name}) getBeanManager().clone((obj)));
		}
		return results;
	}
</c:if>

	
<f:message>generated.comment</f:message>
	public <T extends Serializable> List<${$class/@name}> getEntities(int start) {
		List<${$class/@name}> entities = new ArrayList<${$class/@name}>();
		String query = "from " + ${$class/@name}.class.getCanonicalName();
		Query getEntitites = em.createQuery(query);
		getEntitites.setFirstResult(start);
		// TODO externalize the max results value
		getEntitites.setMaxResults(10);
		for (Object obj : getEntitites.getResultList()) {
			${$class/@name} clone = (${$class/@name}) getBeanManager().clone(obj);
			entities.add(clone);
		}
		return entities;
	}
<f:message>generated.comment</f:message>
	public <T extends Serializable> Long getEntitySize() {
		String query = "select count(entity) from "
				+ ${$class/@name}.class.getCanonicalName() + " entity";
		Query getEntitiesSize = em.createQuery(query);
		return (Long) getEntitiesSize.getSingleResult();
	}	
	
}
</f:bundle>
</java:format>
