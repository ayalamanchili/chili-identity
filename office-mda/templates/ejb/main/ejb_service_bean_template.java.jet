<java:merge/>
<java:format>
<f:bundle basename="templates/resources/messages">
<f:message>copyright</f:message>

package ${$groupID}.ejb.${$package/@name}.${lower-case($class/@name)};
<c:setVariable select="$class/@xmi.id" var="classID"/>
import ${$groupID}.entity.${lower-case($package/@name)}.${$class/@name};
import javax.ejb.Stateful;
import info.yalamanchili.gwt.beans.TableObj;
import java.util.List;
import java.util.ArrayList;
import info.yalamanchili.server.GWTServletUtils;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.annotation.PostConstruct;
import javax.persistence.Query;
import javax.persistence.PersistenceUnit;
import java.lang.reflect.Method;
import java.util.Map;
import java.util.HashMap;
import org.jboss.seam.annotations.Name;
import org.jboss.seam.annotations.Destroy;
import javax.ejb.Remove;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.jboss.seam.annotations.In;
import java.io.Serializable;

<f:message>generated.class.comment</f:message>
@Stateful(name = "${lower-case($class/@name)}")
@Name("${lower-case($class/@name)}ServiceBean")
public class ${$class/@name}ServiceBean implements  ${$class/@name}Service{

<f:message>generated.comment</f:message>
private static final Log log = LogFactory
			.getLog(${$class/@name}ServiceBean.class);
	
	<f:message>generated.comment</f:message>
	@PersistenceContext(unitName = "${$projectName}")
	protected EntityManager entityManager;
	
	<f:message>generated.comment</f:message>
	@Override
	public ${$class/@name} create(${$class/@name} entity) {
		return entityManager.merge(entity);
	}
	
	<f:message>generated.comment</f:message>
	@Override
	public void delete(${$class/@name} entity) {
		// TODO Auto-generated method stub
	}

	<f:message>generated.comment</f:message>
	@Override
	public List<${$class/@name}> getEntities(${$class/@name} entity) {
	List<${$class/@name}> entities = new ArrayList<${$class/@name}>();
		Query getEntities = entityManager.createQuery(GWTServletUtils
				.getSearchQueryString(entity));
		for (Object obj : getEntities.getResultList()) {
			entities.add((${$class/@name}) obj);
		}
		return entities;
	}
	
	<f:message>generated.comment</f:message>
	@Override
	public TableObj getTableObj(int start) {
		TableObj<${$class/@name}> tableObj = new TableObj<${$class/@name}>();
		tableObj.setNumberOfRecords(getEntitySizeT(new ${$class/@name}()));
		tableObj.setRecords(getEntitiesT(new ${$class/@name}(), start));
		return tableObj;
	}

	<f:message>generated.comment</f:message>
	@Override
	public ${$class/@name} read( Long id) {
	return entityManager.find(${$class/@name}.class,id);
	}

	<f:message>generated.comment</f:message>
	@Override
	public ${$class/@name} update(${$class/@name} entity) {
		return entityManager.merge(entity);
	}
	
	<f:message>generated.comment</f:message>
	public <T extends Serializable> List<${$class/@name}> getEntitiesT(${$class/@name} entity, int start) {
		List<${$class/@name}> entities = new ArrayList<${$class/@name}>();
		String query = "from " + entity.getClass().getCanonicalName();
		log.debug(query);
		Query getEntitites = entityManager.createQuery(query);
		getEntitites.setFirstResult(start);
		getEntitites.setMaxResults(10);
		for (Object obj : getEntitites.getResultList()) {
			${$class/@name} clone = ((${$class/@name}) obj);
			entities.add(clone);
		}
		return entities;
	}

	<f:message>generated.comment</f:message>
	public <T extends Serializable> Long getEntitySizeT(${$class/@name} entity) {
		String query = "select count(entity) from "
				+ entity.getClass().getCanonicalName() + " entity";
		log.debug(query);
		Query getEntitiesSize = entityManager.createQuery(query);
		return (Long) getEntitiesSize.getSingleResult();
	}

	<f:message>generated.comment</f:message>
	@Override
	public Map<Long, String> getListBoxValues(String[] columns) {
		String query = GWTServletUtils.getListBoxResultsQueryString(
				${$class/@name}.class.getCanonicalName(), columns);
		log.debug("ListBox Values query:" + query);
		Map<Long, String> values = new HashMap<Long, String>();
		Query getListBoxValues = entityManager.createQuery(query);
		for (Object obj : getListBoxValues.getResultList()) {
			Object[] obs = (Object[]) obj;
			values.put((Long) obs[0], (String) obs[1]);
		}
		return values;
	}
	
	<f:message>generated.comment</f:message>
	@Override
	public <T extends Serializable> void addAll(T parent, T children,
			List<Long> ids) {
		// find getter
		Method addMethod = null;
		for (Method method : parent.getClass().getMethods()) {
			if (method.getName().equalsIgnoreCase(
					"add" + children.getClass().getSimpleName())) {
				addMethod = method;
			}
		}
		parent = entityManager.merge(parent);
		for (Long id : ids) {
			T child = (T) entityManager.find(children.getClass(), id);
			if (child == null) {
				throw new RuntimeException("error find entity with id:" + id
						+ ":on:" + child.getClass().getName());
			}
			try {
				addMethod.invoke(parent, child);
			} catch (Exception e) {
				e.printStackTrace();
				throw new RuntimeException("error calling method:"
						+ addMethod.getName() + ":on:" + parent.getClass().getSimpleName());
			}
		}
	}
	
	<f:message>generated.comment</f:message>
	public EntityManager getEntityManager() {
		return entityManager;
	}
	
	<f:message>generated.comment</f:message>
	public void setEntityManager(EntityManager entityManager) {
		this.entityManager = entityManager;
	}
	
	<f:message>generated.comment</f:message>
	@Destroy
	@Remove
	public void destroy() {
	}

}
</f:bundle>
</java:format>