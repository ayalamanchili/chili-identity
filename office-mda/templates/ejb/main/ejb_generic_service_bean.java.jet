<java:merge/>
<java:format>
<f:bundle basename="templates/resources/messages">
<f:message>copyright</f:message>
package ${$groupID}.ejb;

import javax.ejb.Stateful;
import info.yalamanchili.gwt.beans.TableObj;
import java.util.List;
import java.util.Collection;
import java.util.Set;
import java.util.HashSet;
import java.util.ArrayList;
import info.yalamanchili.server.GWTServletUtils;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.annotation.PostConstruct;
import javax.persistence.Query;
import javax.persistence.PersistenceUnit;

import org.jboss.seam.annotations.Name;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import java.io.Serializable;
import javax.ejb.Stateless;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import org.jboss.seam.annotations.In;

<f:message>generated.class.comment</f:message>
@Name("genericServiceBean")
@Stateless(name="generic")
public class GenericServiceBean implements  GenericService{
	<f:message>generated.comment</f:message>
	private static final Log log = LogFactory
			.getLog(GenericServiceBean.class);
	
	<f:message>generated.comment</f:message>
	@PersistenceContext(unitName = "${$projectName}")
	EntityManager entityManager;
	
	<f:message>generated.comment</f:message>
	public <T extends Serializable> List<String> getSuggestionsForName(
			String name, T entity) {
		Query query = entityManager.createQuery(GWTServletUtils
				.getSuggestionsQueryForName(name, entity));
		return query.getResultList();
	}
	
	<f:message>generated.comment</f:message>
	@Override
	public <T extends Serializable> List<T> getRelatedEntities(Long entityID,
			Class sourceClass, T target) {
		Object sourceEntity = entityManager.find(sourceClass, entityID);
		Collection<T> res = null;
		List<T> result = new ArrayList<T>();
		for (Method method : sourceClass.getMethods()) {
			if (method.getReturnType().equals(java.util.List.class)
					|| method.getReturnType().equals(java.util.Set.class)) {
				ParameterizedType type = (ParameterizedType) method
						.getGenericReturnType();

				if (type.toString().contains(
						target.getClass().getCanonicalName())) {
					try {
						res = (Collection<T>)	 method.invoke(sourceEntity);
					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
						throw new RuntimeException("Call failed");
					}
				}
			}
		}
		if (res != null)
			for (T entity : res) {
			result.add((T) entity);
			}
		return result;
	}
	

}
</f:bundle>
</java:format>