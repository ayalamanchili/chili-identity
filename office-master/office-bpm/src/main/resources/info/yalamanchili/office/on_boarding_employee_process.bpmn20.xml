<?xml version="1.0" encoding="UTF-8"?>
<!--

    System Soft Technologies Copyright (C) 2013 ayalamanchili@sstech.mobi

-->
<definitions
    xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
    targetNamespace="http://www.bpmnwithactiviti.org"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:activiti="http://activiti.org/bpmn">
 
    <process id="on_boarding_employee_process">
        
        <startEvent id="onBoardingEmployeeProcessStart" />
       
        <sequenceFlow sourceRef="onBoardingEmployeeProcessStart" targetRef="sendEmployeeOnBoardingProcessStartEmail" />
        
         <serviceTask id="sendEmployeeOnBoardingProcessStartEmail" 
                     name="Send Email to Employee Task" 
                     activiti:expression="#{onBoardingEmployeeProcessBean.sendEmployeeOnBoardingProcessStartEmail(entity)}" />  
        
        <sequenceFlow sourceRef="sendEmployeeOnBoardingProcessStartEmail" 
                      targetRef="onBoardingFormsAndDataValidationTask"/>
        
        <!-- On Boarding Form and Data Validation task : OnBoarding_Manager-->
        <userTask id="onBoardingFormsAndDataValidationTask" 
                  name="On Boarding Forms and Data Validation task for ${entity.firstName} ${entity.lastName}" 
                  activiti:candidateGroups="ROLE_ON_BOARDING_MGR">
            <documentation>
                On Boarding Forms and Data Validation Task For #{entity.firstName} #{entity.lastName}
                Employee Name       : #{entity.firstName} #{entity.lastName}
                Employee Type       : #{entity.employeeType.name}
                Gender              : #{entity.sex}
                Date Of Birth       : #{entity.getDateOfBirth()}
                Email               : #{entity.getEmails().get(0).getEmail()}
                Address             : #{address.street1} - #{address.city} - #{address.state} - #{address.country}
                Start Date          : #{entity.startDate}
                
                Please follow below instructions 
                http://apps.sstech.us/site/office/verifyformsanddocs.html  
            </documentation>
            <extensionElements>
                <activiti:taskListener event="create" class="info.yalamanchili.office.bpm.onboarding.OnBoardingEmployeeProcess" />
                <activiti:taskListener event="complete" class="info.yalamanchili.office.bpm.onboarding.OnBoardingEmployeeProcess" />
                
                <activiti:formProperty id="status" 
                                       name="Approved?"
                                       required="true"
                                       type="enum">
                    <activiti:value id="approved" name="approved"/>
                    <activiti:value id="rejected" name="rejected"/>
                </activiti:formProperty>
                <activiti:formProperty id="notes" 
                                       name="Notes"
                                       required="false" 
                                       type="string" />
            </extensionElements> 
        </userTask>
        <!--          On Boarding Form and Data Validation task : Task escalation email after 48 hours-->
        <boundaryEvent id="onBoardingFormsAndDataValidationTaskEscalationTimer"
                       cancelActivity="false" 
                       attachedToRef="onBoardingFormsAndDataValidationTask">
            <timerEventDefinition> 
                <timeDuration>PT48H</timeDuration> 
            </timerEventDefinition>
        </boundaryEvent>
        <sequenceFlow sourceRef="onBoardingFormsAndDataValidationTaskEscalationTimer" 
                      targetRef="onBoardingFormsAndDataValidationTaskEscalation" />
        <serviceTask id="onBoardingFormsAndDataValidationTaskEscalation" name="Task Email Escalation" activiti:class="info.yalamanchili.office.bpm.EmailEscalation"> </serviceTask>
        <!--          On Boarding Form and Data Validation task : Decision -->
        <sequenceFlow sourceRef="onBoardingFormsAndDataValidationTask" 
                      targetRef="fork1">
            <conditionExpression xsi:type="tFormalExpression">
                ${status == 'approved' and entity.employeeType.name == 'Corporate Employee'}
            </conditionExpression>
        </sequenceFlow>
        <sequenceFlow sourceRef="onBoardingFormsAndDataValidationTask" 
                      targetRef="formsValidationGateway">
            <conditionExpression xsi:type="tFormalExpression">
                ${status == 'approved' and entity.employeeType.name != 'Corporate Employee'}
            </conditionExpression>
        </sequenceFlow>
        <exclusiveGateway id="formsValidationGateway"/>
        <parallelGateway id="fork1" />
        <sequenceFlow sourceRef="fork1" 
                      targetRef="backGroundAndDrugScreeningTestTask">
        </sequenceFlow>
        <sequenceFlow sourceRef="fork1" 
                      targetRef="eVerifyTask">
        </sequenceFlow>
        
        <sequenceFlow sourceRef="formsValidationGateway" 
                      targetRef="onBoardingEmployeeProcessEnd">
            <conditionExpression xsi:type="tFormalExpression">
                ${status == 'rejected'}
            </conditionExpression>
        </sequenceFlow>
         
        <sequenceFlow sourceRef="formsValidationGateway" 
                      targetRef="eVerifyTask">
            <conditionExpression xsi:type="tFormalExpression">
                ${status == 'approved'}
            </conditionExpression>
        </sequenceFlow>
        
        <!--         BackGround And Drug Screening Test Task : ROLE_BACKGROUND_SCREENING_MGR-->
        <userTask id="backGroundAndDrugScreeningTestTask" 
                  name="BackGround And Drug Screening Test Task  for ${entity.firstName} ${entity.lastName}" 
                  activiti:candidateGroups="ROLE_BACKGROUND_SCREENING_MGR">
            <documentation>
                BackGround And Drug Screening Task for #{entity.firstName} #{entity.lastName}
                Employee Name       : #{entity.firstName} #{entity.lastName}
                Employee Type       : #{entity.employeeType.name}
                Gender              : #{entity.sex}
                Date Of Birth       : #{entity.getDateOfBirth()}
                Email               : #{entity.getEmails().get(0).getEmail()}
                Address             : #{address.street1} - #{address.city} - #{address.state} - #{address.country}
                Start Date          : #{entity.startDate}
            </documentation>
            <extensionElements>
                <activiti:taskListener event="create" class="info.yalamanchili.office.bpm.onboarding.OnBoardingEmployeeProcess" />
                <activiti:taskListener event="complete" class="info.yalamanchili.office.bpm.onboarding.OnBoardingEmployeeProcess" />
                
                <activiti:formProperty id="status" 
                                       name="Approved?"
                                       required="true"
                                       type="enum">
                    <activiti:value id="approved" name="approved"/>
                    <activiti:value id="rejected" name="rejected"/>
                </activiti:formProperty>
                <activiti:formProperty id="notes" 
                                       name="Notes"
                                       required="false" 
                                       type="string" />
            </extensionElements> 
        </userTask>
        <!--          BackGround And Drug Screening Test Task : Task escalation email after 48 hours-->
        <boundaryEvent id="backGroundAndDrugScreeningTestTaskEscalationTimer"
                       cancelActivity="false" 
                       attachedToRef="backGroundAndDrugScreeningTestTask">
            <timerEventDefinition> 
                <timeDuration>PT48H</timeDuration> 
            </timerEventDefinition>
        </boundaryEvent>
        <sequenceFlow sourceRef="backGroundAndDrugScreeningTestTaskEscalationTimer" 
                      targetRef="backGroundAndDrugScreeningTestTaskEscalation" />
        <serviceTask id="backGroundAndDrugScreeningTestTaskEscalation" name="Task Email Escalation" activiti:class="info.yalamanchili.office.bpm.EmailEscalation"> </serviceTask>
        <!--          BackGround And Drug Screening Test Task : Decision -->
        <sequenceFlow sourceRef="backGroundAndDrugScreeningTestTask" targetRef="join1">
            <conditionExpression xsi:type="tFormalExpression">
                ${status == 'approved'}
            </conditionExpression>
        </sequenceFlow>
        <sequenceFlow sourceRef="backGroundAndDrugScreeningTestTask" 
                      targetRef="onBoardingEmployeeProcessEnd">
            <conditionExpression xsi:type="tFormalExpression">
                ${status == 'rejected'}
            </conditionExpression>
        </sequenceFlow>
        
        <!--         E Verify Manager task : E_Verify_Manager-->
        <userTask id="eVerifyTask" 
                  name="E Verify Task for ${entity.firstName} ${entity.lastName}" 
                  activiti:candidateGroups="ROLE_E_VERIFY_MGR">
            <documentation>
                E Verify Task for #{entity.firstName} #{entity.lastName}
                Employee Name       : #{entity.firstName} #{entity.lastName}
                Employee Type       : #{entity.employeeType.name}
                Gender              : #{entity.sex}
                Date Of Birth       : #{entity.getDateOfBirth()}
                Email               : #{entity.getEmails().get(0).getEmail()}
                Address             : #{address.street1} - #{address.city} - #{address.state} - #{address.country}
                Start Date          : #{entity.startDate}
            </documentation>
            <extensionElements>
                <activiti:taskListener event="create" class="info.yalamanchili.office.bpm.onboarding.OnBoardingEmployeeProcess" />
                <activiti:taskListener event="complete" class="info.yalamanchili.office.bpm.onboarding.OnBoardingEmployeeProcess" />
                
                <activiti:formProperty id="status" 
                                       name="Approved?"
                                       required="true"
                                       type="enum">
                    <activiti:value id="approved" name="approved"/>
                    <activiti:value id="rejected" name="rejected"/>
                </activiti:formProperty>
                <activiti:formProperty id="notes" 
                                       name="Notes"
                                       required="false" 
                                       type="string" />
            </extensionElements> 
        </userTask>
        <!--          E Verify Manager task : Task escalation email after 48 hours-->
        <boundaryEvent id="eVerifyTaskEscalationTimer"
                       cancelActivity="false" 
                       attachedToRef="eVerifyTask">
            <timerEventDefinition> 
                <timeDuration>PT48H</timeDuration> 
            </timerEventDefinition>
        </boundaryEvent>
        <sequenceFlow sourceRef="eVerifyTaskEscalationTimer" 
                      targetRef="eVerifyTaskEscalation" />
        <serviceTask id="eVerifyTaskEscalation" name="Task Email Escalation" activiti:class="info.yalamanchili.office.bpm.EmailEscalation"> </serviceTask>
        <!--          E Verify Manager task : Decision -->
        <sequenceFlow sourceRef="eVerifyTask" targetRef="join1">
            <conditionExpression xsi:type="tFormalExpression">
                ${status == 'approved' and entity.employeeType.name == 'Corporate Employee'}
            </conditionExpression>
        </sequenceFlow>
        <sequenceFlow sourceRef="eVerifyTask" targetRef="payrollRegistrationTask">
            <conditionExpression xsi:type="tFormalExpression">
                ${status == 'approved' and entity.employeeType.name != 'Corporate Employee'}
            </conditionExpression>
        </sequenceFlow>
        <sequenceFlow sourceRef="eVerifyTask" 
                      targetRef="onBoardingEmployeeProcessEnd">
            <conditionExpression xsi:type="tFormalExpression">
                ${status == 'rejected'}
            </conditionExpression>
        </sequenceFlow>
        
        <parallelGateway id="join1" />
        <sequenceFlow sourceRef="join1" targetRef="payrollRegistrationTask" />
        
        <!--         Payroll Registration Task :  Payroll Department -->
        <userTask id="payrollRegistrationTask" 
                  name="Payroll Registration Task for ${entity.firstName} ${entity.lastName}" 
                  activiti:candidateGroups="ROLE_PAYROLL_AND_BENIFITS">
            <documentation>
                Payroll Registration Task for #{entity.firstName} #{entity.lastName}
                Employee Name       : #{entity.firstName} #{entity.lastName}
                Employee Type       : #{entity.employeeType.name}
                Gender              : #{entity.sex}
                Date Of Birth       : #{entity.getDateOfBirth()}
                Email               : #{entity.getEmails().get(0).getEmail()}
                Address             : #{address.street1} - #{address.city} - #{address.state} - #{address.country}
                Start Date          : #{entity.startDate}
            </documentation>
            <extensionElements>
                <activiti:taskListener event="create" class="info.yalamanchili.office.bpm.onboarding.OnBoardingEmployeeProcess" />
                <activiti:taskListener event="complete" class="info.yalamanchili.office.bpm.onboarding.OnBoardingEmployeeProcess" />
                <activiti:formProperty id="notes" 
                                       name="Notes"
                                       required="true" 
                                       type="string" />
            </extensionElements> 
        </userTask>
        <!--          Payroll Registration Task :  Task escalation email after 48 hours-->
        <boundaryEvent id="payrollRegistrationTaskEscalationTimer"
                       cancelActivity="false" 
                       attachedToRef="payrollRegistrationTask">
            <timerEventDefinition> 
                <timeDuration>PT48H</timeDuration> 
            </timerEventDefinition>
        </boundaryEvent>
        <sequenceFlow sourceRef="payrollRegistrationTaskEscalationTimer" 
                      targetRef="payrollRegistrationTaskEscalation" />
        <serviceTask id="payrollRegistrationTaskEscalation" name="Task Email Escalation" activiti:class="info.yalamanchili.office.bpm.EmailEscalation"> </serviceTask>
        <!--          Payroll Registration Task :  Decision -->
        <sequenceFlow sourceRef="payrollRegistrationTask" 
                      targetRef="fork2" >
            <conditionExpression xsi:type="tFormalExpression">
                ${entity.employeeType.name == 'Corporate Employee'}
            </conditionExpression>
        </sequenceFlow>
        <sequenceFlow sourceRef="payrollRegistrationTask" 
                      targetRef="EmployeeOrientationTask" >
            <conditionExpression xsi:type="tFormalExpression">
                ${entity.employeeType.name == 'Employee'}
            </conditionExpression>
        </sequenceFlow>
        
        <parallelGateway id = "fork2"/>
            
        <sequenceFlow sourceRef="fork2" 
                      targetRef="ServiceTicketTaskforNetworkDept">
        </sequenceFlow>
        <sequenceFlow sourceRef="fork2" 
                      targetRef="EmployeeOrientationTask">
        </sequenceFlow>
        
        <!-- Create Service Ticket For Network Department  -->
        <userTask id="ServiceTicketTaskforNetworkDept" 
                  name="Network Department Task for ${entity.firstName} ${entity.lastName}" 
                  activiti:candidateGroups="ROLE_SYSTEM_AND_NETWORK_ADMIN">
            <documentation>
                Network Department Task for #{entity.firstName} #{entity.lastName}
                Please provide network related support to this employee and complete the task.
                
                Employee Name       : #{entity.firstName} #{entity.lastName}
                Employee Type       : #{entity.employeeType.name}
                Gender              : #{entity.sex}
                Date Of Birth       : #{entity.getDateOfBirth()}
                Email               : #{entity.getEmails().get(0).getEmail()}
                Address             : #{address.street1} - #{address.city} - #{address.state} - #{address.country}
                Start Date          : #{entity.startDate}
            </documentation>
            <extensionElements>
                <activiti:taskListener event="create" class="info.yalamanchili.office.bpm.onboarding.OnBoardingEmployeeProcess" />
                <activiti:taskListener event="complete" class="info.yalamanchili.office.bpm.onboarding.OnBoardingEmployeeProcess" />
                <activiti:formProperty id="notes" 
                                       name="Notes"
                                       required="true" 
                                       type="string" />
            </extensionElements> 
        </userTask>
        <boundaryEvent id="ServiceTicketTaskEscalationTimer"
                       cancelActivity="false" 
                       attachedToRef="ServiceTicketTaskforNetworkDept">
            <timerEventDefinition> 
                <timeDuration>PT48H</timeDuration> 
            </timerEventDefinition>
        </boundaryEvent>
        <sequenceFlow sourceRef="ServiceTicketTaskEscalationTimer" 
                      targetRef="ServiceTicketTaskEscalation" />
        <serviceTask id="ServiceTicketTaskEscalation" name="Task Email Escalation" activiti:class="info.yalamanchili.office.bpm.EmailEscalation"> </serviceTask>
        <sequenceFlow sourceRef="ServiceTicketTaskforNetworkDept" targetRef="join2" />
        
        <!-- Employee Orientation Task -->
        <userTask id="EmployeeOrientationTask" 
                  name="Employee Orientation Task for ${entity.firstName} ${entity.lastName}" 
                  activiti:candidateGroups="ROLE_ON_BOARDING_MGR">
            <documentation>
                Employee Orientation Task For #{entity.firstName} #{entity.lastName}
                Please inform company standards, policies and his/her work related activities to the employee and complete this task.
                
                Employee Name       : #{entity.firstName} #{entity.lastName}
                Employee Type       : #{entity.employeeType.name}
                Gender              : #{entity.sex}
                Date Of Birth       : #{entity.getDateOfBirth()}
                Email               : #{entity.getEmails().get(0).getEmail()}
                Address             : #{address.street1} - #{address.city} - #{address.state} - #{address.country}
                Start Date          : #{entity.startDate}
            </documentation>
            <extensionElements>
                <activiti:taskListener event="create" class="info.yalamanchili.office.bpm.onboarding.OnBoardingEmployeeProcess" />
                <activiti:taskListener event="complete" class="info.yalamanchili.office.bpm.onboarding.OnBoardingEmployeeProcess" />
                <activiti:formProperty id="notes" 
                                       name="Notes"
                                       required="true" 
                                       type="string" />
            </extensionElements> 
        </userTask>
        <boundaryEvent id="EmployeeOrientationTaskEscalationTimer"
                       cancelActivity="false" 
                       attachedToRef="EmployeeOrientationTask">
            <timerEventDefinition> 
                <timeDuration>PT48H</timeDuration> 
            </timerEventDefinition>
        </boundaryEvent>
        <sequenceFlow sourceRef="EmployeeOrientationTaskEscalationTimer" 
                      targetRef="EmployeeOrientationTaskEscalation" />
        <serviceTask id="EmployeeOrientationTaskEscalation" name="Task Email Escalation" activiti:class="info.yalamanchili.office.bpm.EmailEscalation"> </serviceTask>
        <sequenceFlow sourceRef="EmployeeOrientationTask" targetRef="join2">
            <conditionExpression xsi:type="tFormalExpression">
                ${entity.employeeType.name == 'Corporate Employee'}
            </conditionExpression>
        </sequenceFlow>
        <sequenceFlow sourceRef="EmployeeOrientationTask" targetRef="sendEmployeeOnBoardingCompletedEmail" >
            <conditionExpression xsi:type="tFormalExpression">
                ${entity.employeeType.name == 'Employee'}
            </conditionExpression>
        </sequenceFlow>
        
        <parallelGateway id="join2" />
        <sequenceFlow sourceRef="join2" targetRef="sendEmployeeOnBoardingCompletedEmail" />
        
        <!--         Send Confirmation And Welcome Email to Employee -->
        <serviceTask id="sendEmployeeOnBoardingCompletedEmail" 
                     name="Send Confirmation And Welcome Email to Employee Task" 
                     activiti:expression="#{onBoardingEmployeeProcessBean.sendEmployeeOnBoardingCompletedEmail(entity)}" />  
        
        <sequenceFlow sourceRef="sendEmployeeOnBoardingCompletedEmail" 
                      targetRef="onBoardingEmployeeProcessEnd"/>
        <endEvent id="onBoardingEmployeeProcessEnd" />
    </process>
</definitions>